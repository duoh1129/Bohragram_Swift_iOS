//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 14 storyboards.
  struct storyboard {
    /// Storyboard `Chat`.
    static let chat = _R.storyboard.chat()
    /// Storyboard `Dashboard`.
    static let dashboard = _R.storyboard.dashboard()
    /// Storyboard `Explore`.
    static let explore = _R.storyboard.explore()
    /// Storyboard `Funding`.
    static let funding = _R.storyboard.funding()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Popup`.
    static let popup = _R.storyboard.popup()
    /// Storyboard `Post`.
    static let post = _R.storyboard.post()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()
    /// Storyboard `Search`.
    static let search = _R.storyboard.search()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()
    /// Storyboard `Store`.
    static let store = _R.storyboard.store()
    /// Storyboard `Story`.
    static let story = _R.storyboard.story()
    /// Storyboard `SuggestedUser`.
    static let suggestedUser = _R.storyboard.suggestedUser()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Chat", bundle: ...)`
    static func chat(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.chat)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Dashboard", bundle: ...)`
    static func dashboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.dashboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Explore", bundle: ...)`
    static func explore(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.explore)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Funding", bundle: ...)`
    static func funding(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.funding)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Popup", bundle: ...)`
    static func popup(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.popup)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Post", bundle: ...)`
    static func post(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.post)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profile)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Search", bundle: ...)`
    static func search(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.search)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Store", bundle: ...)`
    static func store(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.store)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Story", bundle: ...)`
    static func story(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.story)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SuggestedUser", bundle: ...)`
    static func suggestedUser(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.suggestedUser)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 5 colors.
  struct color {
    /// Color `Color-1`.
    static let color1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "Color-1")
    /// Color `Color-2`.
    static let color2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "Color-2")
    /// Color `Color-3`.
    static let color3 = Rswift.ColorResource(bundle: R.hostingBundle, name: "Color-3")
    /// Color `Color-4`.
    static let color4 = Rswift.ColorResource(bundle: R.hostingBundle, name: "Color-4")
    /// Color `Color`.
    static let color = Rswift.ColorResource(bundle: R.hostingBundle, name: "Color")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.color, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Color-1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func color1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.color1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Color-2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func color2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.color2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Color-3", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func color3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.color3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Color-4", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func color4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.color4, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Color", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func color(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.color.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Color-1", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func color1(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.color1.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Color-2", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func color2(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.color2.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Color-3", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func color3(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.color3.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Color-4", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func color4(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.color4.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 13 files.
  struct file {
    /// Resource file `BoutrosMBCDinkum-Medium.ttf`.
    static let boutrosMBCDinkumMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BoutrosMBCDinkum-Medium", pathExtension: "ttf")
    /// Resource file `Bryndan-Write.ttf`.
    static let bryndanWriteTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Bryndan-Write", pathExtension: "ttf")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Hacen Sudan.ttf`.
    static let hacenSudanTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Hacen Sudan", pathExtension: "ttf")
    /// Resource file `Harmattan-Regular.ttf`.
    static let harmattanRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Harmattan-Regular", pathExtension: "ttf")
    /// Resource file `Norican-Regular.ttf`.
    static let noricanRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Norican-Regular", pathExtension: "ttf")
    /// Resource file `Oswald-Heavy.ttf`.
    static let oswaldHeavyTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Oswald-Heavy", pathExtension: "ttf")
    /// Resource file `Roboto-Medium.ttf`.
    static let robotoMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Medium", pathExtension: "ttf")
    /// Resource file `RobotoMono-Regular.ttf`.
    static let robotoMonoRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoMono-Regular", pathExtension: "ttf")
    /// Resource file `SF-UI-Display-Regular.ttf`.
    static let sfuiDisplayRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-UI-Display-Regular", pathExtension: "ttf")
    /// Resource file `beyond_wonderland.ttf`.
    static let beyond_wonderlandTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "beyond_wonderland", pathExtension: "ttf")
    /// Resource file `emojione-android.ttf`.
    static let emojioneAndroidTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "emojione-android", pathExtension: "ttf")
    /// Resource file `ionicons.ttf`.
    static let ioniconsTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "ionicons", pathExtension: "ttf")

    /// `bundle.url(forResource: "BoutrosMBCDinkum-Medium", withExtension: "ttf")`
    static func boutrosMBCDinkumMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.boutrosMBCDinkumMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Bryndan-Write", withExtension: "ttf")`
    static func bryndanWriteTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bryndanWriteTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Hacen Sudan", withExtension: "ttf")`
    static func hacenSudanTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hacenSudanTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Harmattan-Regular", withExtension: "ttf")`
    static func harmattanRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.harmattanRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Norican-Regular", withExtension: "ttf")`
    static func noricanRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.noricanRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Oswald-Heavy", withExtension: "ttf")`
    static func oswaldHeavyTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.oswaldHeavyTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Medium", withExtension: "ttf")`
    static func robotoMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RobotoMono-Regular", withExtension: "ttf")`
    static func robotoMonoRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoMonoRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-UI-Display-Regular", withExtension: "ttf")`
    static func sfuiDisplayRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfuiDisplayRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "beyond_wonderland", withExtension: "ttf")`
    static func beyond_wonderlandTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.beyond_wonderlandTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "emojione-android", withExtension: "ttf")`
    static func emojioneAndroidTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.emojioneAndroidTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ionicons", withExtension: "ttf")`
    static func ioniconsTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ioniconsTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 11 fonts.
  struct font: Rswift.Validatable {
    /// Font `BeyondWonderland`.
    static let beyondWonderland = Rswift.FontResource(fontName: "BeyondWonderland")
    /// Font `BoutrosMBCDinkum-Medium`.
    static let boutrosMBCDinkumMedium = Rswift.FontResource(fontName: "BoutrosMBCDinkum-Medium")
    /// Font `Bryndan-Write`.
    static let bryndanWrite = Rswift.FontResource(fontName: "Bryndan-Write")
    /// Font `HacenSudan`.
    static let hacenSudan = Rswift.FontResource(fontName: "HacenSudan")
    /// Font `Harmattan-Regular`.
    static let harmattanRegular = Rswift.FontResource(fontName: "Harmattan-Regular")
    /// Font `Ionicons`.
    static let ionicons = Rswift.FontResource(fontName: "Ionicons")
    /// Font `Norican-Regular`.
    static let noricanRegular = Rswift.FontResource(fontName: "Norican-Regular")
    /// Font `Oswald-Heavy`.
    static let oswaldHeavy = Rswift.FontResource(fontName: "Oswald-Heavy")
    /// Font `Roboto-Medium`.
    static let robotoMedium = Rswift.FontResource(fontName: "Roboto-Medium")
    /// Font `RobotoMono-Regular2`.
    static let robotoMonoRegular2 = Rswift.FontResource(fontName: "RobotoMono-Regular2")
    /// Font `SFUIDisplay-Regular`.
    static let sfuiDisplayRegular = Rswift.FontResource(fontName: "SFUIDisplay-Regular")

    /// `UIFont(name: "BeyondWonderland", size: ...)`
    static func beyondWonderland(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: beyondWonderland, size: size)
    }

    /// `UIFont(name: "BoutrosMBCDinkum-Medium", size: ...)`
    static func boutrosMBCDinkumMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: boutrosMBCDinkumMedium, size: size)
    }

    /// `UIFont(name: "Bryndan-Write", size: ...)`
    static func bryndanWrite(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: bryndanWrite, size: size)
    }

    /// `UIFont(name: "HacenSudan", size: ...)`
    static func hacenSudan(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: hacenSudan, size: size)
    }

    /// `UIFont(name: "Harmattan-Regular", size: ...)`
    static func harmattanRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: harmattanRegular, size: size)
    }

    /// `UIFont(name: "Ionicons", size: ...)`
    static func ionicons(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ionicons, size: size)
    }

    /// `UIFont(name: "Norican-Regular", size: ...)`
    static func noricanRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: noricanRegular, size: size)
    }

    /// `UIFont(name: "Oswald-Heavy", size: ...)`
    static func oswaldHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: oswaldHeavy, size: size)
    }

    /// `UIFont(name: "Roboto-Medium", size: ...)`
    static func robotoMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMedium, size: size)
    }

    /// `UIFont(name: "RobotoMono-Regular2", size: ...)`
    static func robotoMonoRegular2(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMonoRegular2, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Regular", size: ...)`
    static func sfuiDisplayRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayRegular, size: size)
    }

    static func validate() throws {
      if R.font.beyondWonderland(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BeyondWonderland' could not be loaded, is 'beyond_wonderland.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.boutrosMBCDinkumMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BoutrosMBCDinkum-Medium' could not be loaded, is 'BoutrosMBCDinkum-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.bryndanWrite(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Bryndan-Write' could not be loaded, is 'Bryndan-Write.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.hacenSudan(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HacenSudan' could not be loaded, is 'Hacen Sudan.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.harmattanRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Harmattan-Regular' could not be loaded, is 'Harmattan-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ionicons(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Ionicons' could not be loaded, is 'ionicons.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.noricanRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Norican-Regular' could not be loaded, is 'Norican-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.oswaldHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Oswald-Heavy' could not be loaded, is 'Oswald-Heavy.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Medium' could not be loaded, is 'Roboto-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMonoRegular2(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoMono-Regular2' could not be loaded, is 'RobotoMono-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Regular' could not be loaded, is 'SF-UI-Display-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 140 images.
  struct image {
    /// Image `Add`.
    static let add = Rswift.ImageResource(bundle: R.hostingBundle, name: "Add")
    /// Image `Generals`.
    static let generals = Rswift.ImageResource(bundle: R.hostingBundle, name: "Generals")
    /// Image `Grid`.
    static let grid = Rswift.ImageResource(bundle: R.hostingBundle, name: "Grid")
    /// Image `Heart1`.
    static let heart1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Heart1")
    /// Image `Heart`.
    static let heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "Heart")
    /// Image `Image-1`.
    static let image1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Image-1")
    /// Image `Image`.
    static let image = Rswift.ImageResource(bundle: R.hostingBundle, name: "Image")
    /// Image `Lion`.
    static let lion = Rswift.ImageResource(bundle: R.hostingBundle, name: "Lion")
    /// Image `List`.
    static let list = Rswift.ImageResource(bundle: R.hostingBundle, name: "List")
    /// Image `MessageW`.
    static let messageW = Rswift.ImageResource(bundle: R.hostingBundle, name: "MessageW")
    /// Image `Message`.
    static let message = Rswift.ImageResource(bundle: R.hostingBundle, name: "Message")
    /// Image `Moon`.
    static let moon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Moon")
    /// Image `NotiBell`.
    static let notiBell = Rswift.ImageResource(bundle: R.hostingBundle, name: "NotiBell")
    /// Image `Pixcel`.
    static let pixcel = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pixcel")
    /// Image `Plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "Plus")
    /// Image `Profile`.
    static let profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile")
    /// Image `Science`.
    static let science = Rswift.ImageResource(bundle: R.hostingBundle, name: "Science")
    /// Image `Star1`.
    static let star1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Star1")
    /// Image `Star2`.
    static let star2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Star2")
    /// Image `abacus`.
    static let abacus = Rswift.ImageResource(bundle: R.hostingBundle, name: "abacus")
    /// Image `backGr1`.
    static let backGr1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "backGr1")
    /// Image `backGr2`.
    static let backGr2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "backGr2")
    /// Image `backs`.
    static let backs = Rswift.ImageResource(bundle: R.hostingBundle, name: "backs")
    /// Image `close1`.
    static let close1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "close1")
    /// Image `close2`.
    static let close2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "close2")
    /// Image `comment`.
    static let comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "comment")
    /// Image `correct`.
    static let correct = Rswift.ImageResource(bundle: R.hostingBundle, name: "correct")
    /// Image `deletets`.
    static let deletets = Rswift.ImageResource(bundle: R.hostingBundle, name: "deletets")
    /// Image `dollar`.
    static let dollar = Rswift.ImageResource(bundle: R.hostingBundle, name: "dollar")
    /// Image `dots`.
    static let dots = Rswift.ImageResource(bundle: R.hostingBundle, name: "dots")
    /// Image `downArrow`.
    static let downArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "downArrow")
    /// Image `downloadarraow`.
    static let downloadarraow = Rswift.ImageResource(bundle: R.hostingBundle, name: "downloadarraow")
    /// Image `eyes`.
    static let eyes = Rswift.ImageResource(bundle: R.hostingBundle, name: "eyes")
    /// Image `eyess`.
    static let eyess = Rswift.ImageResource(bundle: R.hostingBundle, name: "eyess")
    /// Image `fastforward`.
    static let fastforward = Rswift.ImageResource(bundle: R.hostingBundle, name: "fastforward")
    /// Image `films`.
    static let films = Rswift.ImageResource(bundle: R.hostingBundle, name: "films")
    /// Image `forbi`.
    static let forbi = Rswift.ImageResource(bundle: R.hostingBundle, name: "forbi")
    /// Image `forbidden`.
    static let forbidden = Rswift.ImageResource(bundle: R.hostingBundle, name: "forbidden")
    /// Image `friend`.
    static let friend = Rswift.ImageResource(bundle: R.hostingBundle, name: "friend")
    /// Image `fullscreen_disable`.
    static let fullscreen_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "fullscreen_disable")
    /// Image `fullscreen`.
    static let fullscreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "fullscreen")
    /// Image `gallery`.
    static let gallery = Rswift.ImageResource(bundle: R.hostingBundle, name: "gallery")
    /// Image `ic_aboutGender`.
    static let ic_aboutGender = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_aboutGender")
    /// Image `ic_aboutMail`.
    static let ic_aboutMail = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_aboutMail")
    /// Image `ic_about_Description`.
    static let ic_about_Description = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_about_Description")
    /// Image `ic_action_more`.
    static let ic_action_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_more")
    /// Image `ic_add_comment`.
    static let ic_add_comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_comment")
    /// Image `ic_add_post`.
    static let ic_add_post = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_post")
    /// Image `ic_add_user`.
    static let ic_add_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_user")
    /// Image `ic_alert`.
    static let ic_alert = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_alert")
    /// Image `ic_back_black`.
    static let ic_back_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back_black")
    /// Image `ic_blockuser`.
    static let ic_blockuser = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_blockuser")
    /// Image `ic_capture_camera`.
    static let ic_capture_camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_capture_camera")
    /// Image `ic_chat_bg`.
    static let ic_chat_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chat_bg")
    /// Image `ic_chat`.
    static let ic_chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chat")
    /// Image `ic_close`.
    static let ic_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close")
    /// Image `ic_contact_blue`.
    static let ic_contact_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_contact_blue")
    /// Image `ic_favorite_active`.
    static let ic_favorite_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_favorite_active")
    /// Image `ic_favorite_inactive`.
    static let ic_favorite_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_favorite_inactive")
    /// Image `ic_fbLogin`.
    static let ic_fbLogin = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_fbLogin")
    /// Image `ic_fb_login`.
    static let ic_fb_login = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_fb_login")
    /// Image `ic_images_small`.
    static let ic_images_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_images_small")
    /// Image `ic_likeBig`.
    static let ic_likeBig = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_likeBig")
    /// Image `ic_like_active`.
    static let ic_like_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_like_active")
    /// Image `ic_like_inactive`.
    static let ic_like_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_like_inactive")
    /// Image `ic_like`.
    static let ic_like = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_like")
    /// Image `ic_logo`.
    static let ic_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logo")
    /// Image `ic_noChat`.
    static let ic_noChat = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_noChat")
    /// Image `ic_noUserData`.
    static let ic_noUserData = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_noUserData")
    /// Image `ic_notificationBell`.
    static let ic_notificationBell = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_notificationBell")
    /// Image `ic_paint`.
    static let ic_paint = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_paint")
    /// Image `ic_play`.
    static let ic_play = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_play")
    /// Image `ic_plus_white`.
    static let ic_plus_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plus_white")
    /// Image `ic_profile_small`.
    static let ic_profile_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_profile_small")
    /// Image `ic_radioOff`.
    static let ic_radioOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_radioOff")
    /// Image `ic_radioOn`.
    static let ic_radioOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_radioOn")
    /// Image `ic_remove_item`.
    static let ic_remove_item = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_remove_item")
    /// Image `ic_sendBarButton`.
    static let ic_sendBarButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sendBarButton")
    /// Image `ic_sendPink`.
    static let ic_sendPink = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sendPink")
    /// Image `ic_send`.
    static let ic_send = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_send")
    /// Image `ic_settings`.
    static let ic_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_settings")
    /// Image `ic_share`.
    static let ic_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share")
    /// Image `ic_smiley`.
    static let ic_smiley = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_smiley")
    /// Image `ic_stop`.
    static let ic_stop = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_stop")
    /// Image `ic_tab_add`.
    static let ic_tab_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_add")
    /// Image `ic_tab_explore`.
    static let ic_tab_explore = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_explore")
    /// Image `ic_tab_heart`.
    static let ic_tab_heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_heart")
    /// Image `ic_tab_home`.
    static let ic_tab_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_home")
    /// Image `ic_tab_menu`.
    static let ic_tab_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_menu")
    /// Image `ic_tab_notification`.
    static let ic_tab_notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_notification")
    /// Image `ic_tab_profile`.
    static let ic_tab_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_profile")
    /// Image `ic_tab_user`.
    static let ic_tab_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_user")
    /// Image `ic_tooltip_gif`.
    static let ic_tooltip_gif = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tooltip_gif")
    /// Image `ic_tooltip_image`.
    static let ic_tooltip_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tooltip_image")
    /// Image `ic_tooltip_link`.
    static let ic_tooltip_link = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tooltip_link")
    /// Image `ic_tooltip_video`.
    static let ic_tooltip_video = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tooltip_video")
    /// Image `ic_type_gif`.
    static let ic_type_gif = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_type_gif")
    /// Image `ic_type_image`.
    static let ic_type_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_type_image")
    /// Image `ic_type_link`.
    static let ic_type_link = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_type_link")
    /// Image `ic_type_video`.
    static let ic_type_video = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_type_video")
    /// Image `ic_verified`.
    static let ic_verified = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_verified")
    /// Image `identification`.
    static let identification = Rswift.ImageResource(bundle: R.hostingBundle, name: "identification")
    /// Image `image-gallery`.
    static let imageGallery = Rswift.ImageResource(bundle: R.hostingBundle, name: "image-gallery")
    /// Image `image_2021_11_24T17_06_33_536Z`.
    static let image_2021_11_24T17_06_33_536Z = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_2021_11_24T17_06_33_536Z")
    /// Image `img_black_placeholder`.
    static let img_black_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_black_placeholder")
    /// Image `img_circular_placeholder`.
    static let img_circular_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_circular_placeholder")
    /// Image `img_intro`.
    static let img_intro = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_intro")
    /// Image `img_item_placeholder`.
    static let img_item_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_item_placeholder")
    /// Image `img_profile_placeholder`.
    static let img_profile_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_profile_placeholder")
    /// Image `img_search_big`.
    static let img_search_big = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_search_big")
    /// Image `img_splash`.
    static let img_splash = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_splash")
    /// Image `ionicons_2-0-1_android-more-vertical_24_0_000000_none`.
    static let ionicons_201_androidMoreVertical_24_0_000000_none = Rswift.ImageResource(bundle: R.hostingBundle, name: "ionicons_2-0-1_android-more-vertical_24_0_000000_none")
    /// Image `key`.
    static let key = Rswift.ImageResource(bundle: R.hostingBundle, name: "key")
    /// Image `left-arrows`.
    static let leftArrows = Rswift.ImageResource(bundle: R.hostingBundle, name: "left-arrows")
    /// Image `login`.
    static let login = Rswift.ImageResource(bundle: R.hostingBundle, name: "login")
    /// Image `logomain`.
    static let logomain = Rswift.ImageResource(bundle: R.hostingBundle, name: "logomain")
    /// Image `logouts`.
    static let logouts = Rswift.ImageResource(bundle: R.hostingBundle, name: "logouts")
    /// Image `moress`.
    static let moress = Rswift.ImageResource(bundle: R.hostingBundle, name: "moress")
    /// Image `mors`.
    static let mors = Rswift.ImageResource(bundle: R.hostingBundle, name: "mors")
    /// Image `notificationBell`.
    static let notificationBell = Rswift.ImageResource(bundle: R.hostingBundle, name: "notificationBell")
    /// Image `pause`.
    static let pause = Rswift.ImageResource(bundle: R.hostingBundle, name: "pause")
    /// Image `paypal`.
    static let paypal = Rswift.ImageResource(bundle: R.hostingBundle, name: "paypal")
    /// Image `photes`.
    static let photes = Rswift.ImageResource(bundle: R.hostingBundle, name: "photes")
    /// Image `pip`.
    static let pip = Rswift.ImageResource(bundle: R.hostingBundle, name: "pip")
    /// Image `play`.
    static let play = Rswift.ImageResource(bundle: R.hostingBundle, name: "play")
    /// Image `playes`.
    static let playes = Rswift.ImageResource(bundle: R.hostingBundle, name: "playes")
    /// Image `playhead`.
    static let playhead = Rswift.ImageResource(bundle: R.hostingBundle, name: "playhead")
    /// Image `pluss`.
    static let pluss = Rswift.ImageResource(bundle: R.hostingBundle, name: "pluss")
    /// Image `portfolio`.
    static let portfolio = Rswift.ImageResource(bundle: R.hostingBundle, name: "portfolio")
    /// Image `rewind`.
    static let rewind = Rswift.ImageResource(bundle: R.hostingBundle, name: "rewind")
    /// Image `right-chevron`.
    static let rightChevron = Rswift.ImageResource(bundle: R.hostingBundle, name: "right-chevron")
    /// Image `rights`.
    static let rights = Rswift.ImageResource(bundle: R.hostingBundle, name: "rights")
    /// Image `sadEmo`.
    static let sadEmo = Rswift.ImageResource(bundle: R.hostingBundle, name: "sadEmo")
    /// Image `settings`.
    static let settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings")
    /// Image `shop`.
    static let shop = Rswift.ImageResource(bundle: R.hostingBundle, name: "shop")
    /// Image `skipBackward`.
    static let skipBackward = Rswift.ImageResource(bundle: R.hostingBundle, name: "skipBackward")
    /// Image `skipForward`.
    static let skipForward = Rswift.ImageResource(bundle: R.hostingBundle, name: "skipForward")
    /// Image `talk`.
    static let talk = Rswift.ImageResource(bundle: R.hostingBundle, name: "talk")
    /// Image `talks`.
    static let talks = Rswift.ImageResource(bundle: R.hostingBundle, name: "talks")
    /// Image `watermark`.
    static let watermark = Rswift.ImageResource(bundle: R.hostingBundle, name: "watermark")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Add", bundle: ..., traitCollection: ...)`
    static func add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Generals", bundle: ..., traitCollection: ...)`
    static func generals(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.generals, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Grid", bundle: ..., traitCollection: ...)`
    static func grid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grid, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Heart", bundle: ..., traitCollection: ...)`
    static func heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Heart1", bundle: ..., traitCollection: ...)`
    static func heart1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Image", bundle: ..., traitCollection: ...)`
    static func image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Image-1", bundle: ..., traitCollection: ...)`
    static func image1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Lion", bundle: ..., traitCollection: ...)`
    static func lion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lion, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "List", bundle: ..., traitCollection: ...)`
    static func list(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.list, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Message", bundle: ..., traitCollection: ...)`
    static func message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MessageW", bundle: ..., traitCollection: ...)`
    static func messageW(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messageW, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Moon", bundle: ..., traitCollection: ...)`
    static func moon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NotiBell", bundle: ..., traitCollection: ...)`
    static func notiBell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notiBell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pixcel", bundle: ..., traitCollection: ...)`
    static func pixcel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pixcel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Profile", bundle: ..., traitCollection: ...)`
    static func profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Science", bundle: ..., traitCollection: ...)`
    static func science(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.science, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Star1", bundle: ..., traitCollection: ...)`
    static func star1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Star2", bundle: ..., traitCollection: ...)`
    static func star2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "abacus", bundle: ..., traitCollection: ...)`
    static func abacus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.abacus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backGr1", bundle: ..., traitCollection: ...)`
    static func backGr1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backGr1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backGr2", bundle: ..., traitCollection: ...)`
    static func backGr2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backGr2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backs", bundle: ..., traitCollection: ...)`
    static func backs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close1", bundle: ..., traitCollection: ...)`
    static func close1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close2", bundle: ..., traitCollection: ...)`
    static func close2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "comment", bundle: ..., traitCollection: ...)`
    static func comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.comment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "correct", bundle: ..., traitCollection: ...)`
    static func correct(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.correct, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "deletets", bundle: ..., traitCollection: ...)`
    static func deletets(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deletets, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dollar", bundle: ..., traitCollection: ...)`
    static func dollar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dollar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dots", bundle: ..., traitCollection: ...)`
    static func dots(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dots, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "downArrow", bundle: ..., traitCollection: ...)`
    static func downArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.downArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "downloadarraow", bundle: ..., traitCollection: ...)`
    static func downloadarraow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.downloadarraow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eyes", bundle: ..., traitCollection: ...)`
    static func eyes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyes, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eyess", bundle: ..., traitCollection: ...)`
    static func eyess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyess, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fastforward", bundle: ..., traitCollection: ...)`
    static func fastforward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fastforward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "films", bundle: ..., traitCollection: ...)`
    static func films(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.films, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "forbi", bundle: ..., traitCollection: ...)`
    static func forbi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forbi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "forbidden", bundle: ..., traitCollection: ...)`
    static func forbidden(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forbidden, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "friend", bundle: ..., traitCollection: ...)`
    static func friend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friend, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fullscreen", bundle: ..., traitCollection: ...)`
    static func fullscreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fullscreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fullscreen_disable", bundle: ..., traitCollection: ...)`
    static func fullscreen_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fullscreen_disable, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gallery", bundle: ..., traitCollection: ...)`
    static func gallery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gallery, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_aboutGender", bundle: ..., traitCollection: ...)`
    static func ic_aboutGender(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_aboutGender, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_aboutMail", bundle: ..., traitCollection: ...)`
    static func ic_aboutMail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_aboutMail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_about_Description", bundle: ..., traitCollection: ...)`
    static func ic_about_Description(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_about_Description, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_action_more", bundle: ..., traitCollection: ...)`
    static func ic_action_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add_comment", bundle: ..., traitCollection: ...)`
    static func ic_add_comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_comment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add_post", bundle: ..., traitCollection: ...)`
    static func ic_add_post(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_post, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add_user", bundle: ..., traitCollection: ...)`
    static func ic_add_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_alert", bundle: ..., traitCollection: ...)`
    static func ic_alert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_alert, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_back_black", bundle: ..., traitCollection: ...)`
    static func ic_back_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_blockuser", bundle: ..., traitCollection: ...)`
    static func ic_blockuser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_blockuser, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_capture_camera", bundle: ..., traitCollection: ...)`
    static func ic_capture_camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_capture_camera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_chat", bundle: ..., traitCollection: ...)`
    static func ic_chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_chat_bg", bundle: ..., traitCollection: ...)`
    static func ic_chat_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chat_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_close", bundle: ..., traitCollection: ...)`
    static func ic_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_contact_blue", bundle: ..., traitCollection: ...)`
    static func ic_contact_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_contact_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_favorite_active", bundle: ..., traitCollection: ...)`
    static func ic_favorite_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_favorite_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_favorite_inactive", bundle: ..., traitCollection: ...)`
    static func ic_favorite_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_favorite_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_fbLogin", bundle: ..., traitCollection: ...)`
    static func ic_fbLogin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_fbLogin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_fb_login", bundle: ..., traitCollection: ...)`
    static func ic_fb_login(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_fb_login, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_images_small", bundle: ..., traitCollection: ...)`
    static func ic_images_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_images_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_like", bundle: ..., traitCollection: ...)`
    static func ic_like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_like, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_likeBig", bundle: ..., traitCollection: ...)`
    static func ic_likeBig(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_likeBig, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_like_active", bundle: ..., traitCollection: ...)`
    static func ic_like_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_like_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_like_inactive", bundle: ..., traitCollection: ...)`
    static func ic_like_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_like_inactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_logo", bundle: ..., traitCollection: ...)`
    static func ic_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_noChat", bundle: ..., traitCollection: ...)`
    static func ic_noChat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_noChat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_noUserData", bundle: ..., traitCollection: ...)`
    static func ic_noUserData(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_noUserData, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_notificationBell", bundle: ..., traitCollection: ...)`
    static func ic_notificationBell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_notificationBell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_paint", bundle: ..., traitCollection: ...)`
    static func ic_paint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_paint, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_play", bundle: ..., traitCollection: ...)`
    static func ic_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plus_white", bundle: ..., traitCollection: ...)`
    static func ic_plus_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plus_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_profile_small", bundle: ..., traitCollection: ...)`
    static func ic_profile_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_profile_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_radioOff", bundle: ..., traitCollection: ...)`
    static func ic_radioOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_radioOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_radioOn", bundle: ..., traitCollection: ...)`
    static func ic_radioOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_radioOn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_remove_item", bundle: ..., traitCollection: ...)`
    static func ic_remove_item(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_remove_item, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_send", bundle: ..., traitCollection: ...)`
    static func ic_send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_send, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sendBarButton", bundle: ..., traitCollection: ...)`
    static func ic_sendBarButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sendBarButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sendPink", bundle: ..., traitCollection: ...)`
    static func ic_sendPink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sendPink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_settings", bundle: ..., traitCollection: ...)`
    static func ic_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_share", bundle: ..., traitCollection: ...)`
    static func ic_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_smiley", bundle: ..., traitCollection: ...)`
    static func ic_smiley(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_smiley, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_stop", bundle: ..., traitCollection: ...)`
    static func ic_stop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_stop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_add", bundle: ..., traitCollection: ...)`
    static func ic_tab_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_explore", bundle: ..., traitCollection: ...)`
    static func ic_tab_explore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_explore, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_heart", bundle: ..., traitCollection: ...)`
    static func ic_tab_heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_heart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_home", bundle: ..., traitCollection: ...)`
    static func ic_tab_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_menu", bundle: ..., traitCollection: ...)`
    static func ic_tab_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_menu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_notification", bundle: ..., traitCollection: ...)`
    static func ic_tab_notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_notification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_profile", bundle: ..., traitCollection: ...)`
    static func ic_tab_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_user", bundle: ..., traitCollection: ...)`
    static func ic_tab_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tooltip_gif", bundle: ..., traitCollection: ...)`
    static func ic_tooltip_gif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tooltip_gif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tooltip_image", bundle: ..., traitCollection: ...)`
    static func ic_tooltip_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tooltip_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tooltip_link", bundle: ..., traitCollection: ...)`
    static func ic_tooltip_link(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tooltip_link, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tooltip_video", bundle: ..., traitCollection: ...)`
    static func ic_tooltip_video(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tooltip_video, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_type_gif", bundle: ..., traitCollection: ...)`
    static func ic_type_gif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_type_gif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_type_image", bundle: ..., traitCollection: ...)`
    static func ic_type_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_type_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_type_link", bundle: ..., traitCollection: ...)`
    static func ic_type_link(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_type_link, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_type_video", bundle: ..., traitCollection: ...)`
    static func ic_type_video(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_type_video, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_verified", bundle: ..., traitCollection: ...)`
    static func ic_verified(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_verified, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "identification", bundle: ..., traitCollection: ...)`
    static func identification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.identification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image-gallery", bundle: ..., traitCollection: ...)`
    static func imageGallery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageGallery, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image_2021_11_24T17_06_33_536Z", bundle: ..., traitCollection: ...)`
    static func image_2021_11_24T17_06_33_536Z(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_2021_11_24T17_06_33_536Z, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_black_placeholder", bundle: ..., traitCollection: ...)`
    static func img_black_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_black_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_circular_placeholder", bundle: ..., traitCollection: ...)`
    static func img_circular_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_circular_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_intro", bundle: ..., traitCollection: ...)`
    static func img_intro(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_intro, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_item_placeholder", bundle: ..., traitCollection: ...)`
    static func img_item_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_item_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_profile_placeholder", bundle: ..., traitCollection: ...)`
    static func img_profile_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_profile_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_search_big", bundle: ..., traitCollection: ...)`
    static func img_search_big(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_search_big, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_splash", bundle: ..., traitCollection: ...)`
    static func img_splash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_splash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ionicons_2-0-1_android-more-vertical_24_0_000000_none", bundle: ..., traitCollection: ...)`
    static func ionicons_201_androidMoreVertical_24_0_000000_none(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ionicons_201_androidMoreVertical_24_0_000000_none, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "key", bundle: ..., traitCollection: ...)`
    static func key(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.key, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "left-arrows", bundle: ..., traitCollection: ...)`
    static func leftArrows(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.leftArrows, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login", bundle: ..., traitCollection: ...)`
    static func login(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logomain", bundle: ..., traitCollection: ...)`
    static func logomain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logomain, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logouts", bundle: ..., traitCollection: ...)`
    static func logouts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logouts, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "moress", bundle: ..., traitCollection: ...)`
    static func moress(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moress, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mors", bundle: ..., traitCollection: ...)`
    static func mors(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mors, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notificationBell", bundle: ..., traitCollection: ...)`
    static func notificationBell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notificationBell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pause", bundle: ..., traitCollection: ...)`
    static func pause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pause, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paypal", bundle: ..., traitCollection: ...)`
    static func paypal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paypal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "photes", bundle: ..., traitCollection: ...)`
    static func photes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photes, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pip", bundle: ..., traitCollection: ...)`
    static func pip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pip, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "play", bundle: ..., traitCollection: ...)`
    static func play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "playes", bundle: ..., traitCollection: ...)`
    static func playes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.playes, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "playhead", bundle: ..., traitCollection: ...)`
    static func playhead(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.playhead, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pluss", bundle: ..., traitCollection: ...)`
    static func pluss(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pluss, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "portfolio", bundle: ..., traitCollection: ...)`
    static func portfolio(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.portfolio, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rewind", bundle: ..., traitCollection: ...)`
    static func rewind(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rewind, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "right-chevron", bundle: ..., traitCollection: ...)`
    static func rightChevron(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightChevron, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rights", bundle: ..., traitCollection: ...)`
    static func rights(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rights, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sadEmo", bundle: ..., traitCollection: ...)`
    static func sadEmo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sadEmo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings", bundle: ..., traitCollection: ...)`
    static func settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shop", bundle: ..., traitCollection: ...)`
    static func shop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "skipBackward", bundle: ..., traitCollection: ...)`
    static func skipBackward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.skipBackward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "skipForward", bundle: ..., traitCollection: ...)`
    static func skipForward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.skipForward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "talk", bundle: ..., traitCollection: ...)`
    static func talk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.talk, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "talks", bundle: ..., traitCollection: ...)`
    static func talks(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.talks, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "watermark", bundle: ..., traitCollection: ...)`
    static func watermark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.watermark, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 74 nibs.
  struct nib {
    /// Nib `ActivitiesTableItem`.
    static let activitiesTableItem = _R.nib._ActivitiesTableItem()
    /// Nib `AllStoreCells`.
    static let allStoreCells = _R.nib._AllStoreCells()
    /// Nib `ChatReceiverImage-TableCell`.
    static let chatReceiverImageTableCell = _R.nib._ChatReceiverImageTableCell()
    /// Nib `ChatSenderImage-TableCell`.
    static let chatSenderImageTableCell = _R.nib._ChatSenderImageTableCell()
    /// Nib `ContactsTableCell`.
    static let contactsTableCell = _R.nib._ContactsTableCell()
    /// Nib `CoverView`.
    static let coverView = _R.nib._CoverView()
    /// Nib `ExploreCollectionCell`.
    static let exploreCollectionCell = _R.nib._ExploreCollectionCell()
    /// Nib `ExploreTableViewCell`.
    static let exploreTableViewCell = _R.nib._ExploreTableViewCell()
    /// Nib `FeaturePostItem`.
    static let featurePostItem = _R.nib._FeaturePostItem()
    /// Nib `FeaturedPostCell`.
    static let featuredPostCell = _R.nib._FeaturedPostCell()
    /// Nib `FundingCollectionItem`.
    static let fundingCollectionItem = _R.nib._FundingCollectionItem()
    /// Nib `FundingTableItem`.
    static let fundingTableItem = _R.nib._FundingTableItem()
    /// Nib `IconWithCellItem`.
    static let iconWithCellItem = _R.nib._IconWithCellItem()
    /// Nib `IntroItem`.
    static let introItem = _R.nib._IntroItem()
    /// Nib `ManageSessionCell`.
    static let manageSessionCell = _R.nib._ManageSessionCell()
    /// Nib `NightModeTableItem`.
    static let nightModeTableItem = _R.nib._NightModeTableItem()
    /// Nib `NoPostCell`.
    static let noPostCell = _R.nib._NoPostCell()
    /// Nib `NoStoreCell`.
    static let noStoreCell = _R.nib._NoStoreCell()
    /// Nib `PPAddPostCaptionTableViewCell`.
    static let ppAddPostCaptionTableViewCell = _R.nib._PPAddPostCaptionTableViewCell()
    /// Nib `PPBlockedUserItemTableViewCell`.
    static let ppBlockedUserItemTableViewCell = _R.nib._PPBlockedUserItemTableViewCell()
    /// Nib `PPChatUserItemTableViewCell`.
    static let ppChatUserItemTableViewCell = _R.nib._PPChatUserItemTableViewCell()
    /// Nib `PPCollectionViewItemTableViewCell`.
    static let ppCollectionViewItemTableViewCell = _R.nib._PPCollectionViewItemTableViewCell()
    /// Nib `PPColorItemCollectionViewCell`.
    static let ppColorItemCollectionViewCell = _R.nib._PPColorItemCollectionViewCell()
    /// Nib `PPCommentItemTableViewCell`.
    static let ppCommentItemTableViewCell = _R.nib._PPCommentItemTableViewCell()
    /// Nib `PPFontItemCollectionViewCell`.
    static let ppFontItemCollectionViewCell = _R.nib._PPFontItemCollectionViewCell()
    /// Nib `PPGIFItemTableViewCell`.
    static let ppgifItemTableViewCell = _R.nib._PPGIFItemTableViewCell()
    /// Nib `PPHashTagItemTableViewCell`.
    static let ppHashTagItemTableViewCell = _R.nib._PPHashTagItemTableViewCell()
    /// Nib `PPHorizontalCollectionviewItemTableViewCell`.
    static let ppHorizontalCollectionviewItemTableViewCell = _R.nib._PPHorizontalCollectionviewItemTableViewCell()
    /// Nib `PPImageItemTableViewCell`.
    static let ppImageItemTableViewCell = _R.nib._PPImageItemTableViewCell()
    /// Nib `PPInputTextFieldItemTableViewCell`.
    static let ppInputTextFieldItemTableViewCell = _R.nib._PPInputTextFieldItemTableViewCell()
    /// Nib `PPMosaicGIFItemCollectionViewCell`.
    static let ppMosaicGIFItemCollectionViewCell = _R.nib._PPMosaicGIFItemCollectionViewCell()
    /// Nib `PPMosaicImageItemCollectionViewCell`.
    static let ppMosaicImageItemCollectionViewCell = _R.nib._PPMosaicImageItemCollectionViewCell()
    /// Nib `PPMosaicVideoItemCollectionViewCell`.
    static let ppMosaicVideoItemCollectionViewCell = _R.nib._PPMosaicVideoItemCollectionViewCell()
    /// Nib `PPMultiImageItemTableViewCell`.
    static let ppMultiImageItemTableViewCell = _R.nib._PPMultiImageItemTableViewCell()
    /// Nib `PPMyProfileCaptureProfileTableViewCell`.
    static let ppMyProfileCaptureProfileTableViewCell = _R.nib._PPMyProfileCaptureProfileTableViewCell()
    /// Nib `PPMyProfileITemTableViewCell`.
    static let ppMyProfileITemTableViewCell = _R.nib._PPMyProfileITemTableViewCell()
    /// Nib `PPNoResultTableViewCell`.
    static let ppNoResultTableViewCell = _R.nib._PPNoResultTableViewCell()
    /// Nib `PPNormalVerticalCollectionViewItemTableViewCell`.
    static let ppNormalVerticalCollectionViewItemTableViewCell = _R.nib._PPNormalVerticalCollectionViewItemTableViewCell()
    /// Nib `PPNotificationItemTableViewCell`.
    static let ppNotificationItemTableViewCell = _R.nib._PPNotificationItemTableViewCell()
    /// Nib `PPPostItemCollectionViewCell`.
    static let ppPostItemCollectionViewCell = _R.nib._PPPostItemCollectionViewCell()
    /// Nib `PPProfileCheckBoxItemTableViewCell`.
    static let ppProfileCheckBoxItemTableViewCell = _R.nib._PPProfileCheckBoxItemTableViewCell()
    /// Nib `PPProfileItemTableViewCell`.
    static let ppProfileItemTableViewCell = _R.nib._PPProfileItemTableViewCell()
    /// Nib `PPReceiverChatItemTableViewCell`.
    static let ppReceiverChatItemTableViewCell = _R.nib._PPReceiverChatItemTableViewCell()
    /// Nib `PPSelectPostItemTableViewCell`.
    static let ppSelectPostItemTableViewCell = _R.nib._PPSelectPostItemTableViewCell()
    /// Nib `PPSenderChatItemTableViewCell`.
    static let ppSenderChatItemTableViewCell = _R.nib._PPSenderChatItemTableViewCell()
    /// Nib `PPSettingsItemTableViewCell`.
    static let ppSettingsItemTableViewCell = _R.nib._PPSettingsItemTableViewCell()
    /// Nib `PPStoryItemCollectionViewCell`.
    static let ppStoryItemCollectionViewCell = _R.nib._PPStoryItemCollectionViewCell()
    /// Nib `PPSubmitButtonItemTableViewCell`.
    static let ppSubmitButtonItemTableViewCell = _R.nib._PPSubmitButtonItemTableViewCell()
    /// Nib `PPUserProfileThumbnailItemCollectionViewCell`.
    static let ppUserProfileThumbnailItemCollectionViewCell = _R.nib._PPUserProfileThumbnailItemCollectionViewCell()
    /// Nib `PPUserSuggestionCollectionViewCell`.
    static let ppUserSuggestionCollectionViewCell = _R.nib._PPUserSuggestionCollectionViewCell()
    /// Nib `PPVideoItemTableViewCell`.
    static let ppVideoItemTableViewCell = _R.nib._PPVideoItemTableViewCell()
    /// Nib `PPYourStoryItemCollectionViewCell`.
    static let ppYourStoryItemCollectionViewCell = _R.nib._PPYourStoryItemCollectionViewCell()
    /// Nib `PPYoutubeItemTableViewCell`.
    static let ppYoutubeItemTableViewCell = _R.nib._PPYoutubeItemTableViewCell()
    /// Nib `PostWithFourImageCollectionCell`.
    static let postWithFourImageCollectionCell = _R.nib._PostWithFourImageCollectionCell()
    /// Nib `PostWithFourImage`.
    static let postWithFourImage = _R.nib._PostWithFourImage()
    /// Nib `PostWithImageCell`.
    static let postWithImageCell = _R.nib._PostWithImageCell()
    /// Nib `PostWithOneImageCell`.
    static let postWithOneImageCell = _R.nib._PostWithOneImageCell()
    /// Nib `PostWithOneImageCollectionCell`.
    static let postWithOneImageCollectionCell = _R.nib._PostWithOneImageCollectionCell()
    /// Nib `PostWithThreeImageCollectionCell`.
    static let postWithThreeImageCollectionCell = _R.nib._PostWithThreeImageCollectionCell()
    /// Nib `PostWithThreeImage`.
    static let postWithThreeImage = _R.nib._PostWithThreeImage()
    /// Nib `PostWithTwoImageCollectionCell`.
    static let postWithTwoImageCollectionCell = _R.nib._PostWithTwoImageCollectionCell()
    /// Nib `PostWithTwoImage`.
    static let postWithTwoImage = _R.nib._PostWithTwoImage()
    /// Nib `SectionThreeShowFundingDetailsTableItem`.
    static let sectionThreeShowFundingDetailsTableItem = _R.nib._SectionThreeShowFundingDetailsTableItem()
    /// Nib `SectionTwoTableItem`.
    static let sectionTwoTableItem = _R.nib._SectionTwoTableItem()
    /// Nib `ShowDetailsSectionOneTableItem`.
    static let showDetailsSectionOneTableItem = _R.nib._ShowDetailsSectionOneTableItem()
    /// Nib `ShowFundingTableItem`.
    static let showFundingTableItem = _R.nib._ShowFundingTableItem()
    /// Nib `StoreCollectionCell`.
    static let storeCollectionCell = _R.nib._StoreCollectionCell()
    /// Nib `StoreTableViewCell`.
    static let storeTableViewCell = _R.nib._StoreTableViewCell()
    /// Nib `UserDetailCell`.
    static let userDetailCell = _R.nib._UserDetailCell()
    /// Nib `UserImgesCell`.
    static let userImgesCell = _R.nib._UserImgesCell()
    /// Nib `UserSuggestionCollectionCell`.
    static let userSuggestionCollectionCell = _R.nib._UserSuggestionCollectionCell()
    /// Nib `VerticalCollectionviewItemTableViewCell`.
    static let verticalCollectionviewItemTableViewCell = _R.nib._VerticalCollectionviewItemTableViewCell()
    /// Nib `VideoCollectionCell`.
    static let videoCollectionCell = _R.nib._VideoCollectionCell()
    /// Nib `YoutubeCollectionCell`.
    static let youtubeCollectionCell = _R.nib._YoutubeCollectionCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ActivitiesTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.activitiesTableItem) instead")
    static func activitiesTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.activitiesTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AllStoreCells", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.allStoreCells) instead")
    static func allStoreCells(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.allStoreCells)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ChatReceiverImage-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chatReceiverImageTableCell) instead")
    static func chatReceiverImageTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatReceiverImageTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ChatSenderImage-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chatSenderImageTableCell) instead")
    static func chatSenderImageTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatSenderImageTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ContactsTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.contactsTableCell) instead")
    static func contactsTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.contactsTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CoverView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.coverView) instead")
    static func coverView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.coverView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ExploreCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.exploreCollectionCell) instead")
    static func exploreCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.exploreCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ExploreTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.exploreTableViewCell) instead")
    static func exploreTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.exploreTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FeaturePostItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.featurePostItem) instead")
    static func featurePostItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.featurePostItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FeaturedPostCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.featuredPostCell) instead")
    static func featuredPostCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.featuredPostCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FundingCollectionItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.fundingCollectionItem) instead")
    static func fundingCollectionItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fundingCollectionItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FundingTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.fundingTableItem) instead")
    static func fundingTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fundingTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IconWithCellItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.iconWithCellItem) instead")
    static func iconWithCellItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.iconWithCellItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IntroItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.introItem) instead")
    static func introItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.introItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ManageSessionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.manageSessionCell) instead")
    static func manageSessionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.manageSessionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NightModeTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.nightModeTableItem) instead")
    static func nightModeTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.nightModeTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NoPostCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.noPostCell) instead")
    static func noPostCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.noPostCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NoStoreCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.noStoreCell) instead")
    static func noStoreCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.noStoreCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPAddPostCaptionTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppAddPostCaptionTableViewCell) instead")
    static func ppAddPostCaptionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppAddPostCaptionTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPBlockedUserItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppBlockedUserItemTableViewCell) instead")
    static func ppBlockedUserItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppBlockedUserItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPChatUserItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppChatUserItemTableViewCell) instead")
    static func ppChatUserItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppChatUserItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPCollectionViewItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppCollectionViewItemTableViewCell) instead")
    static func ppCollectionViewItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppCollectionViewItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPColorItemCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppColorItemCollectionViewCell) instead")
    static func ppColorItemCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppColorItemCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPCommentItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppCommentItemTableViewCell) instead")
    static func ppCommentItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppCommentItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPFontItemCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppFontItemCollectionViewCell) instead")
    static func ppFontItemCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppFontItemCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPGIFItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppgifItemTableViewCell) instead")
    static func ppgifItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppgifItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPHashTagItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppHashTagItemTableViewCell) instead")
    static func ppHashTagItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppHashTagItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPHorizontalCollectionviewItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppHorizontalCollectionviewItemTableViewCell) instead")
    static func ppHorizontalCollectionviewItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppHorizontalCollectionviewItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPImageItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppImageItemTableViewCell) instead")
    static func ppImageItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppImageItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPInputTextFieldItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppInputTextFieldItemTableViewCell) instead")
    static func ppInputTextFieldItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppInputTextFieldItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPMosaicGIFItemCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppMosaicGIFItemCollectionViewCell) instead")
    static func ppMosaicGIFItemCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppMosaicGIFItemCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPMosaicImageItemCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppMosaicImageItemCollectionViewCell) instead")
    static func ppMosaicImageItemCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppMosaicImageItemCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPMosaicVideoItemCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppMosaicVideoItemCollectionViewCell) instead")
    static func ppMosaicVideoItemCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppMosaicVideoItemCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPMultiImageItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppMultiImageItemTableViewCell) instead")
    static func ppMultiImageItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppMultiImageItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPMyProfileCaptureProfileTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppMyProfileCaptureProfileTableViewCell) instead")
    static func ppMyProfileCaptureProfileTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppMyProfileCaptureProfileTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPMyProfileITemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppMyProfileITemTableViewCell) instead")
    static func ppMyProfileITemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppMyProfileITemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPNoResultTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppNoResultTableViewCell) instead")
    static func ppNoResultTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppNoResultTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPNormalVerticalCollectionViewItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppNormalVerticalCollectionViewItemTableViewCell) instead")
    static func ppNormalVerticalCollectionViewItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppNormalVerticalCollectionViewItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPNotificationItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppNotificationItemTableViewCell) instead")
    static func ppNotificationItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppNotificationItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPPostItemCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppPostItemCollectionViewCell) instead")
    static func ppPostItemCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppPostItemCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPProfileCheckBoxItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppProfileCheckBoxItemTableViewCell) instead")
    static func ppProfileCheckBoxItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppProfileCheckBoxItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPProfileItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppProfileItemTableViewCell) instead")
    static func ppProfileItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppProfileItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPReceiverChatItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppReceiverChatItemTableViewCell) instead")
    static func ppReceiverChatItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppReceiverChatItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPSelectPostItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppSelectPostItemTableViewCell) instead")
    static func ppSelectPostItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppSelectPostItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPSenderChatItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppSenderChatItemTableViewCell) instead")
    static func ppSenderChatItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppSenderChatItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPSettingsItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppSettingsItemTableViewCell) instead")
    static func ppSettingsItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppSettingsItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPStoryItemCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppStoryItemCollectionViewCell) instead")
    static func ppStoryItemCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppStoryItemCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPSubmitButtonItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppSubmitButtonItemTableViewCell) instead")
    static func ppSubmitButtonItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppSubmitButtonItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPUserProfileThumbnailItemCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppUserProfileThumbnailItemCollectionViewCell) instead")
    static func ppUserProfileThumbnailItemCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppUserProfileThumbnailItemCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPUserSuggestionCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppUserSuggestionCollectionViewCell) instead")
    static func ppUserSuggestionCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppUserSuggestionCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPVideoItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppVideoItemTableViewCell) instead")
    static func ppVideoItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppVideoItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPYourStoryItemCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppYourStoryItemCollectionViewCell) instead")
    static func ppYourStoryItemCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppYourStoryItemCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PPYoutubeItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ppYoutubeItemTableViewCell) instead")
    static func ppYoutubeItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ppYoutubeItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PostWithFourImage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.postWithFourImage) instead")
    static func postWithFourImage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postWithFourImage)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PostWithFourImageCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.postWithFourImageCollectionCell) instead")
    static func postWithFourImageCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postWithFourImageCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PostWithImageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.postWithImageCell) instead")
    static func postWithImageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postWithImageCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PostWithOneImageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.postWithOneImageCell) instead")
    static func postWithOneImageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postWithOneImageCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PostWithOneImageCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.postWithOneImageCollectionCell) instead")
    static func postWithOneImageCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postWithOneImageCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PostWithThreeImage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.postWithThreeImage) instead")
    static func postWithThreeImage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postWithThreeImage)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PostWithThreeImageCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.postWithThreeImageCollectionCell) instead")
    static func postWithThreeImageCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postWithThreeImageCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PostWithTwoImage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.postWithTwoImage) instead")
    static func postWithTwoImage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postWithTwoImage)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PostWithTwoImageCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.postWithTwoImageCollectionCell) instead")
    static func postWithTwoImageCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postWithTwoImageCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SectionThreeShowFundingDetailsTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sectionThreeShowFundingDetailsTableItem) instead")
    static func sectionThreeShowFundingDetailsTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sectionThreeShowFundingDetailsTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SectionTwoTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sectionTwoTableItem) instead")
    static func sectionTwoTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sectionTwoTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ShowDetailsSectionOneTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.showDetailsSectionOneTableItem) instead")
    static func showDetailsSectionOneTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.showDetailsSectionOneTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ShowFundingTableItem", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.showFundingTableItem) instead")
    static func showFundingTableItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.showFundingTableItem)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "StoreCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.storeCollectionCell) instead")
    static func storeCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.storeCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "StoreTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.storeTableViewCell) instead")
    static func storeTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.storeTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserDetailCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userDetailCell) instead")
    static func userDetailCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userDetailCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserImgesCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userImgesCell) instead")
    static func userImgesCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userImgesCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserSuggestionCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userSuggestionCollectionCell) instead")
    static func userSuggestionCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userSuggestionCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VerticalCollectionviewItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.verticalCollectionviewItemTableViewCell) instead")
    static func verticalCollectionviewItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.verticalCollectionviewItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VideoCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.videoCollectionCell) instead")
    static func videoCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "YoutubeCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.youtubeCollectionCell) instead")
    static func youtubeCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.youtubeCollectionCell)
    }
    #endif

    static func activitiesTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ActivitiesTableItem? {
      return R.nib.activitiesTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ActivitiesTableItem
    }

    static func allStoreCells(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AllStoreCells? {
      return R.nib.allStoreCells.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AllStoreCells
    }

    static func chatReceiverImageTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatReceiverImage_TableCell? {
      return R.nib.chatReceiverImageTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatReceiverImage_TableCell
    }

    static func chatSenderImageTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatSenderImage_TableCell? {
      return R.nib.chatSenderImageTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatSenderImage_TableCell
    }

    static func contactsTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ContactsTableCell? {
      return R.nib.contactsTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContactsTableCell
    }

    static func coverView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CoverView? {
      return R.nib.coverView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CoverView
    }

    static func exploreCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExploreCollectionCell? {
      return R.nib.exploreCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExploreCollectionCell
    }

    static func exploreTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExploreTableViewCell? {
      return R.nib.exploreTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExploreTableViewCell
    }

    static func featurePostItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FeaturePostItem? {
      return R.nib.featurePostItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FeaturePostItem
    }

    static func featuredPostCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FeaturedPostCell? {
      return R.nib.featuredPostCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FeaturedPostCell
    }

    static func fundingCollectionItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FundingCollectionItem? {
      return R.nib.fundingCollectionItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FundingCollectionItem
    }

    static func fundingTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FundingTableItem? {
      return R.nib.fundingTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FundingTableItem
    }

    static func iconWithCellItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IconWithCellItem? {
      return R.nib.iconWithCellItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IconWithCellItem
    }

    static func introItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IntroItem? {
      return R.nib.introItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IntroItem
    }

    static func manageSessionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ManageSessionCell? {
      return R.nib.manageSessionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ManageSessionCell
    }

    static func nightModeTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NightModeTableItem? {
      return R.nib.nightModeTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NightModeTableItem
    }

    static func noPostCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NoPostCell? {
      return R.nib.noPostCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NoPostCell
    }

    static func noStoreCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NoStoreCell? {
      return R.nib.noStoreCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NoStoreCell
    }

    static func postWithFourImage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostWithFourImage? {
      return R.nib.postWithFourImage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostWithFourImage
    }

    static func postWithFourImageCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostWithFourImageCollectionCell? {
      return R.nib.postWithFourImageCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostWithFourImageCollectionCell
    }

    static func postWithImageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostWithImageCell? {
      return R.nib.postWithImageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostWithImageCell
    }

    static func postWithOneImageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostWithOneImageCell? {
      return R.nib.postWithOneImageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostWithOneImageCell
    }

    static func postWithOneImageCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostWithOneImageCollectionCell? {
      return R.nib.postWithOneImageCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostWithOneImageCollectionCell
    }

    static func postWithThreeImage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostWithThreeImage? {
      return R.nib.postWithThreeImage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostWithThreeImage
    }

    static func postWithThreeImageCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostWithThreeImageCollectionCell? {
      return R.nib.postWithThreeImageCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostWithThreeImageCollectionCell
    }

    static func postWithTwoImage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostWithTwoImage? {
      return R.nib.postWithTwoImage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostWithTwoImage
    }

    static func postWithTwoImageCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostWithTwoImageCollectionCell? {
      return R.nib.postWithTwoImageCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostWithTwoImageCollectionCell
    }

    static func ppAddPostCaptionTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPAddPostCaptionTableViewCell? {
      return R.nib.ppAddPostCaptionTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPAddPostCaptionTableViewCell
    }

    static func ppBlockedUserItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPBlockedUserItemTableViewCell? {
      return R.nib.ppBlockedUserItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPBlockedUserItemTableViewCell
    }

    static func ppChatUserItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPChatUserItemTableViewCell? {
      return R.nib.ppChatUserItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPChatUserItemTableViewCell
    }

    static func ppCollectionViewItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPCollectionViewItemTableViewCell? {
      return R.nib.ppCollectionViewItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPCollectionViewItemTableViewCell
    }

    static func ppColorItemCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPColorItemCollectionViewCell? {
      return R.nib.ppColorItemCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPColorItemCollectionViewCell
    }

    static func ppCommentItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPCommentItemTableViewCell? {
      return R.nib.ppCommentItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPCommentItemTableViewCell
    }

    static func ppFontItemCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPFontItemCollectionViewCell? {
      return R.nib.ppFontItemCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPFontItemCollectionViewCell
    }

    static func ppHashTagItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPHashTagItemTableViewCell? {
      return R.nib.ppHashTagItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPHashTagItemTableViewCell
    }

    static func ppHorizontalCollectionviewItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPHorizontalCollectionviewItemTableViewCell? {
      return R.nib.ppHorizontalCollectionviewItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPHorizontalCollectionviewItemTableViewCell
    }

    static func ppImageItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPImageItemTableViewCell? {
      return R.nib.ppImageItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPImageItemTableViewCell
    }

    static func ppInputTextFieldItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPInputTextFieldItemTableViewCell? {
      return R.nib.ppInputTextFieldItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPInputTextFieldItemTableViewCell
    }

    static func ppMosaicGIFItemCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPMosaicGIFItemCollectionViewCell? {
      return R.nib.ppMosaicGIFItemCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPMosaicGIFItemCollectionViewCell
    }

    static func ppMosaicImageItemCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPMosaicImageItemCollectionViewCell? {
      return R.nib.ppMosaicImageItemCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPMosaicImageItemCollectionViewCell
    }

    static func ppMosaicVideoItemCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPMosaicVideoItemCollectionViewCell? {
      return R.nib.ppMosaicVideoItemCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPMosaicVideoItemCollectionViewCell
    }

    static func ppMultiImageItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPMultiImageItemTableViewCell? {
      return R.nib.ppMultiImageItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPMultiImageItemTableViewCell
    }

    static func ppMyProfileCaptureProfileTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPMyProfileCaptureProfileTableViewCell? {
      return R.nib.ppMyProfileCaptureProfileTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPMyProfileCaptureProfileTableViewCell
    }

    static func ppMyProfileITemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPMyProfileITemTableViewCell? {
      return R.nib.ppMyProfileITemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPMyProfileITemTableViewCell
    }

    static func ppNoResultTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPNoResultTableViewCell? {
      return R.nib.ppNoResultTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPNoResultTableViewCell
    }

    static func ppNormalVerticalCollectionViewItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPNormalVerticalCollectionViewItemTableViewCell? {
      return R.nib.ppNormalVerticalCollectionViewItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPNormalVerticalCollectionViewItemTableViewCell
    }

    static func ppNotificationItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPNotificationItemTableViewCell? {
      return R.nib.ppNotificationItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPNotificationItemTableViewCell
    }

    static func ppPostItemCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPPostItemCollectionViewCell? {
      return R.nib.ppPostItemCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPPostItemCollectionViewCell
    }

    static func ppProfileCheckBoxItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPProfileCheckBoxItemTableViewCell? {
      return R.nib.ppProfileCheckBoxItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPProfileCheckBoxItemTableViewCell
    }

    static func ppProfileItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPProfileItemTableViewCell? {
      return R.nib.ppProfileItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPProfileItemTableViewCell
    }

    static func ppReceiverChatItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPReceiverChatItemTableViewCell? {
      return R.nib.ppReceiverChatItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPReceiverChatItemTableViewCell
    }

    static func ppSelectPostItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPSelectPostItemTableViewCell? {
      return R.nib.ppSelectPostItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPSelectPostItemTableViewCell
    }

    static func ppSenderChatItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPSenderChatItemTableViewCell? {
      return R.nib.ppSenderChatItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPSenderChatItemTableViewCell
    }

    static func ppSettingsItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPSettingsItemTableViewCell? {
      return R.nib.ppSettingsItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPSettingsItemTableViewCell
    }

    static func ppStoryItemCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPStoryItemCollectionViewCell? {
      return R.nib.ppStoryItemCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPStoryItemCollectionViewCell
    }

    static func ppSubmitButtonItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPSubmitButtonItemTableViewCell? {
      return R.nib.ppSubmitButtonItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPSubmitButtonItemTableViewCell
    }

    static func ppUserProfileThumbnailItemCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPUserProfileThumbnailItemCollectionViewCell? {
      return R.nib.ppUserProfileThumbnailItemCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPUserProfileThumbnailItemCollectionViewCell
    }

    static func ppUserSuggestionCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPUserSuggestionCollectionViewCell? {
      return R.nib.ppUserSuggestionCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPUserSuggestionCollectionViewCell
    }

    static func ppVideoItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPVideoItemTableViewCell? {
      return R.nib.ppVideoItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPVideoItemTableViewCell
    }

    static func ppYourStoryItemCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPYourStoryItemCollectionViewCell? {
      return R.nib.ppYourStoryItemCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPYourStoryItemCollectionViewCell
    }

    static func ppYoutubeItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPYoutubeItemTableViewCell? {
      return R.nib.ppYoutubeItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPYoutubeItemTableViewCell
    }

    static func ppgifItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPGIFItemTableViewCell? {
      return R.nib.ppgifItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPGIFItemTableViewCell
    }

    static func sectionThreeShowFundingDetailsTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SectionThreeShowFundingDetailsTableItem? {
      return R.nib.sectionThreeShowFundingDetailsTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SectionThreeShowFundingDetailsTableItem
    }

    static func sectionTwoTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SectionTwoTableItem? {
      return R.nib.sectionTwoTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SectionTwoTableItem
    }

    static func showDetailsSectionOneTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ShowDetailsSectionOneTableItem? {
      return R.nib.showDetailsSectionOneTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShowDetailsSectionOneTableItem
    }

    static func showFundingTableItem(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ShowFundingTableItem? {
      return R.nib.showFundingTableItem.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShowFundingTableItem
    }

    static func storeCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StoreCollectionCell? {
      return R.nib.storeCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StoreCollectionCell
    }

    static func storeTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StoreTableViewCell? {
      return R.nib.storeTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StoreTableViewCell
    }

    static func userDetailCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserDetailCell? {
      return R.nib.userDetailCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserDetailCell
    }

    static func userImgesCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserImgesCell? {
      return R.nib.userImgesCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserImgesCell
    }

    static func userSuggestionCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserSuggestionCollectionCell? {
      return R.nib.userSuggestionCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserSuggestionCollectionCell
    }

    static func verticalCollectionviewItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VerticalCollectionviewItemTableViewCell? {
      return R.nib.verticalCollectionviewItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VerticalCollectionviewItemTableViewCell
    }

    static func videoCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VideoCollectionCell? {
      return R.nib.videoCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VideoCollectionCell
    }

    static func youtubeCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> YoutubeCollectionCell? {
      return R.nib.youtubeCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? YoutubeCollectionCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 69 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ActivitiesTableItem`.
    static let activitiesTableItem: Rswift.ReuseIdentifier<ActivitiesTableItem> = Rswift.ReuseIdentifier(identifier: "ActivitiesTableItem")
    /// Reuse identifier `AllStorecells`.
    static let allStorecells: Rswift.ReuseIdentifier<AllStoreCells> = Rswift.ReuseIdentifier(identifier: "AllStorecells")
    /// Reuse identifier `ChatReceiverImage_TableCell`.
    static let chatReceiverImage_TableCell: Rswift.ReuseIdentifier<ChatReceiverImage_TableCell> = Rswift.ReuseIdentifier(identifier: "ChatReceiverImage_TableCell")
    /// Reuse identifier `ChatSenderImage_TableCell`.
    static let chatSenderImage_TableCell: Rswift.ReuseIdentifier<ChatSenderImage_TableCell> = Rswift.ReuseIdentifier(identifier: "ChatSenderImage_TableCell")
    /// Reuse identifier `ContactsTableCell`.
    static let contactsTableCell: Rswift.ReuseIdentifier<ContactsTableCell> = Rswift.ReuseIdentifier(identifier: "ContactsTableCell")
    /// Reuse identifier `ExploreCell`.
    static let exploreCell: Rswift.ReuseIdentifier<ExploreCollectionCell> = Rswift.ReuseIdentifier(identifier: "ExploreCell")
    /// Reuse identifier `ExploreTableCell`.
    static let exploreTableCell: Rswift.ReuseIdentifier<ExploreTableViewCell> = Rswift.ReuseIdentifier(identifier: "ExploreTableCell")
    /// Reuse identifier `FeaturePostTableCell`.
    static let featurePostTableCell: Rswift.ReuseIdentifier<FeaturePostItem> = Rswift.ReuseIdentifier(identifier: "FeaturePostTableCell")
    /// Reuse identifier `FeaturedPostcell`.
    static let featuredPostcell: Rswift.ReuseIdentifier<FeaturedPostCell> = Rswift.ReuseIdentifier(identifier: "FeaturedPostcell")
    /// Reuse identifier `FourImageCell`.
    static let fourImageCell: Rswift.ReuseIdentifier<PostWithFourImage> = Rswift.ReuseIdentifier(identifier: "FourImageCell")
    /// Reuse identifier `FourImageCollectionCell`.
    static let fourImageCollectionCell: Rswift.ReuseIdentifier<PostWithFourImageCollectionCell> = Rswift.ReuseIdentifier(identifier: "FourImageCollectionCell")
    /// Reuse identifier `FundingCollectionItem`.
    static let fundingCollectionItem: Rswift.ReuseIdentifier<FundingCollectionItem> = Rswift.ReuseIdentifier(identifier: "FundingCollectionItem")
    /// Reuse identifier `FundingTableItem`.
    static let fundingTableItem: Rswift.ReuseIdentifier<FundingTableItem> = Rswift.ReuseIdentifier(identifier: "FundingTableItem")
    /// Reuse identifier `IntroItem`.
    static let introItem: Rswift.ReuseIdentifier<IntroItem> = Rswift.ReuseIdentifier(identifier: "IntroItem")
    /// Reuse identifier `NightModeTableItem`.
    static let nightModeTableItem: Rswift.ReuseIdentifier<NightModeTableItem> = Rswift.ReuseIdentifier(identifier: "NightModeTableItem")
    /// Reuse identifier `NoPostcell`.
    static let noPostcell: Rswift.ReuseIdentifier<NoPostCell> = Rswift.ReuseIdentifier(identifier: "NoPostcell")
    /// Reuse identifier `NoStoreCells`.
    static let noStoreCells: Rswift.ReuseIdentifier<NoStoreCell> = Rswift.ReuseIdentifier(identifier: "NoStoreCells")
    /// Reuse identifier `OneImageCell`.
    static let oneImageCell: Rswift.ReuseIdentifier<PostWithOneImageCell> = Rswift.ReuseIdentifier(identifier: "OneImageCell")
    /// Reuse identifier `PPBlockedUserItemTableViewCellID`.
    static let ppBlockedUserItemTableViewCellID: Rswift.ReuseIdentifier<PPBlockedUserItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPBlockedUserItemTableViewCellID")
    /// Reuse identifier `PPChatUserItemTableViewCellID`.
    static let ppChatUserItemTableViewCellID: Rswift.ReuseIdentifier<PPChatUserItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPChatUserItemTableViewCellID")
    /// Reuse identifier `PPCollectionViewItemTableViewCellID`.
    static let ppCollectionViewItemTableViewCellID: Rswift.ReuseIdentifier<PPCollectionViewItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPCollectionViewItemTableViewCellID")
    /// Reuse identifier `PPColorItemCollectionViewCellID`.
    static let ppColorItemCollectionViewCellID: Rswift.ReuseIdentifier<PPColorItemCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PPColorItemCollectionViewCellID")
    /// Reuse identifier `PPCommentItemTableViewCellID`.
    static let ppCommentItemTableViewCellID: Rswift.ReuseIdentifier<PPCommentItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPCommentItemTableViewCellID")
    /// Reuse identifier `PPFontItemCollectionViewCellID`.
    static let ppFontItemCollectionViewCellID: Rswift.ReuseIdentifier<PPFontItemCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PPFontItemCollectionViewCellID")
    /// Reuse identifier `PPGIFItemTableViewCellID`.
    static let ppgifItemTableViewCellID: Rswift.ReuseIdentifier<PPGIFItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPGIFItemTableViewCellID")
    /// Reuse identifier `PPHashTagItemTableViewCellID`.
    static let ppHashTagItemTableViewCellID: Rswift.ReuseIdentifier<PPHashTagItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPHashTagItemTableViewCellID")
    /// Reuse identifier `PPHorizontalCollectionviewItemTableViewCellID`.
    static let ppHorizontalCollectionviewItemTableViewCellID: Rswift.ReuseIdentifier<PPHorizontalCollectionviewItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPHorizontalCollectionviewItemTableViewCellID")
    /// Reuse identifier `PPImageItemTableViewCellID`.
    static let ppImageItemTableViewCellID: Rswift.ReuseIdentifier<PPImageItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPImageItemTableViewCellID")
    /// Reuse identifier `PPMosaicGIFItemCollectionViewCellID`.
    static let ppMosaicGIFItemCollectionViewCellID: Rswift.ReuseIdentifier<PPMosaicGIFItemCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PPMosaicGIFItemCollectionViewCellID")
    /// Reuse identifier `PPMosaicImageItemCollectionViewCellID`.
    static let ppMosaicImageItemCollectionViewCellID: Rswift.ReuseIdentifier<PPMosaicImageItemCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PPMosaicImageItemCollectionViewCellID")
    /// Reuse identifier `PPMosaicVideoItemCollectionViewCellID`.
    static let ppMosaicVideoItemCollectionViewCellID: Rswift.ReuseIdentifier<PPMosaicVideoItemCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PPMosaicVideoItemCollectionViewCellID")
    /// Reuse identifier `PPMultiImageItemTableViewCellID`.
    static let ppMultiImageItemTableViewCellID: Rswift.ReuseIdentifier<PPMultiImageItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPMultiImageItemTableViewCellID")
    /// Reuse identifier `PPMyProfileITemTableViewCellID`.
    static let ppMyProfileITemTableViewCellID: Rswift.ReuseIdentifier<PPMyProfileITemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPMyProfileITemTableViewCellID")
    /// Reuse identifier `PPNoResultTableViewCellID`.
    static let ppNoResultTableViewCellID: Rswift.ReuseIdentifier<PPNoResultTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPNoResultTableViewCellID")
    /// Reuse identifier `PPNormalVerticalCollectionViewItemTableViewCellID`.
    static let ppNormalVerticalCollectionViewItemTableViewCellID: Rswift.ReuseIdentifier<PPNormalVerticalCollectionViewItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPNormalVerticalCollectionViewItemTableViewCellID")
    /// Reuse identifier `PPNotificationItemTableViewCellID`.
    static let ppNotificationItemTableViewCellID: Rswift.ReuseIdentifier<PPNotificationItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPNotificationItemTableViewCellID")
    /// Reuse identifier `PPPostItemCollectionViewCellID`.
    static let ppPostItemCollectionViewCellID: Rswift.ReuseIdentifier<PPPostItemCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PPPostItemCollectionViewCellID")
    /// Reuse identifier `PPProfileCheckBoxItemTableViewCellID`.
    static let ppProfileCheckBoxItemTableViewCellID: Rswift.ReuseIdentifier<PPProfileCheckBoxItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPProfileCheckBoxItemTableViewCellID")
    /// Reuse identifier `PPProfileItemTableViewCellID`.
    static let ppProfileItemTableViewCellID: Rswift.ReuseIdentifier<PPProfileItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPProfileItemTableViewCellID")
    /// Reuse identifier `PPReceiverChatItemTableViewCellID`.
    static let ppReceiverChatItemTableViewCellID: Rswift.ReuseIdentifier<PPReceiverChatItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPReceiverChatItemTableViewCellID")
    /// Reuse identifier `PPSelectPostItemTableViewCellID`.
    static let ppSelectPostItemTableViewCellID: Rswift.ReuseIdentifier<PPSelectPostItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPSelectPostItemTableViewCellID")
    /// Reuse identifier `PPSenderChatItemTableViewCellID`.
    static let ppSenderChatItemTableViewCellID: Rswift.ReuseIdentifier<PPSenderChatItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPSenderChatItemTableViewCellID")
    /// Reuse identifier `PPSettingsItemTableViewCellID`.
    static let ppSettingsItemTableViewCellID: Rswift.ReuseIdentifier<PPSettingsItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPSettingsItemTableViewCellID")
    /// Reuse identifier `PPStoryItemCollectionViewCellID`.
    static let ppStoryItemCollectionViewCellID: Rswift.ReuseIdentifier<PPStoryItemCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PPStoryItemCollectionViewCellID")
    /// Reuse identifier `PPSubmitButtonItemTableViewCellID`.
    static let ppSubmitButtonItemTableViewCellID: Rswift.ReuseIdentifier<PPSubmitButtonItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPSubmitButtonItemTableViewCellID")
    /// Reuse identifier `PPUserProfileThumbnailItemCollectionViewCellID`.
    static let ppUserProfileThumbnailItemCollectionViewCellID: Rswift.ReuseIdentifier<PPUserProfileThumbnailItemCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PPUserProfileThumbnailItemCollectionViewCellID")
    /// Reuse identifier `PPUserSuggestionCollectionViewCellID`.
    static let ppUserSuggestionCollectionViewCellID: Rswift.ReuseIdentifier<PPUserSuggestionCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PPUserSuggestionCollectionViewCellID")
    /// Reuse identifier `PPVideoItemTableViewCellID`.
    static let ppVideoItemTableViewCellID: Rswift.ReuseIdentifier<PPVideoItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPVideoItemTableViewCellID")
    /// Reuse identifier `PPYourStoryItemCollectionViewCellID`.
    static let ppYourStoryItemCollectionViewCellID: Rswift.ReuseIdentifier<PPYourStoryItemCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PPYourStoryItemCollectionViewCellID")
    /// Reuse identifier `PPYoutubeItemTableViewCellID`.
    static let ppYoutubeItemTableViewCellID: Rswift.ReuseIdentifier<PPYoutubeItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "PPYoutubeItemTableViewCellID")
    /// Reuse identifier `SectionThreeShowFundingDetailsTableItem`.
    static let sectionThreeShowFundingDetailsTableItem: Rswift.ReuseIdentifier<SectionThreeShowFundingDetailsTableItem> = Rswift.ReuseIdentifier(identifier: "SectionThreeShowFundingDetailsTableItem")
    /// Reuse identifier `SectionTwoTableItem`.
    static let sectionTwoTableItem: Rswift.ReuseIdentifier<SectionTwoTableItem> = Rswift.ReuseIdentifier(identifier: "SectionTwoTableItem")
    /// Reuse identifier `SessionCell`.
    static let sessionCell: Rswift.ReuseIdentifier<ManageSessionCell> = Rswift.ReuseIdentifier(identifier: "SessionCell")
    /// Reuse identifier `ShowDetailsSectionOneTableItem`.
    static let showDetailsSectionOneTableItem: Rswift.ReuseIdentifier<ShowDetailsSectionOneTableItem> = Rswift.ReuseIdentifier(identifier: "ShowDetailsSectionOneTableItem")
    /// Reuse identifier `ShowFundingTableItem`.
    static let showFundingTableItem: Rswift.ReuseIdentifier<ShowFundingTableItem> = Rswift.ReuseIdentifier(identifier: "ShowFundingTableItem")
    /// Reuse identifier `StoreCollectionCell`.
    static let storeCollectionCell: Rswift.ReuseIdentifier<StoreCollectionCell> = Rswift.ReuseIdentifier(identifier: "StoreCollectionCell")
    /// Reuse identifier `StoreTableCell`.
    static let storeTableCell: Rswift.ReuseIdentifier<StoreTableViewCell> = Rswift.ReuseIdentifier(identifier: "StoreTableCell")
    /// Reuse identifier `ThreeImageCell`.
    static let threeImageCell: Rswift.ReuseIdentifier<PostWithThreeImage> = Rswift.ReuseIdentifier(identifier: "ThreeImageCell")
    /// Reuse identifier `ThreeImageCollectionCell`.
    static let threeImageCollectionCell: Rswift.ReuseIdentifier<PostWithThreeImageCollectionCell> = Rswift.ReuseIdentifier(identifier: "ThreeImageCollectionCell")
    /// Reuse identifier `TwoImageCell`.
    static let twoImageCell: Rswift.ReuseIdentifier<PostWithTwoImage> = Rswift.ReuseIdentifier(identifier: "TwoImageCell")
    /// Reuse identifier `TwoImageCollectionCell`.
    static let twoImageCollectionCell: Rswift.ReuseIdentifier<PostWithTwoImageCollectionCell> = Rswift.ReuseIdentifier(identifier: "TwoImageCollectionCell")
    /// Reuse identifier `UserImagescell`.
    static let userImagescell: Rswift.ReuseIdentifier<UserImgesCell> = Rswift.ReuseIdentifier(identifier: "UserImagescell")
    /// Reuse identifier `UserSuggestionCollectionCell`.
    static let userSuggestionCollectionCell: Rswift.ReuseIdentifier<UserSuggestionCollectionCell> = Rswift.ReuseIdentifier(identifier: "UserSuggestionCollectionCell")
    /// Reuse identifier `UserdetailCell`.
    static let userdetailCell: Rswift.ReuseIdentifier<UserDetailCell> = Rswift.ReuseIdentifier(identifier: "UserdetailCell")
    /// Reuse identifier `VerticalCollectionviewItemTableViewCellID`.
    static let verticalCollectionviewItemTableViewCellID: Rswift.ReuseIdentifier<VerticalCollectionviewItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "VerticalCollectionviewItemTableViewCellID")
    /// Reuse identifier `VideoCollectionCells`.
    static let videoCollectionCells: Rswift.ReuseIdentifier<VideoCollectionCell> = Rswift.ReuseIdentifier(identifier: "VideoCollectionCells")
    /// Reuse identifier `YouTubeCollectionCell`.
    static let youTubeCollectionCell: Rswift.ReuseIdentifier<YoutubeCollectionCell> = Rswift.ReuseIdentifier(identifier: "YouTubeCollectionCell")
    /// Reuse identifier `postImageCell`.
    static let postImageCell: Rswift.ReuseIdentifier<PostWithImageCell> = Rswift.ReuseIdentifier(identifier: "postImageCell")
    /// Reuse identifier `postOneImageCollectionCell`.
    static let postOneImageCollectionCell: Rswift.ReuseIdentifier<PostWithOneImageCollectionCell> = Rswift.ReuseIdentifier(identifier: "postOneImageCollectionCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 337 localization keys.
    struct localizable {
      /// en translation: Settings
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let settings = Rswift.StringResource(key: "Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: APPLY FILTER
      ///
      /// Locales: en, tr
      static let applyfilteR = Rswift.StringResource(key: "APPLY FILTER", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: About
      ///
      /// Locales: en, tr
      static let about = Rswift.StringResource(key: "About", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: About you
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let aboutYou = Rswift.StringResource(key: "About you", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Account and Profile
      ///
      /// Locales: en, tr
      static let accountAndProfile = Rswift.StringResource(key: "Account and Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Account privacy
      ///
      /// Locales: en
      static let accountPrivacy = Rswift.StringResource(key: "Account privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add
      ///
      /// Locales: en, tr
      static let add = Rswift.StringResource(key: "Add", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Add Participants
      ///
      /// Locales: en, tr
      static let addParticipants = Rswift.StringResource(key: "Add Participants", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Add Story
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let addStory = Rswift.StringResource(key: "Add Story", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Add new Story
      ///
      /// Locales: en, tr
      static let addNewStory = Rswift.StringResource(key: "Add new Story", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Add post caption. #hashtag..@mentioned?
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let addPostCaptionHashtagMentioned = Rswift.StringResource(key: "Add post caption. #hashtag..@mentioned?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Add to Post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let addToPost = Rswift.StringResource(key: "Add to Post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: AddFriend
      ///
      /// Locales: en, tr
      static let addFriend = Rswift.StringResource(key: "AddFriend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Amount
      ///
      /// Locales: en, tr
      static let amount = Rswift.StringResource(key: "Amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Answer
      ///
      /// Locales: en, tr
      static let answer = Rswift.StringResource(key: "Answer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Application will close to change the language
      ///
      /// Locales: en, tr
      static let applicationWillCloseToChangeTheLanguage = Rswift.StringResource(key: "Application will close to change the language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Apply Filter
      ///
      /// Locales: en, tr
      static let applyFilter = Rswift.StringResource(key: "Apply Filter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Are you sure want to delete this post
      ///
      /// Locales: en, tr
      static let areYouSureWantToDeleteThisPost = Rswift.StringResource(key: "Are you sure want to delete this post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Are you sure you want to delete the account from WoWonder Messenger
      ///
      /// Locales: en, tr
      static let areYouSureYouWantToDeleteTheAccountFromWoWonderMessenger = Rswift.StringResource(key: "Are you sure you want to delete the account from WoWonder Messenger", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Are you sure you want to logout?
      ///
      /// Locales: en, tr
      static let areYouSureYouWantToLogout = Rswift.StringResource(key: "Are you sure you want to logout?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: BY REGISTERING YOU AGREE TO OUR
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let byregisteringyouagreetoouR = Rswift.StringResource(key: "BY REGISTERING YOU AGREE TO OUR", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Bank Transfer
      ///
      /// Locales: en, tr
      static let bankTransfer = Rswift.StringResource(key: "Bank Transfer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Block
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let block = Rswift.StringResource(key: "Block", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Block User
      ///
      /// Locales: en, tr
      static let blockUser = Rswift.StringResource(key: "Block User", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Block Users
      ///
      /// Locales: en, tr
      static let blockUsers = Rswift.StringResource(key: "Block Users", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Blocked User
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let blockedUser = Rswift.StringResource(key: "Blocked User", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Blocked Users
      ///
      /// Locales: en, tr
      static let blockedUsers = Rswift.StringResource(key: "Blocked Users", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Business Account
      ///
      /// Locales: en, tr
      static let businessAccount = Rswift.StringResource(key: "Business Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Business Name
      ///
      /// Locales: en, tr
      static let businessName = Rswift.StringResource(key: "Business Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Buy
      ///
      /// Locales: en, tr
      static let buy = Rswift.StringResource(key: "Buy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: By registering you agree to our terms of service
      ///
      /// Locales: en, tr
      static let byRegisteringYouAgreeToOurTermsOfService = Rswift.StringResource(key: "By registering you agree to our terms of service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: CANCEL
      ///
      /// Locales: en, tr
      static let canceL = Rswift.StringResource(key: "CANCEL", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: CLOSE
      ///
      /// Locales: en, tr
      static let closE = Rswift.StringResource(key: "CLOSE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: CREATE AN ACCOUNT
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let createanaccounT = Rswift.StringResource(key: "CREATE AN ACCOUNT", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Call Logs Cleared
      ///
      /// Locales: en, tr
      static let callLogsCleared = Rswift.StringResource(key: "Call Logs Cleared", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Calling
      ///
      /// Locales: en, tr
      static let calling = Rswift.StringResource(key: "Calling", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Camera
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let camera = Rswift.StringResource(key: "Camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Category
      ///
      /// Locales: en, tr
      static let category = Rswift.StringResource(key: "Category", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Change Password
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let changePassword = Rswift.StringResource(key: "Change Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Change your password
      ///
      /// Locales: en, tr
      static let changeYourPassword = Rswift.StringResource(key: "Change your password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Chats
      ///
      /// Locales: en, tr
      static let chats = Rswift.StringResource(key: "Chats", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Chose Image
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let choseImage = Rswift.StringResource(key: "Chose image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Clear Chat
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let clearChat = Rswift.StringResource(key: "Clear Chat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Close
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let close = Rswift.StringResource(key: "Close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Comment
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let comment = Rswift.StringResource(key: "Comment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Commented on my post
      ///
      /// Locales: en, tr
      static let commentedOnMyPost = Rswift.StringResource(key: "Commented on my post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Comments
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let comments = Rswift.StringResource(key: "Comments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Confirm Password
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let confirmPassword = Rswift.StringResource(key: "Confirm Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Continue with Facebook
      ///
      /// Locales: en, tr
      static let continueWithFacebook = Rswift.StringResource(key: "Continue with Facebook", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Conversation Tones
      ///
      /// Locales: en
      static let conversationTones = Rswift.StringResource(key: "Conversation Tones", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Copied
      ///
      /// Locales: en, tr
      static let copied = Rswift.StringResource(key: "Copied", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Copy
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let copy = Rswift.StringResource(key: "Copy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Copy Link to profile
      ///
      /// Locales: en, tr
      static let copyLinkToProfile = Rswift.StringResource(key: "Copy Link to profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Create
      ///
      /// Locales: en, tr
      static let create = Rswift.StringResource(key: "Create", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Credit Card
      ///
      /// Locales: en, tr
      static let creditCard = Rswift.StringResource(key: "Credit Card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Current Password
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let currentPassword = Rswift.StringResource(key: "Current Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: DON'T HAVE AN ACCOUNT?
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let donthaveanaccounT = Rswift.StringResource(key: "DON'T HAVE AN ACCOUNT?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Dark mode
      ///
      /// Locales: en, tr
      static let darkMode = Rswift.StringResource(key: "Dark mode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Decline
      ///
      /// Locales: en, tr
      static let decline = Rswift.StringResource(key: "Decline", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Delete
      ///
      /// Locales: en, tr
      static let delete = Rswift.StringResource(key: "Delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Delete Account
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let deleteAccount = Rswift.StringResource(key: "Delete Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Delete Group
      ///
      /// Locales: en, tr
      static let deleteGroup = Rswift.StringResource(key: "Delete Group", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Delete Post
      ///
      /// Locales: en, tr
      static let deletePost = Rswift.StringResource(key: "Delete Post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Delete This Post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let deleteThisPost = Rswift.StringResource(key: "Delete This Post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Disable
      ///
      /// Locales: en, tr
      static let disable = Rswift.StringResource(key: "Disable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Display
      ///
      /// Locales: en, tr
      static let display = Rswift.StringResource(key: "Display", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Display your app language
      ///
      /// Locales: en, tr
      static let displayYourAppLanguage = Rswift.StringResource(key: "Display your app language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Downloads
      ///
      /// Locales: en, tr
      static let downloads = Rswift.StringResource(key: "Downloads", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Earn upto $0.10 for each user your refer to us!
      ///
      /// Locales: en, tr
      static let earnUpto010ForEachUserYourReferToUs = Rswift.StringResource(key: "Earn upto $0.10 for each user your refer to us!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Edit Post
      ///
      /// Locales: en, tr
      static let editPost = Rswift.StringResource(key: "Edit Post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Edit Profile
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let editProfile = Rswift.StringResource(key: "Edit Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Edit Profile and avatar
      ///
      /// Locales: en, tr
      static let editProfileAndAvatar = Rswift.StringResource(key: "Edit Profile and avatar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let email = Rswift.StringResource(key: "Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Email is badly formatted.
      ///
      /// Locales: en, tr
      static let emailIsBadlyFormatted = Rswift.StringResource(key: "Email is badly formatted.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Email o username
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let emailOrUsername = Rswift.StringResource(key: "Email or Username", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Embed Video
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let embedVideo = Rswift.StringResource(key: "Embed Video", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Enable
      ///
      /// Locales: en, tr
      static let enable = Rswift.StringResource(key: "Enable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter BusinessName
      ///
      /// Locales: en, tr
      static let enterBusinessName = Rswift.StringResource(key: "Enter BusinessName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Category name
      ///
      /// Locales: en, tr
      static let enterCategoryName = Rswift.StringResource(key: "Enter Category name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Email
      ///
      /// Locales: en, tr
      static let enterEmail = Rswift.StringResource(key: "Enter Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter License name
      ///
      /// Locales: en, tr
      static let enterLicenseName = Rswift.StringResource(key: "Enter License name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Name
      ///
      /// Locales: en, tr
      static let enterName = Rswift.StringResource(key: "Enter Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter PhoneNumber
      ///
      /// Locales: en, tr
      static let enterPhoneNumber = Rswift.StringResource(key: "Enter PhoneNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Price
      ///
      /// Locales: en, tr
      static let enterPrice = Rswift.StringResource(key: "Enter Price", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Tag
      ///
      /// Locales: en, tr
      static let enterTag = Rswift.StringResource(key: "Enter Tag", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Title
      ///
      /// Locales: en, tr
      static let enterTitle = Rswift.StringResource(key: "Enter Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Website
      ///
      /// Locales: en, tr
      static let enterWebsite = Rswift.StringResource(key: "Enter Website", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter Your Information!
      ///
      /// Locales: en, tr
      static let enterYourInformation = Rswift.StringResource(key: "Enter Your Information!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Enter message
      ///
      /// Locales: en, tr
      static let enterMessage = Rswift.StringResource(key: "Enter message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Exit Group
      ///
      /// Locales: en, tr
      static let exitGroup = Rswift.StringResource(key: "Exit Group", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Explore
      ///
      /// Locales: en, tr
      static let explore = Rswift.StringResource(key: "Explore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Explore Everything
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let title1 = Rswift.StringResource(key: "Title1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Explore Posts
      ///
      /// Locales: en, tr
      static let explorePosts = Rswift.StringResource(key: "Explore Posts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: FEMALE
      ///
      /// Locales: en, tr
      static let famalE = Rswift.StringResource(key: "FAMALE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Facebook
      ///
      /// Locales: en, tr
      static let facebook = Rswift.StringResource(key: "Facebook", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Favourite
      ///
      /// Locales: en, tr
      static let favourite = Rswift.StringResource(key: "Favourite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Featured Posts
      ///
      /// Locales: en, tr
      static let featuredPosts = Rswift.StringResource(key: "Featured Posts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Female
      ///
      /// Locales: en, tr
      static let female = Rswift.StringResource(key: "Female", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Filter
      ///
      /// Locales: en, tr
      static let filter = Rswift.StringResource(key: "Filter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Find all invite request
      ///
      /// Locales: en, tr
      static let findAllInviteRequest = Rswift.StringResource(key: "Find all invite request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: First Name
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let firstName = Rswift.StringResource(key: "First Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Follow Request
      ///
      /// Locales: en, tr
      static let followRequest = Rswift.StringResource(key: "Follow Request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Followed me
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let followedMe = Rswift.StringResource(key: "Followed me", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Followers
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let followers = Rswift.StringResource(key: "Followers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Forgot Password
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let forgotPassword = Rswift.StringResource(key: "Forgot Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Forgot your password?
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let forgotYourPassword = Rswift.StringResource(key: "Forgot your password?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Funding
      ///
      /// Locales: en, tr
      static let funding = Rswift.StringResource(key: "Funding", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Funding Request
      ///
      /// Locales: en, tr
      static let fundingRequest = Rswift.StringResource(key: "Funding Request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: GIF
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let giF = Rswift.StringResource(key: "GIF", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Gallery
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let gallery = Rswift.StringResource(key: "Gallery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Gender
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let gender = Rswift.StringResource(key: "Gender", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: General
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let general = Rswift.StringResource(key: "General", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Get notifications when you receive messages
      ///
      /// Locales: en, tr
      static let getNotificationsWhenYouReceiveMessages = Rswift.StringResource(key: "Get notifications when you receive messages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Go to Post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let goToPost = Rswift.StringResource(key: "Go to Post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Group Name
      ///
      /// Locales: en, tr
      static let groupName = Rswift.StringResource(key: "Group Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Group Request
      ///
      /// Locales: en, tr
      static let groupRequest = Rswift.StringResource(key: "Group Request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: HASHTAGS
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let hashtagS = Rswift.StringResource(key: "HASHTAGS", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Hang Up
      ///
      /// Locales: en, tr
      static let hangUp = Rswift.StringResource(key: "Hang Up", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: HashTag
      ///
      /// Locales: en, tr
      static let hashTag = Rswift.StringResource(key: "HashTag", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Help
      ///
      /// Locales: en, tr
      static let help = Rswift.StringResource(key: "Help", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Henüz Gönderi Yok!
      ///
      /// Locales: en, tr
      static let noPostYet = Rswift.StringResource(key: "No Post Yet!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Henüz yorum yok
      ///
      /// Locales: en, tr
      static let noCommentsYet = Rswift.StringResource(key: "No Comments Yet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Hi! There I'm using Pixel Photo
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let hiThereIMUsingPixelPhoto = Rswift.StringResource(key: "Hi! There I'm using Pixel Photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Hi! there i am using WoWonder Messenger
      ///
      /// Locales: en, tr
      static let hiThereIAmUsingWoWonderMessenger = Rswift.StringResource(key: "Hi! there i am using WoWonder Messenger", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: If you forgot your password, you can reset it from here.
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let ifYouForgotYourPasswordYouCanResetItFromHere = Rswift.StringResource(key: "If you forgot your password, you can reset it from here.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Image
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let image = Rswift.StringResource(key: "Image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Image Gallery
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let imageGallery = Rswift.StringResource(key: "Image Gallery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Image Type
      ///
      /// Locales: en, tr
      static let imageType = Rswift.StringResource(key: "Image Type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Immediately save images or video to check them later anytime and in every place
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let desc3 = Rswift.StringResource(key: "Desc3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Internet Error
      ///
      /// Locales: en, tr
      static let internetError = Rswift.StringResource(key: "Internet Error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Invite Friends
      ///
      /// Locales: en, tr
      static let inviteFriends = Rswift.StringResource(key: "Invite Friends", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Just like the photos wich you found interesting and become a follower of fampus people
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let desc2 = Rswift.StringResource(key: "Desc2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Kullanıcı Verisi yok
      ///
      /// Locales: en, tr
      static let thereIsNoUserData = Rswift.StringResource(key: "There is no UserData", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Kullanıcı yok
      ///
      /// Locales: en, tr
      static let thereAreNoUsers = Rswift.StringResource(key: "There are no users", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, tr
      static let label = Rswift.StringResource(key: "Label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Language
      ///
      /// Locales: en, tr
      static let language = Rswift.StringResource(key: "Language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Last Name
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let lastName = Rswift.StringResource(key: "Last Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: License Type
      ///
      /// Locales: en, tr
      static let licenseType = Rswift.StringResource(key: "License Type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Light mode
      ///
      /// Locales: en, tr
      static let lightMode = Rswift.StringResource(key: "Light mode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Like
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let like = Rswift.StringResource(key: "Like", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Liked & Follow
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let title2 = Rswift.StringResource(key: "Title2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Liked my post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let likedMyPost = Rswift.StringResource(key: "Liked my post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Likes
      ///
      /// Locales: en, tr
      static let likes = Rswift.StringResource(key: "Likes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Loading...
      ///
      /// Locales: en, tr
      static let loading = Rswift.StringResource(key: "Loading...", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Location
      ///
      /// Locales: en, tr
      static let location = Rswift.StringResource(key: "Location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: en, tr
      static let login = Rswift.StringResource(key: "Login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Logout
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let logout = Rswift.StringResource(key: "Logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.
      ///
      /// Locales: en, tr
      static let loremIpsumDolorSitErElitLametConsectetaurCilliumAdipisicingPecuSedDoEiusmodTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationUllamcoLaborisNisiUtAliquipExEaCommodoConsequatDuisAuteIrureDolorInReprehenderitInVoluptateVelitEsseCillumDoloreEuFugiatNullaPariaturExcepteurSintOccaecatCupidatatNonProidentSuntInCulpaQuiOfficiaDeseruntMollitAnimIdEstLaborumNamLiberTeConscientToFactorTumPoenLegumOdioqueCiviuda = Rswift.StringResource(key: "Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: MALE
      ///
      /// Locales: en, tr
      static let malE = Rswift.StringResource(key: "MALE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Male
      ///
      /// Locales: en, tr
      static let male = Rswift.StringResource(key: "Male", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Manage Sessions
      ///
      /// Locales: en, tr
      static let manageSessions = Rswift.StringResource(key: "Manage Sessions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Mention Contact
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let mentionContact = Rswift.StringResource(key: "Mention Contact", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Mentioned Contact
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let mentionedContact = Rswift.StringResource(key: "Mentioned Contact", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Mentioned me
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let mentionedMe = Rswift.StringResource(key: "Mentioned me", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Message
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let message = Rswift.StringResource(key: "Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Message Notification
      ///
      /// Locales: en, tr
      static let messageNotification = Rswift.StringResource(key: "Message Notification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Message Notifications
      ///
      /// Locales: en, tr
      static let messageNotifications = Rswift.StringResource(key: "Message Notifications", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Mobile
      ///
      /// Locales: en, tr
      static let mobile = Rswift.StringResource(key: "Mobile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Mute
      ///
      /// Locales: en, tr
      static let mute = Rswift.StringResource(key: "Mute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: My Account
      ///
      /// Locales: en, tr
      static let myAccount = Rswift.StringResource(key: "My Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: My Affilities
      ///
      /// Locales: en, tr
      static let myAffilities = Rswift.StringResource(key: "My Affilities", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: My Profile
      ///
      /// Locales: en, tr
      static let myProfile = Rswift.StringResource(key: "My Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: MyFriend
      ///
      /// Locales: en, tr
      static let myFriend = Rswift.StringResource(key: "MyFriend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: NO
      ///
      /// Locales: en, tr
      static let nO = Rswift.StringResource(key: "NO", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: en, tr
      static let name = Rswift.StringResource(key: "Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: New Password
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let newPassword = Rswift.StringResource(key: "New Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Night Mode
      ///
      /// Locales: en, tr
      static let nightMode = Rswift.StringResource(key: "Night Mode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: No block users to be displayed
      ///
      /// Locales: en, tr
      static let noBlockUsersToBeDisplayed = Rswift.StringResource(key: "No block users to be displayed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: No body
      ///
      /// Locales: en, tr
      static let noBody = Rswift.StringResource(key: "No body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: No more Messages
      ///
      /// Locales: en, tr
      static let noMoreMessages = Rswift.StringResource(key: "No more Messages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Nobody
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let nobody = Rswift.StringResource(key: "Nobody", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Notification
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let notification = Rswift.StringResource(key: "Notification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Notification Popup
      ///
      /// Locales: en, tr
      static let notificationPopup = Rswift.StringResource(key: "Notification Popup", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Notification Setting
      ///
      /// Locales: en, tr
      static let notificationSetting = Rswift.StringResource(key: "Notification Setting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: OFFLINE
      ///
      /// Locales: en, tr
      static let offlinE = Rswift.StringResource(key: "OFFLINE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: en, tr
      static let oK = Rswift.StringResource(key: "OK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: ONLINE
      ///
      /// Locales: en, tr
      static let onlinE = Rswift.StringResource(key: "ONLINE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Okay
      ///
      /// Locales: en, tr
      static let okay = Rswift.StringResource(key: "Okay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Option
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let option = Rswift.StringResource(key: "Option", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Others
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let others = Rswift.StringResource(key: "Others", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: PRIVACY
      ///
      /// Locales: en, tr
      static let privacY = Rswift.StringResource(key: "PRIVACY", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Passport
      ///
      /// Locales: en, tr
      static let passport = Rswift.StringResource(key: "Passport", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let password = Rswift.StringResource(key: "Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Password do not match.
      ///
      /// Locales: en, tr
      static let passwordDoNotMatch = Rswift.StringResource(key: "Password do not match.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Password does not match. Try again!
      ///
      /// Locales: en, tr
      static let passwordDoesNotMatchTryAgain = Rswift.StringResource(key: "Password does not match. Try again!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Password has been changed!
      ///
      /// Locales: en, tr
      static let passwordHasBeenChanged = Rswift.StringResource(key: "Password has been changed!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: PayPal E-mail
      ///
      /// Locales: en, tr
      static let payPalEMail = Rswift.StringResource(key: "PayPal E-mail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Paypal
      ///
      /// Locales: en, tr
      static let payPal = Rswift.StringResource(key: "PayPal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Phone
      ///
      /// Locales: en, tr
      static let phone = Rswift.StringResource(key: "Phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Phone Number
      ///
      /// Locales: en, tr
      static let phoneNumber = Rswift.StringResource(key: "Phone Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Pixel Photo
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let appName = Rswift.StringResource(key: "App Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Play sound for incoming and outgoing messages
      ///
      /// Locales: en, tr
      static let playSoundForIncomingAndOutgoingMessages = Rswift.StringResource(key: "Play sound for incoming and outgoing messages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Play sounds for incoming and outgoing messages
      ///
      /// Locales: en, tr
      static let playSoundsForIncomingAndOutgoingMessages = Rswift.StringResource(key: "Play sounds for incoming and outgoing messages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please , confirm checkbox to process this action
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let checkDelete = Rswift.StringResource(key: "Check Delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Please Enter Paypal Email
      ///
      /// Locales: en, tr
      static let pleaseEnterPaypalEmail = Rswift.StringResource(key: "Please Enter Paypal Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please Enter amount
      ///
      /// Locales: en, tr
      static let pleaseEnterAmount = Rswift.StringResource(key: "Please Enter amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please Select a recent Picture of your Passport or id
      ///
      /// Locales: en, tr
      static let pleaseSelectARecentPictureOfYourPassportOrId = Rswift.StringResource(key: "Please Select a recent Picture of your Passport or id", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please add Photo image
      ///
      /// Locales: en, tr
      static let pleaseAddPhotoImage = Rswift.StringResource(key: "Please add Photo image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please add passport image
      ///
      /// Locales: en, tr
      static let pleaseAddPassportImage = Rswift.StringResource(key: "Please add passport image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please enter confirm password.
      ///
      /// Locales: en, tr
      static let pleaseEnterConfirmPassword = Rswift.StringResource(key: "Please enter confirm password.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please enter current confirm password.
      ///
      /// Locales: en, tr
      static let pleaseEnterCurrentConfirmPassword = Rswift.StringResource(key: "Please enter current confirm password.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please enter current new password.
      ///
      /// Locales: en, tr
      static let pleaseEnterCurrentNewPassword = Rswift.StringResource(key: "Please enter current new password.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please enter current password.
      ///
      /// Locales: en, tr
      static let pleaseEnterCurrentPassword = Rswift.StringResource(key: "Please enter current password.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please enter email.
      ///
      /// Locales: en, tr
      static let pleaseEnterEmail = Rswift.StringResource(key: "Please enter email.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please enter password.
      ///
      /// Locales: en, tr
      static let pleaseEnterPassword = Rswift.StringResource(key: "Please enter password.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please enter username.
      ///
      /// Locales: en, tr
      static let pleaseEnterUsername = Rswift.StringResource(key: "Please enter username.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Please enter your email address. We will send you a link to reset password.
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let pleaseEnterYourEmailAddressWeWillSendYouALinkToResetPassword = Rswift.StringResource(key: "Please enter your email address. We will send you a link to reset password.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Please see my post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let pleaseSeeMyPost = Rswift.StringResource(key: "Please see my post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Please select atleast one media.
      ///
      /// Locales: en, tr
      static let pleaseSelectAtleastOneMedia = Rswift.StringResource(key: "Please select atleast one media.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let post = Rswift.StringResource(key: "Post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Posts
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let posts = Rswift.StringResource(key: "Posts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Price
      ///
      /// Locales: en, tr
      static let price = Rswift.StringResource(key: "Price", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Price Max
      ///
      /// Locales: en, tr
      static let priceMax = Rswift.StringResource(key: "Price Max", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Price Min
      ///
      /// Locales: en, tr
      static let priceMin = Rswift.StringResource(key: "Price Min", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Privacy
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let privacy = Rswift.StringResource(key: "Privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Profile
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let profile = Rswift.StringResource(key: "Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Promoted
      ///
      /// Locales: en, tr
      static let promoted = Rswift.StringResource(key: "Promoted", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: REQUEST WITHDRAWAL
      ///
      /// Locales: en, tr
      static let requestwithdrawaL = Rswift.StringResource(key: "REQUEST WITHDRAWAL", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Received Notification when some one
      ///
      /// Locales: en, tr
      static let receivedNotificationWhenSomeOne = Rswift.StringResource(key: "Received Notification when some one", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Refresh
      ///
      /// Locales: en, tr
      static let refresh = Rswift.StringResource(key: "Refresh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Register
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let register = Rswift.StringResource(key: "Register", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Remove Account
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let removeAccount = Rswift.StringResource(key: "Remove Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Repeat Password
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let repeatPassword = Rswift.StringResource(key: "Repeat Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Report
      ///
      /// Locales: en, tr
      static let report = Rswift.StringResource(key: "Report", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Report a Problem
      ///
      /// Locales: en, tr
      static let reportAProblem = Rswift.StringResource(key: "Report a Problem", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Report this Post
      ///
      /// Locales: en, tr
      static let reportThisPost = Rswift.StringResource(key: "Report this Post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Request Submit
      ///
      /// Locales: en, tr
      static let requestSubmit = Rswift.StringResource(key: "Request Submit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Requested
      ///
      /// Locales: en, tr
      static let requested = Rswift.StringResource(key: "Requested", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Reset filter
      ///
      /// Locales: en, tr
      static let resetFilter = Rswift.StringResource(key: "Reset filter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: SAVE
      ///
      /// Locales: en, tr
      static let savE = Rswift.StringResource(key: "SAVE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: SEND
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let senD = Rswift.StringResource(key: "SEND", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: SIGN IN
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let signiN = Rswift.StringResource(key: "SIGN IN", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Sad no result!
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let sadNoResult = Rswift.StringResource(key: "Sad no result!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static let save = Rswift.StringResource(key: "Save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// en translation: Save & Continue
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let saveContinue = Rswift.StringResource(key: "Save & Continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Save & Favorite
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let title3 = Rswift.StringResource(key: "Title3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Search
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let search = Rswift.StringResource(key: "Search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Search Random
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let searchRandom = Rswift.StringResource(key: "Search Random", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Security
      ///
      /// Locales: en, tr
      static let security = Rswift.StringResource(key: "Security", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Select GIF
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let selectGIF = Rswift.StringResource(key: "Select GIF", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Select Image
      ///
      /// Locales: en, tr
      static let selectImage = Rswift.StringResource(key: "Select Image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Select from your contact list
      ///
      /// Locales: en, tr
      static let selectFromYourContactList = Rswift.StringResource(key: "Select from your contact list", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Select what you want
      ///
      /// Locales: en, tr
      static let selectWhatYouWant = Rswift.StringResource(key: "Select what you want", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Share
      ///
      /// Locales: en, tr
      static let share = Rswift.StringResource(key: "Share", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Share To
      ///
      /// Locales: en, tr
      static let shareTo = Rswift.StringResource(key: "Share To", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Share images, video, link, Gifs and Stories with who you love and create popular hashtag
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let desc1 = Rswift.StringResource(key: "Desc1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Show all comments
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let showAllComments = Rswift.StringResource(key: "Show all comments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Show online users
      ///
      /// Locales: en, tr
      static let showOnlineUsers = Rswift.StringResource(key: "Show online users", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Show when user are online
      ///
      /// Locales: en, tr
      static let showWhenUserAreOnline = Rswift.StringResource(key: "Show when user are online", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Show your profile in search engines
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let showYourProfileInSearchEngines = Rswift.StringResource(key: "Show your profile in search engines", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Sign Up
      ///
      /// Locales: en, tr
      static let signUp = Rswift.StringResource(key: "Sign Up", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Social Link
      ///
      /// Locales: en, tr
      static let socialLink = Rswift.StringResource(key: "Social Link", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Start to follow you
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let followedYou = Rswift.StringResource(key: "followed you", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Started Messages
      ///
      /// Locales: en, tr
      static let startedMessages = Rswift.StringResource(key: "Started Messages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Store
      ///
      /// Locales: en, tr
      static let store = Rswift.StringResource(key: "Store", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Submit
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let submit = Rswift.StringResource(key: "Submit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Submit Request
      ///
      /// Locales: en, tr
      static let submitRequest = Rswift.StringResource(key: "Submit Request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Suggested User
      ///
      /// Locales: en, tr
      static let suggestedUser = Rswift.StringResource(key: "Suggested User", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Suggestion for you
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let suggestionForYou = Rswift.StringResource(key: "Suggestion for you", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Support
      ///
      /// Locales: en, tr
      static let support = Rswift.StringResource(key: "Support", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Switch Camera
      ///
      /// Locales: en, tr
      static let switchCamera = Rswift.StringResource(key: "Switch Camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: TERMS AND SERVICES
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let termsandserviceS = Rswift.StringResource(key: "TERMS AND SERVICES", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: TERMS OF SERVICE
      ///
      /// Locales: en, tr
      static let termsofservicE = Rswift.StringResource(key: "TERMS OF SERVICE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Tags
      ///
      /// Locales: en, tr
      static let tags = Rswift.StringResource(key: "Tags", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Text
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let text = Rswift.StringResource(key: "Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Theme
      ///
      /// Locales: en, tr
      static let theme = Rswift.StringResource(key: "Theme", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: There are no call Logs to clear
      ///
      /// Locales: en, tr
      static let thereAreNoCallLogsToClear = Rswift.StringResource(key: "There are no call Logs to clear", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: There are no likes
      ///
      /// Locales: en, tr
      static let thereAreNoLikes = Rswift.StringResource(key: "There are no likes ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: There is no Group request
      ///
      /// Locales: en, tr
      static let thereIsNoGroupRequest = Rswift.StringResource(key: "There is no Group request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: There is no notification
      ///
      /// Locales: en, tr
      static let thereIsNoNotification = Rswift.StringResource(key: "There is no notification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Title
      ///
      /// Locales: en, tr
      static let title = Rswift.StringResource(key: "Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.
      ///
      /// Locales: en, tr
      static let turnOn2StepLoginToLevelUpYourAccountSecurityOnceTurnedOnYouLlUseBothYourPasswordAndA6DigitSecurityCodeSendToYourPhoneOrEmailToLogIn = Rswift.StringResource(key: "Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Two-factor Authentication
      ///
      /// Locales: en, tr
      static let twoFactorAuthentication = Rswift.StringResource(key: "Two-factor Authentication", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Type Something
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let typeSomething = Rswift.StringResource(key: "Type Something", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Type Something
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let typeSometing = Rswift.StringResource(key: "Type Someting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: USERS
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let userS = Rswift.StringResource(key: "USERS", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Unblocked
      ///
      /// Locales: en, tr
      static let unblocked = Rswift.StringResource(key: "Unblocked", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Update Funding
      ///
      /// Locales: en, tr
      static let updateFunding = Rswift.StringResource(key: "Update Funding", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Update Group
      ///
      /// Locales: en, tr
      static let updateGroup = Rswift.StringResource(key: "Update Group", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: User Info
      ///
      /// Locales: en, tr
      static let userInfo = Rswift.StringResource(key: "User Info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: User Profile
      ///
      /// Locales: en, tr
      static let userProfile = Rswift.StringResource(key: "User Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: User Suggestion
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let userSuggestion = Rswift.StringResource(key: "User Suggestion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: User has been blocked!
      ///
      /// Locales: en, tr
      static let userHasBeenBlocked = Rswift.StringResource(key: "User has been blocked!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: UserName
      ///
      /// Locales: en, tr
      static let userName = Rswift.StringResource(key: "UserName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Verification
      ///
      /// Locales: en, tr
      static let verification = Rswift.StringResource(key: "Verification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Verification of the Profile!
      ///
      /// Locales: en, tr
      static let verificationOfTheProfile = Rswift.StringResource(key: "Verification of the Profile!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Video
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let video = Rswift.StringResource(key: "Video", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Video Gallery
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let videoGallery = Rswift.StringResource(key: "Video Gallery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Video Mute
      ///
      /// Locales: en, tr
      static let videoMute = Rswift.StringResource(key: "Video Mute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: View
      ///
      /// Locales: en, tr
      static let view = Rswift.StringResource(key: "View", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: View Profile
      ///
      /// Locales: en, tr
      static let viewProfile = Rswift.StringResource(key: "View Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: View all Follow Request
      ///
      /// Locales: en, tr
      static let viewAllFollowRequest = Rswift.StringResource(key: "View all Follow Request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: ViewMore
      ///
      /// Locales: en, tr
      static let viewMore = Rswift.StringResource(key: "ViewMore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Views
      ///
      /// Locales: en, tr
      static let views = Rswift.StringResource(key: "Views", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Warning !
      ///
      /// Locales: en, tr
      static let warning = Rswift.StringResource(key: "Warning !", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: We cannot find the keyword you are searching form maybe a little spelling mistake?
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let weCannotFindTheKeywordYouAreSearchingFormMaybeALittleSpellingMistake = Rswift.StringResource(key: "We cannot find the keyword you are searching form maybe a little spelling mistake?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Website
      ///
      /// Locales: en, tr
      static let website = Rswift.StringResource(key: "Website", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Welcome to Bohragram
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let welcomeText = Rswift.StringResource(key: "WelcomeText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Where do you want to share it?
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let whereDoYouWantToShareIt = Rswift.StringResource(key: "Where do you want to share it?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Who can direct message you?
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let whoCanDirectMessageYou = Rswift.StringResource(key: "Who can direct message you?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Who can follow me?
      ///
      /// Locales: en, tr
      static let whoCanFollowMe = Rswift.StringResource(key: "Who can follow me?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Who can message me?
      ///
      /// Locales: en, tr
      static let whoCanMessageMe = Rswift.StringResource(key: "Who can message me?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Who can see my birthday?
      ///
      /// Locales: en, tr
      static let whoCanSeeMyBirthday = Rswift.StringResource(key: "Who can see my birthday?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Who can view your profile?
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let whoCanViewYourProfile = Rswift.StringResource(key: "Who can view your profile?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Widthdrawals
      ///
      /// Locales: en, tr
      static let widthdrawals = Rswift.StringResource(key: "Widthdrawals", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Workspace
      ///
      /// Locales: en, tr
      static let workspace = Rswift.StringResource(key: "Workspace", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: YES
      ///
      /// Locales: en, tr
      static let yeS = Rswift.StringResource(key: "YES", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Yes, I wan to delete permanently from PixelPhoto Account.
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let yesIWanToDeletePermanentlyFromPixelPhotoAccount = Rswift.StringResource(key: "Yes, I wan to delete permanently from PixelPhoto Account.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Yes, I want to delete permanently from PixelPhoto Account.
      ///
      /// Locales: en, tr
      static let yesIWantToDeletePermanentlyFromPixelPhotoAccount = Rswift.StringResource(key: "Yes, I want to delete permanently from PixelPhoto Account.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: You
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let you = Rswift.StringResource(key: "You", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: You cannot block this user because it is administrator
      ///
      /// Locales: en, tr
      static let youCannotBlockThisUserBecauseItIsAdministrator = Rswift.StringResource(key: "You cannot block this user because it is administrator", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Your Message here...
      ///
      /// Locales: en, tr
      static let yourMessageHere = Rswift.StringResource(key: "Your Message here...", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Your Photo
      ///
      /// Locales: en, tr
      static let yourPhoto = Rswift.StringResource(key: "Your Photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Your Story
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let yourStory = Rswift.StringResource(key: "Your Story", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: Your balance is $0, minimum withdrawal request is $50
      ///
      /// Locales: en, tr
      static let yourBalanceIs0MinimumWithdrawalRequestIs50 = Rswift.StringResource(key: "Your balance is $0, minimum withdrawal request is $50", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Your facebook profile url
      ///
      /// Locales: en, tr
      static let yourFacebookProfileUrl = Rswift.StringResource(key: "Your facebook profile url", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Your google-plus profile url
      ///
      /// Locales: en, tr
      static let yourGooglePlusProfileUrl = Rswift.StringResource(key: "Your google-plus profile url", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Your report has been sent
      ///
      /// Locales: en, tr
      static let yourReportHasBeenSent = Rswift.StringResource(key: "Your report has been sent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: Your twitter profile url
      ///
      /// Locales: en, tr
      static let yourTwitterProfileUrl = Rswift.StringResource(key: "Your twitter profile url", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: birthday Privacy
      ///
      /// Locales: en, tr
      static let birthdayPrivacy = Rswift.StringResource(key: "birthday Privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: count
      ///
      /// Locales: en, tr
      static let count = Rswift.StringResource(key: "count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: get Notification when you receive messages
      ///
      /// Locales: en, tr
      static let getNotificationWhenYouReceiveMessages = Rswift.StringResource(key: "get Notification when you receive messages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: liked your comment
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let likedYourPost = Rswift.StringResource(key: "liked your post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: mentioned you in a comment
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let mentionedYouInAComment = Rswift.StringResource(key: "mentioned you in a comment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: mentioned you in a post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static let mentionedYouInAPost = Rswift.StringResource(key: "mentioned you in a post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant", "es", "de", "fr", "it", "tr"], comment: nil)
      /// en translation: no likes yet
      ///
      /// Locales: en, tr
      static let noLikesYet = Rswift.StringResource(key: "no likes yet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: sells
      ///
      /// Locales: en, tr
      static let sells = Rswift.StringResource(key: "sells", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: someone is calling you
      ///
      /// Locales: en, tr
      static let someoneIsCallingYou = Rswift.StringResource(key: "someone is calling you", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: something to show
      ///
      /// Locales: en, tr
      static let somethingToShow = Rswift.StringResource(key: "something to show", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// en translation: this
      ///
      /// Locales: en, tr
      static let this = Rswift.StringResource(key: "this", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "tr"], comment: nil)
      /// zh-Hans translation: Everyone
      ///
      /// Locales: zh-Hans, zh-Hant, es, de, fr, it
      static let everyone = Rswift.StringResource(key: "Everyone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// zh-Hans translation: Follow
      ///
      /// Locales: zh-Hans, zh-Hant, es, de, fr, it
      static let follow = Rswift.StringResource(key: "Follow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// zh-Hans translation: Following
      ///
      /// Locales: zh-Hans, zh-Hant, es, de, fr, it
      static let following = Rswift.StringResource(key: "Following", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// zh-Hans translation: People I follow
      ///
      /// Locales: zh-Hans, zh-Hant, es, de, fr, it
      static let peopleIFollow = Rswift.StringResource(key: "People I follow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// zh-Hans translation: Sign In
      ///
      /// Locales: zh-Hans, zh-Hant, es, de, fr, it
      static let signIn = Rswift.StringResource(key: "Sign In", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)
      /// zh-Hans translation: Username
      ///
      /// Locales: zh-Hans, zh-Hant, es, de, fr, it
      static let username = Rswift.StringResource(key: "Username", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "es", "de", "fr", "it"], comment: nil)

      /// en translation: Settings
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings"
        }

        return NSLocalizedString("Settings", bundle: bundle, comment: "")
      }

      /// en translation: APPLY FILTER
      ///
      /// Locales: en, tr
      static func applyfilteR(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("APPLY FILTER", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "APPLY FILTER"
        }

        return NSLocalizedString("APPLY FILTER", bundle: bundle, comment: "")
      }

      /// en translation: About
      ///
      /// Locales: en, tr
      static func about(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("About", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "About"
        }

        return NSLocalizedString("About", bundle: bundle, comment: "")
      }

      /// en translation: About you
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func aboutYou(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("About you", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "About you"
        }

        return NSLocalizedString("About you", bundle: bundle, comment: "")
      }

      /// en translation: Account and Profile
      ///
      /// Locales: en, tr
      static func accountAndProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Account and Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Account and Profile"
        }

        return NSLocalizedString("Account and Profile", bundle: bundle, comment: "")
      }

      /// en translation: Account privacy
      ///
      /// Locales: en
      static func accountPrivacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Account privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Account privacy"
        }

        return NSLocalizedString("Account privacy", bundle: bundle, comment: "")
      }

      /// en translation: Add
      ///
      /// Locales: en, tr
      static func add(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add"
        }

        return NSLocalizedString("Add", bundle: bundle, comment: "")
      }

      /// en translation: Add Participants
      ///
      /// Locales: en, tr
      static func addParticipants(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add Participants", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add Participants"
        }

        return NSLocalizedString("Add Participants", bundle: bundle, comment: "")
      }

      /// en translation: Add Story
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func addStory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add Story", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add Story"
        }

        return NSLocalizedString("Add Story", bundle: bundle, comment: "")
      }

      /// en translation: Add new Story
      ///
      /// Locales: en, tr
      static func addNewStory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add new Story", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add new Story"
        }

        return NSLocalizedString("Add new Story", bundle: bundle, comment: "")
      }

      /// en translation: Add post caption. #hashtag..@mentioned?
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func addPostCaptionHashtagMentioned(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add post caption. #hashtag..@mentioned?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add post caption. #hashtag..@mentioned?"
        }

        return NSLocalizedString("Add post caption. #hashtag..@mentioned?", bundle: bundle, comment: "")
      }

      /// en translation: Add to Post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func addToPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add to Post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add to Post"
        }

        return NSLocalizedString("Add to Post", bundle: bundle, comment: "")
      }

      /// en translation: AddFriend
      ///
      /// Locales: en, tr
      static func addFriend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AddFriend", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AddFriend"
        }

        return NSLocalizedString("AddFriend", bundle: bundle, comment: "")
      }

      /// en translation: Amount
      ///
      /// Locales: en, tr
      static func amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Amount"
        }

        return NSLocalizedString("Amount", bundle: bundle, comment: "")
      }

      /// en translation: Answer
      ///
      /// Locales: en, tr
      static func answer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Answer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Answer"
        }

        return NSLocalizedString("Answer", bundle: bundle, comment: "")
      }

      /// en translation: Application will close to change the language
      ///
      /// Locales: en, tr
      static func applicationWillCloseToChangeTheLanguage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Application will close to change the language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Application will close to change the language"
        }

        return NSLocalizedString("Application will close to change the language", bundle: bundle, comment: "")
      }

      /// en translation: Apply Filter
      ///
      /// Locales: en, tr
      static func applyFilter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Apply Filter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Apply Filter"
        }

        return NSLocalizedString("Apply Filter", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure want to delete this post
      ///
      /// Locales: en, tr
      static func areYouSureWantToDeleteThisPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Are you sure want to delete this post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Are you sure want to delete this post"
        }

        return NSLocalizedString("Are you sure want to delete this post", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to delete the account from WoWonder Messenger
      ///
      /// Locales: en, tr
      static func areYouSureYouWantToDeleteTheAccountFromWoWonderMessenger(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Are you sure you want to delete the account from WoWonder Messenger", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Are you sure you want to delete the account from WoWonder Messenger"
        }

        return NSLocalizedString("Are you sure you want to delete the account from WoWonder Messenger", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to logout?
      ///
      /// Locales: en, tr
      static func areYouSureYouWantToLogout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Are you sure you want to logout?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Are you sure you want to logout?"
        }

        return NSLocalizedString("Are you sure you want to logout?", bundle: bundle, comment: "")
      }

      /// en translation: BY REGISTERING YOU AGREE TO OUR
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func byregisteringyouagreetoouR(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BY REGISTERING YOU AGREE TO OUR", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "BY REGISTERING YOU AGREE TO OUR"
        }

        return NSLocalizedString("BY REGISTERING YOU AGREE TO OUR", bundle: bundle, comment: "")
      }

      /// en translation: Bank Transfer
      ///
      /// Locales: en, tr
      static func bankTransfer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Bank Transfer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Bank Transfer"
        }

        return NSLocalizedString("Bank Transfer", bundle: bundle, comment: "")
      }

      /// en translation: Block
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func block(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Block", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Block"
        }

        return NSLocalizedString("Block", bundle: bundle, comment: "")
      }

      /// en translation: Block User
      ///
      /// Locales: en, tr
      static func blockUser(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Block User", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Block User"
        }

        return NSLocalizedString("Block User", bundle: bundle, comment: "")
      }

      /// en translation: Block Users
      ///
      /// Locales: en, tr
      static func blockUsers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Block Users", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Block Users"
        }

        return NSLocalizedString("Block Users", bundle: bundle, comment: "")
      }

      /// en translation: Blocked User
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func blockedUser(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Blocked User", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Blocked User"
        }

        return NSLocalizedString("Blocked User", bundle: bundle, comment: "")
      }

      /// en translation: Blocked Users
      ///
      /// Locales: en, tr
      static func blockedUsers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Blocked Users", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Blocked Users"
        }

        return NSLocalizedString("Blocked Users", bundle: bundle, comment: "")
      }

      /// en translation: Business Account
      ///
      /// Locales: en, tr
      static func businessAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Business Account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Business Account"
        }

        return NSLocalizedString("Business Account", bundle: bundle, comment: "")
      }

      /// en translation: Business Name
      ///
      /// Locales: en, tr
      static func businessName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Business Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Business Name"
        }

        return NSLocalizedString("Business Name", bundle: bundle, comment: "")
      }

      /// en translation: Buy
      ///
      /// Locales: en, tr
      static func buy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Buy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Buy"
        }

        return NSLocalizedString("Buy", bundle: bundle, comment: "")
      }

      /// en translation: By registering you agree to our terms of service
      ///
      /// Locales: en, tr
      static func byRegisteringYouAgreeToOurTermsOfService(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("By registering you agree to our terms of service", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "By registering you agree to our terms of service"
        }

        return NSLocalizedString("By registering you agree to our terms of service", bundle: bundle, comment: "")
      }

      /// en translation: CANCEL
      ///
      /// Locales: en, tr
      static func canceL(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CANCEL", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CANCEL"
        }

        return NSLocalizedString("CANCEL", bundle: bundle, comment: "")
      }

      /// en translation: CLOSE
      ///
      /// Locales: en, tr
      static func closE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CLOSE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CLOSE"
        }

        return NSLocalizedString("CLOSE", bundle: bundle, comment: "")
      }

      /// en translation: CREATE AN ACCOUNT
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func createanaccounT(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CREATE AN ACCOUNT", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CREATE AN ACCOUNT"
        }

        return NSLocalizedString("CREATE AN ACCOUNT", bundle: bundle, comment: "")
      }

      /// en translation: Call Logs Cleared
      ///
      /// Locales: en, tr
      static func callLogsCleared(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Call Logs Cleared", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Call Logs Cleared"
        }

        return NSLocalizedString("Call Logs Cleared", bundle: bundle, comment: "")
      }

      /// en translation: Calling
      ///
      /// Locales: en, tr
      static func calling(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Calling", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Calling"
        }

        return NSLocalizedString("Calling", bundle: bundle, comment: "")
      }

      /// en translation: Camera
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Camera", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Camera"
        }

        return NSLocalizedString("Camera", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel"
        }

        return NSLocalizedString("Cancel", bundle: bundle, comment: "")
      }

      /// en translation: Category
      ///
      /// Locales: en, tr
      static func category(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Category", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Category"
        }

        return NSLocalizedString("Category", bundle: bundle, comment: "")
      }

      /// en translation: Change Password
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func changePassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Change Password"
        }

        return NSLocalizedString("Change Password", bundle: bundle, comment: "")
      }

      /// en translation: Change your password
      ///
      /// Locales: en, tr
      static func changeYourPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change your password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Change your password"
        }

        return NSLocalizedString("Change your password", bundle: bundle, comment: "")
      }

      /// en translation: Chats
      ///
      /// Locales: en, tr
      static func chats(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Chats", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Chats"
        }

        return NSLocalizedString("Chats", bundle: bundle, comment: "")
      }

      /// en translation: Chose Image
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func choseImage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Chose image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Chose image"
        }

        return NSLocalizedString("Chose image", bundle: bundle, comment: "")
      }

      /// en translation: Clear Chat
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func clearChat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Clear Chat", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Clear Chat"
        }

        return NSLocalizedString("Clear Chat", bundle: bundle, comment: "")
      }

      /// en translation: Close
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func close(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Close"
        }

        return NSLocalizedString("Close", bundle: bundle, comment: "")
      }

      /// en translation: Comment
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func comment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Comment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Comment"
        }

        return NSLocalizedString("Comment", bundle: bundle, comment: "")
      }

      /// en translation: Commented on my post
      ///
      /// Locales: en, tr
      static func commentedOnMyPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Commented on my post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Commented on my post"
        }

        return NSLocalizedString("Commented on my post", bundle: bundle, comment: "")
      }

      /// en translation: Comments
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func comments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Comments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Comments"
        }

        return NSLocalizedString("Comments", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Password
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func confirmPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Confirm Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Confirm Password"
        }

        return NSLocalizedString("Confirm Password", bundle: bundle, comment: "")
      }

      /// en translation: Continue with Facebook
      ///
      /// Locales: en, tr
      static func continueWithFacebook(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Continue with Facebook", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Continue with Facebook"
        }

        return NSLocalizedString("Continue with Facebook", bundle: bundle, comment: "")
      }

      /// en translation: Conversation Tones
      ///
      /// Locales: en
      static func conversationTones(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Conversation Tones", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Conversation Tones"
        }

        return NSLocalizedString("Conversation Tones", bundle: bundle, comment: "")
      }

      /// en translation: Copied
      ///
      /// Locales: en, tr
      static func copied(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Copied", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Copied"
        }

        return NSLocalizedString("Copied", bundle: bundle, comment: "")
      }

      /// en translation: Copy
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func copy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Copy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Copy"
        }

        return NSLocalizedString("Copy", bundle: bundle, comment: "")
      }

      /// en translation: Copy Link to profile
      ///
      /// Locales: en, tr
      static func copyLinkToProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Copy Link to profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Copy Link to profile"
        }

        return NSLocalizedString("Copy Link to profile", bundle: bundle, comment: "")
      }

      /// en translation: Create
      ///
      /// Locales: en, tr
      static func create(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Create", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Create"
        }

        return NSLocalizedString("Create", bundle: bundle, comment: "")
      }

      /// en translation: Credit Card
      ///
      /// Locales: en, tr
      static func creditCard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Credit Card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Credit Card"
        }

        return NSLocalizedString("Credit Card", bundle: bundle, comment: "")
      }

      /// en translation: Current Password
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func currentPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Current Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Current Password"
        }

        return NSLocalizedString("Current Password", bundle: bundle, comment: "")
      }

      /// en translation: DON'T HAVE AN ACCOUNT?
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func donthaveanaccounT(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DON'T HAVE AN ACCOUNT?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DON'T HAVE AN ACCOUNT?"
        }

        return NSLocalizedString("DON'T HAVE AN ACCOUNT?", bundle: bundle, comment: "")
      }

      /// en translation: Dark mode
      ///
      /// Locales: en, tr
      static func darkMode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Dark mode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Dark mode"
        }

        return NSLocalizedString("Dark mode", bundle: bundle, comment: "")
      }

      /// en translation: Decline
      ///
      /// Locales: en, tr
      static func decline(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Decline", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Decline"
        }

        return NSLocalizedString("Decline", bundle: bundle, comment: "")
      }

      /// en translation: Delete
      ///
      /// Locales: en, tr
      static func delete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delete"
        }

        return NSLocalizedString("Delete", bundle: bundle, comment: "")
      }

      /// en translation: Delete Account
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func deleteAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delete Account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delete Account"
        }

        return NSLocalizedString("Delete Account", bundle: bundle, comment: "")
      }

      /// en translation: Delete Group
      ///
      /// Locales: en, tr
      static func deleteGroup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delete Group", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delete Group"
        }

        return NSLocalizedString("Delete Group", bundle: bundle, comment: "")
      }

      /// en translation: Delete Post
      ///
      /// Locales: en, tr
      static func deletePost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delete Post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delete Post"
        }

        return NSLocalizedString("Delete Post", bundle: bundle, comment: "")
      }

      /// en translation: Delete This Post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func deleteThisPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delete This Post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delete This Post"
        }

        return NSLocalizedString("Delete This Post", bundle: bundle, comment: "")
      }

      /// en translation: Disable
      ///
      /// Locales: en, tr
      static func disable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Disable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Disable"
        }

        return NSLocalizedString("Disable", bundle: bundle, comment: "")
      }

      /// en translation: Display
      ///
      /// Locales: en, tr
      static func display(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Display", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Display"
        }

        return NSLocalizedString("Display", bundle: bundle, comment: "")
      }

      /// en translation: Display your app language
      ///
      /// Locales: en, tr
      static func displayYourAppLanguage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Display your app language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Display your app language"
        }

        return NSLocalizedString("Display your app language", bundle: bundle, comment: "")
      }

      /// en translation: Downloads
      ///
      /// Locales: en, tr
      static func downloads(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Downloads", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Downloads"
        }

        return NSLocalizedString("Downloads", bundle: bundle, comment: "")
      }

      /// en translation: Earn upto $0.10 for each user your refer to us!
      ///
      /// Locales: en, tr
      static func earnUpto010ForEachUserYourReferToUs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Earn upto $0.10 for each user your refer to us!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Earn upto $0.10 for each user your refer to us!"
        }

        return NSLocalizedString("Earn upto $0.10 for each user your refer to us!", bundle: bundle, comment: "")
      }

      /// en translation: Edit Post
      ///
      /// Locales: en, tr
      static func editPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit Post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Edit Post"
        }

        return NSLocalizedString("Edit Post", bundle: bundle, comment: "")
      }

      /// en translation: Edit Profile
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func editProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Edit Profile"
        }

        return NSLocalizedString("Edit Profile", bundle: bundle, comment: "")
      }

      /// en translation: Edit Profile and avatar
      ///
      /// Locales: en, tr
      static func editProfileAndAvatar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit Profile and avatar", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Edit Profile and avatar"
        }

        return NSLocalizedString("Edit Profile and avatar", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Email"
        }

        return NSLocalizedString("Email", bundle: bundle, comment: "")
      }

      /// en translation: Email is badly formatted.
      ///
      /// Locales: en, tr
      static func emailIsBadlyFormatted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Email is badly formatted.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Email is badly formatted."
        }

        return NSLocalizedString("Email is badly formatted.", bundle: bundle, comment: "")
      }

      /// en translation: Email o username
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func emailOrUsername(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Email or Username", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Email or Username"
        }

        return NSLocalizedString("Email or Username", bundle: bundle, comment: "")
      }

      /// en translation: Embed Video
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func embedVideo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Embed Video", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Embed Video"
        }

        return NSLocalizedString("Embed Video", bundle: bundle, comment: "")
      }

      /// en translation: Enable
      ///
      /// Locales: en, tr
      static func enable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enable"
        }

        return NSLocalizedString("Enable", bundle: bundle, comment: "")
      }

      /// en translation: Enter BusinessName
      ///
      /// Locales: en, tr
      static func enterBusinessName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter BusinessName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter BusinessName"
        }

        return NSLocalizedString("Enter BusinessName", bundle: bundle, comment: "")
      }

      /// en translation: Enter Category name
      ///
      /// Locales: en, tr
      static func enterCategoryName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Category name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Category name"
        }

        return NSLocalizedString("Enter Category name", bundle: bundle, comment: "")
      }

      /// en translation: Enter Email
      ///
      /// Locales: en, tr
      static func enterEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Email"
        }

        return NSLocalizedString("Enter Email", bundle: bundle, comment: "")
      }

      /// en translation: Enter License name
      ///
      /// Locales: en, tr
      static func enterLicenseName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter License name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter License name"
        }

        return NSLocalizedString("Enter License name", bundle: bundle, comment: "")
      }

      /// en translation: Enter Name
      ///
      /// Locales: en, tr
      static func enterName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Name"
        }

        return NSLocalizedString("Enter Name", bundle: bundle, comment: "")
      }

      /// en translation: Enter PhoneNumber
      ///
      /// Locales: en, tr
      static func enterPhoneNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter PhoneNumber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter PhoneNumber"
        }

        return NSLocalizedString("Enter PhoneNumber", bundle: bundle, comment: "")
      }

      /// en translation: Enter Price
      ///
      /// Locales: en, tr
      static func enterPrice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Price", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Price"
        }

        return NSLocalizedString("Enter Price", bundle: bundle, comment: "")
      }

      /// en translation: Enter Tag
      ///
      /// Locales: en, tr
      static func enterTag(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Tag", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Tag"
        }

        return NSLocalizedString("Enter Tag", bundle: bundle, comment: "")
      }

      /// en translation: Enter Title
      ///
      /// Locales: en, tr
      static func enterTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Title"
        }

        return NSLocalizedString("Enter Title", bundle: bundle, comment: "")
      }

      /// en translation: Enter Website
      ///
      /// Locales: en, tr
      static func enterWebsite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Website", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Website"
        }

        return NSLocalizedString("Enter Website", bundle: bundle, comment: "")
      }

      /// en translation: Enter Your Information!
      ///
      /// Locales: en, tr
      static func enterYourInformation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Your Information!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Your Information!"
        }

        return NSLocalizedString("Enter Your Information!", bundle: bundle, comment: "")
      }

      /// en translation: Enter message
      ///
      /// Locales: en, tr
      static func enterMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter message"
        }

        return NSLocalizedString("Enter message", bundle: bundle, comment: "")
      }

      /// en translation: Exit Group
      ///
      /// Locales: en, tr
      static func exitGroup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Exit Group", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Exit Group"
        }

        return NSLocalizedString("Exit Group", bundle: bundle, comment: "")
      }

      /// en translation: Explore
      ///
      /// Locales: en, tr
      static func explore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Explore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Explore"
        }

        return NSLocalizedString("Explore", bundle: bundle, comment: "")
      }

      /// en translation: Explore Everything
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func title1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Title1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Title1"
        }

        return NSLocalizedString("Title1", bundle: bundle, comment: "")
      }

      /// en translation: Explore Posts
      ///
      /// Locales: en, tr
      static func explorePosts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Explore Posts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Explore Posts"
        }

        return NSLocalizedString("Explore Posts", bundle: bundle, comment: "")
      }

      /// en translation: FEMALE
      ///
      /// Locales: en, tr
      static func famalE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FAMALE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "FAMALE"
        }

        return NSLocalizedString("FAMALE", bundle: bundle, comment: "")
      }

      /// en translation: Facebook
      ///
      /// Locales: en, tr
      static func facebook(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Facebook", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Facebook"
        }

        return NSLocalizedString("Facebook", bundle: bundle, comment: "")
      }

      /// en translation: Favourite
      ///
      /// Locales: en, tr
      static func favourite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Favourite", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Favourite"
        }

        return NSLocalizedString("Favourite", bundle: bundle, comment: "")
      }

      /// en translation: Featured Posts
      ///
      /// Locales: en, tr
      static func featuredPosts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Featured Posts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Featured Posts"
        }

        return NSLocalizedString("Featured Posts", bundle: bundle, comment: "")
      }

      /// en translation: Female
      ///
      /// Locales: en, tr
      static func female(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Female", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Female"
        }

        return NSLocalizedString("Female", bundle: bundle, comment: "")
      }

      /// en translation: Filter
      ///
      /// Locales: en, tr
      static func filter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Filter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Filter"
        }

        return NSLocalizedString("Filter", bundle: bundle, comment: "")
      }

      /// en translation: Find all invite request
      ///
      /// Locales: en, tr
      static func findAllInviteRequest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Find all invite request", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Find all invite request"
        }

        return NSLocalizedString("Find all invite request", bundle: bundle, comment: "")
      }

      /// en translation: First Name
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func firstName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("First Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "First Name"
        }

        return NSLocalizedString("First Name", bundle: bundle, comment: "")
      }

      /// en translation: Follow Request
      ///
      /// Locales: en, tr
      static func followRequest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Follow Request", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Follow Request"
        }

        return NSLocalizedString("Follow Request", bundle: bundle, comment: "")
      }

      /// en translation: Followed me
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func followedMe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Followed me", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Followed me"
        }

        return NSLocalizedString("Followed me", bundle: bundle, comment: "")
      }

      /// en translation: Followers
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func followers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Followers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Followers"
        }

        return NSLocalizedString("Followers", bundle: bundle, comment: "")
      }

      /// en translation: Forgot Password
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func forgotPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Forgot Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Forgot Password"
        }

        return NSLocalizedString("Forgot Password", bundle: bundle, comment: "")
      }

      /// en translation: Forgot your password?
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func forgotYourPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Forgot your password?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Forgot your password?"
        }

        return NSLocalizedString("Forgot your password?", bundle: bundle, comment: "")
      }

      /// en translation: Funding
      ///
      /// Locales: en, tr
      static func funding(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Funding", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Funding"
        }

        return NSLocalizedString("Funding", bundle: bundle, comment: "")
      }

      /// en translation: Funding Request
      ///
      /// Locales: en, tr
      static func fundingRequest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Funding Request", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Funding Request"
        }

        return NSLocalizedString("Funding Request", bundle: bundle, comment: "")
      }

      /// en translation: GIF
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func giF(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GIF", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "GIF"
        }

        return NSLocalizedString("GIF", bundle: bundle, comment: "")
      }

      /// en translation: Gallery
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func gallery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gallery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Gallery"
        }

        return NSLocalizedString("Gallery", bundle: bundle, comment: "")
      }

      /// en translation: Gender
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func gender(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gender", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Gender"
        }

        return NSLocalizedString("Gender", bundle: bundle, comment: "")
      }

      /// en translation: General
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func general(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("General", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "General"
        }

        return NSLocalizedString("General", bundle: bundle, comment: "")
      }

      /// en translation: Get notifications when you receive messages
      ///
      /// Locales: en, tr
      static func getNotificationsWhenYouReceiveMessages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Get notifications when you receive messages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Get notifications when you receive messages"
        }

        return NSLocalizedString("Get notifications when you receive messages", bundle: bundle, comment: "")
      }

      /// en translation: Go to Post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func goToPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Go to Post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Go to Post"
        }

        return NSLocalizedString("Go to Post", bundle: bundle, comment: "")
      }

      /// en translation: Group Name
      ///
      /// Locales: en, tr
      static func groupName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Group Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Group Name"
        }

        return NSLocalizedString("Group Name", bundle: bundle, comment: "")
      }

      /// en translation: Group Request
      ///
      /// Locales: en, tr
      static func groupRequest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Group Request", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Group Request"
        }

        return NSLocalizedString("Group Request", bundle: bundle, comment: "")
      }

      /// en translation: HASHTAGS
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func hashtagS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HASHTAGS", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "HASHTAGS"
        }

        return NSLocalizedString("HASHTAGS", bundle: bundle, comment: "")
      }

      /// en translation: Hang Up
      ///
      /// Locales: en, tr
      static func hangUp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hang Up", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Hang Up"
        }

        return NSLocalizedString("Hang Up", bundle: bundle, comment: "")
      }

      /// en translation: HashTag
      ///
      /// Locales: en, tr
      static func hashTag(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HashTag", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "HashTag"
        }

        return NSLocalizedString("HashTag", bundle: bundle, comment: "")
      }

      /// en translation: Help
      ///
      /// Locales: en, tr
      static func help(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Help", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Help"
        }

        return NSLocalizedString("Help", bundle: bundle, comment: "")
      }

      /// en translation: Henüz Gönderi Yok!
      ///
      /// Locales: en, tr
      static func noPostYet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No Post Yet!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No Post Yet!"
        }

        return NSLocalizedString("No Post Yet!", bundle: bundle, comment: "")
      }

      /// en translation: Henüz yorum yok
      ///
      /// Locales: en, tr
      static func noCommentsYet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No Comments Yet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No Comments Yet"
        }

        return NSLocalizedString("No Comments Yet", bundle: bundle, comment: "")
      }

      /// en translation: Hi! There I'm using Pixel Photo
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func hiThereIMUsingPixelPhoto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hi! There I'm using Pixel Photo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Hi! There I'm using Pixel Photo"
        }

        return NSLocalizedString("Hi! There I'm using Pixel Photo", bundle: bundle, comment: "")
      }

      /// en translation: Hi! there i am using WoWonder Messenger
      ///
      /// Locales: en, tr
      static func hiThereIAmUsingWoWonderMessenger(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hi! there i am using WoWonder Messenger", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Hi! there i am using WoWonder Messenger"
        }

        return NSLocalizedString("Hi! there i am using WoWonder Messenger", bundle: bundle, comment: "")
      }

      /// en translation: If you forgot your password, you can reset it from here.
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func ifYouForgotYourPasswordYouCanResetItFromHere(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("If you forgot your password, you can reset it from here.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "If you forgot your password, you can reset it from here."
        }

        return NSLocalizedString("If you forgot your password, you can reset it from here.", bundle: bundle, comment: "")
      }

      /// en translation: Image
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func image(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Image"
        }

        return NSLocalizedString("Image", bundle: bundle, comment: "")
      }

      /// en translation: Image Gallery
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func imageGallery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Image Gallery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Image Gallery"
        }

        return NSLocalizedString("Image Gallery", bundle: bundle, comment: "")
      }

      /// en translation: Image Type
      ///
      /// Locales: en, tr
      static func imageType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Image Type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Image Type"
        }

        return NSLocalizedString("Image Type", bundle: bundle, comment: "")
      }

      /// en translation: Immediately save images or video to check them later anytime and in every place
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func desc3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Desc3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Desc3"
        }

        return NSLocalizedString("Desc3", bundle: bundle, comment: "")
      }

      /// en translation: Internet Error
      ///
      /// Locales: en, tr
      static func internetError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Internet Error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Internet Error"
        }

        return NSLocalizedString("Internet Error", bundle: bundle, comment: "")
      }

      /// en translation: Invite Friends
      ///
      /// Locales: en, tr
      static func inviteFriends(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Invite Friends", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Invite Friends"
        }

        return NSLocalizedString("Invite Friends", bundle: bundle, comment: "")
      }

      /// en translation: Just like the photos wich you found interesting and become a follower of fampus people
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func desc2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Desc2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Desc2"
        }

        return NSLocalizedString("Desc2", bundle: bundle, comment: "")
      }

      /// en translation: Kullanıcı Verisi yok
      ///
      /// Locales: en, tr
      static func thereIsNoUserData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("There is no UserData", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "There is no UserData"
        }

        return NSLocalizedString("There is no UserData", bundle: bundle, comment: "")
      }

      /// en translation: Kullanıcı yok
      ///
      /// Locales: en, tr
      static func thereAreNoUsers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("There are no users", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "There are no users"
        }

        return NSLocalizedString("There are no users", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, tr
      static func label(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Label"
        }

        return NSLocalizedString("Label", bundle: bundle, comment: "")
      }

      /// en translation: Language
      ///
      /// Locales: en, tr
      static func language(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Language"
        }

        return NSLocalizedString("Language", bundle: bundle, comment: "")
      }

      /// en translation: Last Name
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func lastName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Last Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Last Name"
        }

        return NSLocalizedString("Last Name", bundle: bundle, comment: "")
      }

      /// en translation: License Type
      ///
      /// Locales: en, tr
      static func licenseType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("License Type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "License Type"
        }

        return NSLocalizedString("License Type", bundle: bundle, comment: "")
      }

      /// en translation: Light mode
      ///
      /// Locales: en, tr
      static func lightMode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Light mode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Light mode"
        }

        return NSLocalizedString("Light mode", bundle: bundle, comment: "")
      }

      /// en translation: Like
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func like(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Like", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Like"
        }

        return NSLocalizedString("Like", bundle: bundle, comment: "")
      }

      /// en translation: Liked & Follow
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func title2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Title2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Title2"
        }

        return NSLocalizedString("Title2", bundle: bundle, comment: "")
      }

      /// en translation: Liked my post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func likedMyPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Liked my post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Liked my post"
        }

        return NSLocalizedString("Liked my post", bundle: bundle, comment: "")
      }

      /// en translation: Likes
      ///
      /// Locales: en, tr
      static func likes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Likes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Likes"
        }

        return NSLocalizedString("Likes", bundle: bundle, comment: "")
      }

      /// en translation: Loading...
      ///
      /// Locales: en, tr
      static func loading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Loading...", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Loading..."
        }

        return NSLocalizedString("Loading...", bundle: bundle, comment: "")
      }

      /// en translation: Location
      ///
      /// Locales: en, tr
      static func location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Location"
        }

        return NSLocalizedString("Location", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: en, tr
      static func login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login"
        }

        return NSLocalizedString("Login", bundle: bundle, comment: "")
      }

      /// en translation: Logout
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Logout"
        }

        return NSLocalizedString("Logout", bundle: bundle, comment: "")
      }

      /// en translation: Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.
      ///
      /// Locales: en, tr
      static func loremIpsumDolorSitErElitLametConsectetaurCilliumAdipisicingPecuSedDoEiusmodTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationUllamcoLaborisNisiUtAliquipExEaCommodoConsequatDuisAuteIrureDolorInReprehenderitInVoluptateVelitEsseCillumDoloreEuFugiatNullaPariaturExcepteurSintOccaecatCupidatatNonProidentSuntInCulpaQuiOfficiaDeseruntMollitAnimIdEstLaborumNamLiberTeConscientToFactorTumPoenLegumOdioqueCiviuda(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda."
        }

        return NSLocalizedString("Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.", bundle: bundle, comment: "")
      }

      /// en translation: MALE
      ///
      /// Locales: en, tr
      static func malE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MALE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "MALE"
        }

        return NSLocalizedString("MALE", bundle: bundle, comment: "")
      }

      /// en translation: Male
      ///
      /// Locales: en, tr
      static func male(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Male", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Male"
        }

        return NSLocalizedString("Male", bundle: bundle, comment: "")
      }

      /// en translation: Manage Sessions
      ///
      /// Locales: en, tr
      static func manageSessions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Manage Sessions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Manage Sessions"
        }

        return NSLocalizedString("Manage Sessions", bundle: bundle, comment: "")
      }

      /// en translation: Mention Contact
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func mentionContact(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mention Contact", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mention Contact"
        }

        return NSLocalizedString("Mention Contact", bundle: bundle, comment: "")
      }

      /// en translation: Mentioned Contact
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func mentionedContact(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mentioned Contact", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mentioned Contact"
        }

        return NSLocalizedString("Mentioned Contact", bundle: bundle, comment: "")
      }

      /// en translation: Mentioned me
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func mentionedMe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mentioned me", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mentioned me"
        }

        return NSLocalizedString("Mentioned me", bundle: bundle, comment: "")
      }

      /// en translation: Message
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Message"
        }

        return NSLocalizedString("Message", bundle: bundle, comment: "")
      }

      /// en translation: Message Notification
      ///
      /// Locales: en, tr
      static func messageNotification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Message Notification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Message Notification"
        }

        return NSLocalizedString("Message Notification", bundle: bundle, comment: "")
      }

      /// en translation: Message Notifications
      ///
      /// Locales: en, tr
      static func messageNotifications(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Message Notifications", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Message Notifications"
        }

        return NSLocalizedString("Message Notifications", bundle: bundle, comment: "")
      }

      /// en translation: Mobile
      ///
      /// Locales: en, tr
      static func mobile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mobile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mobile"
        }

        return NSLocalizedString("Mobile", bundle: bundle, comment: "")
      }

      /// en translation: Mute
      ///
      /// Locales: en, tr
      static func mute(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mute", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mute"
        }

        return NSLocalizedString("Mute", bundle: bundle, comment: "")
      }

      /// en translation: My Account
      ///
      /// Locales: en, tr
      static func myAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Account"
        }

        return NSLocalizedString("My Account", bundle: bundle, comment: "")
      }

      /// en translation: My Affilities
      ///
      /// Locales: en, tr
      static func myAffilities(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Affilities", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Affilities"
        }

        return NSLocalizedString("My Affilities", bundle: bundle, comment: "")
      }

      /// en translation: My Profile
      ///
      /// Locales: en, tr
      static func myProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Profile"
        }

        return NSLocalizedString("My Profile", bundle: bundle, comment: "")
      }

      /// en translation: MyFriend
      ///
      /// Locales: en, tr
      static func myFriend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MyFriend", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "MyFriend"
        }

        return NSLocalizedString("MyFriend", bundle: bundle, comment: "")
      }

      /// en translation: NO
      ///
      /// Locales: en, tr
      static func nO(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NO", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NO"
        }

        return NSLocalizedString("NO", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: en, tr
      static func name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Name"
        }

        return NSLocalizedString("Name", bundle: bundle, comment: "")
      }

      /// en translation: New Password
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func newPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("New Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "New Password"
        }

        return NSLocalizedString("New Password", bundle: bundle, comment: "")
      }

      /// en translation: Night Mode
      ///
      /// Locales: en, tr
      static func nightMode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Night Mode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Night Mode"
        }

        return NSLocalizedString("Night Mode", bundle: bundle, comment: "")
      }

      /// en translation: No block users to be displayed
      ///
      /// Locales: en, tr
      static func noBlockUsersToBeDisplayed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No block users to be displayed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No block users to be displayed"
        }

        return NSLocalizedString("No block users to be displayed", bundle: bundle, comment: "")
      }

      /// en translation: No body
      ///
      /// Locales: en, tr
      static func noBody(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No body"
        }

        return NSLocalizedString("No body", bundle: bundle, comment: "")
      }

      /// en translation: No more Messages
      ///
      /// Locales: en, tr
      static func noMoreMessages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No more Messages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No more Messages"
        }

        return NSLocalizedString("No more Messages", bundle: bundle, comment: "")
      }

      /// en translation: Nobody
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func nobody(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Nobody", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Nobody"
        }

        return NSLocalizedString("Nobody", bundle: bundle, comment: "")
      }

      /// en translation: Notification
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func notification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notification"
        }

        return NSLocalizedString("Notification", bundle: bundle, comment: "")
      }

      /// en translation: Notification Popup
      ///
      /// Locales: en, tr
      static func notificationPopup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notification Popup", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notification Popup"
        }

        return NSLocalizedString("Notification Popup", bundle: bundle, comment: "")
      }

      /// en translation: Notification Setting
      ///
      /// Locales: en, tr
      static func notificationSetting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notification Setting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notification Setting"
        }

        return NSLocalizedString("Notification Setting", bundle: bundle, comment: "")
      }

      /// en translation: OFFLINE
      ///
      /// Locales: en, tr
      static func offlinE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OFFLINE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OFFLINE"
        }

        return NSLocalizedString("OFFLINE", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: en, tr
      static func oK(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OK", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OK"
        }

        return NSLocalizedString("OK", bundle: bundle, comment: "")
      }

      /// en translation: ONLINE
      ///
      /// Locales: en, tr
      static func onlinE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ONLINE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ONLINE"
        }

        return NSLocalizedString("ONLINE", bundle: bundle, comment: "")
      }

      /// en translation: Okay
      ///
      /// Locales: en, tr
      static func okay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Okay", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Okay"
        }

        return NSLocalizedString("Okay", bundle: bundle, comment: "")
      }

      /// en translation: Option
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func option(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Option", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Option"
        }

        return NSLocalizedString("Option", bundle: bundle, comment: "")
      }

      /// en translation: Others
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func others(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Others", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Others"
        }

        return NSLocalizedString("Others", bundle: bundle, comment: "")
      }

      /// en translation: PRIVACY
      ///
      /// Locales: en, tr
      static func privacY(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PRIVACY", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PRIVACY"
        }

        return NSLocalizedString("PRIVACY", bundle: bundle, comment: "")
      }

      /// en translation: Passport
      ///
      /// Locales: en, tr
      static func passport(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Passport", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Passport"
        }

        return NSLocalizedString("Passport", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password"
        }

        return NSLocalizedString("Password", bundle: bundle, comment: "")
      }

      /// en translation: Password do not match.
      ///
      /// Locales: en, tr
      static func passwordDoNotMatch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password do not match.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password do not match."
        }

        return NSLocalizedString("Password do not match.", bundle: bundle, comment: "")
      }

      /// en translation: Password does not match. Try again!
      ///
      /// Locales: en, tr
      static func passwordDoesNotMatchTryAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password does not match. Try again!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password does not match. Try again!"
        }

        return NSLocalizedString("Password does not match. Try again!", bundle: bundle, comment: "")
      }

      /// en translation: Password has been changed!
      ///
      /// Locales: en, tr
      static func passwordHasBeenChanged(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password has been changed!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password has been changed!"
        }

        return NSLocalizedString("Password has been changed!", bundle: bundle, comment: "")
      }

      /// en translation: PayPal E-mail
      ///
      /// Locales: en, tr
      static func payPalEMail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PayPal E-mail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PayPal E-mail"
        }

        return NSLocalizedString("PayPal E-mail", bundle: bundle, comment: "")
      }

      /// en translation: Paypal
      ///
      /// Locales: en, tr
      static func payPal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PayPal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PayPal"
        }

        return NSLocalizedString("PayPal", bundle: bundle, comment: "")
      }

      /// en translation: Phone
      ///
      /// Locales: en, tr
      static func phone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Phone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Phone"
        }

        return NSLocalizedString("Phone", bundle: bundle, comment: "")
      }

      /// en translation: Phone Number
      ///
      /// Locales: en, tr
      static func phoneNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Phone Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Phone Number"
        }

        return NSLocalizedString("Phone Number", bundle: bundle, comment: "")
      }

      /// en translation: Pixel Photo
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func appName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("App Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "App Name"
        }

        return NSLocalizedString("App Name", bundle: bundle, comment: "")
      }

      /// en translation: Play sound for incoming and outgoing messages
      ///
      /// Locales: en, tr
      static func playSoundForIncomingAndOutgoingMessages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Play sound for incoming and outgoing messages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Play sound for incoming and outgoing messages"
        }

        return NSLocalizedString("Play sound for incoming and outgoing messages", bundle: bundle, comment: "")
      }

      /// en translation: Play sounds for incoming and outgoing messages
      ///
      /// Locales: en, tr
      static func playSoundsForIncomingAndOutgoingMessages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Play sounds for incoming and outgoing messages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Play sounds for incoming and outgoing messages"
        }

        return NSLocalizedString("Play sounds for incoming and outgoing messages", bundle: bundle, comment: "")
      }

      /// en translation: Please , confirm checkbox to process this action
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func checkDelete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Check Delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Check Delete"
        }

        return NSLocalizedString("Check Delete", bundle: bundle, comment: "")
      }

      /// en translation: Please Enter Paypal Email
      ///
      /// Locales: en, tr
      static func pleaseEnterPaypalEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please Enter Paypal Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please Enter Paypal Email"
        }

        return NSLocalizedString("Please Enter Paypal Email", bundle: bundle, comment: "")
      }

      /// en translation: Please Enter amount
      ///
      /// Locales: en, tr
      static func pleaseEnterAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please Enter amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please Enter amount"
        }

        return NSLocalizedString("Please Enter amount", bundle: bundle, comment: "")
      }

      /// en translation: Please Select a recent Picture of your Passport or id
      ///
      /// Locales: en, tr
      static func pleaseSelectARecentPictureOfYourPassportOrId(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please Select a recent Picture of your Passport or id", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please Select a recent Picture of your Passport or id"
        }

        return NSLocalizedString("Please Select a recent Picture of your Passport or id", bundle: bundle, comment: "")
      }

      /// en translation: Please add Photo image
      ///
      /// Locales: en, tr
      static func pleaseAddPhotoImage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please add Photo image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please add Photo image"
        }

        return NSLocalizedString("Please add Photo image", bundle: bundle, comment: "")
      }

      /// en translation: Please add passport image
      ///
      /// Locales: en, tr
      static func pleaseAddPassportImage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please add passport image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please add passport image"
        }

        return NSLocalizedString("Please add passport image", bundle: bundle, comment: "")
      }

      /// en translation: Please enter confirm password.
      ///
      /// Locales: en, tr
      static func pleaseEnterConfirmPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter confirm password.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter confirm password."
        }

        return NSLocalizedString("Please enter confirm password.", bundle: bundle, comment: "")
      }

      /// en translation: Please enter current confirm password.
      ///
      /// Locales: en, tr
      static func pleaseEnterCurrentConfirmPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter current confirm password.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter current confirm password."
        }

        return NSLocalizedString("Please enter current confirm password.", bundle: bundle, comment: "")
      }

      /// en translation: Please enter current new password.
      ///
      /// Locales: en, tr
      static func pleaseEnterCurrentNewPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter current new password.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter current new password."
        }

        return NSLocalizedString("Please enter current new password.", bundle: bundle, comment: "")
      }

      /// en translation: Please enter current password.
      ///
      /// Locales: en, tr
      static func pleaseEnterCurrentPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter current password.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter current password."
        }

        return NSLocalizedString("Please enter current password.", bundle: bundle, comment: "")
      }

      /// en translation: Please enter email.
      ///
      /// Locales: en, tr
      static func pleaseEnterEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter email.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter email."
        }

        return NSLocalizedString("Please enter email.", bundle: bundle, comment: "")
      }

      /// en translation: Please enter password.
      ///
      /// Locales: en, tr
      static func pleaseEnterPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter password.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter password."
        }

        return NSLocalizedString("Please enter password.", bundle: bundle, comment: "")
      }

      /// en translation: Please enter username.
      ///
      /// Locales: en, tr
      static func pleaseEnterUsername(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter username.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter username."
        }

        return NSLocalizedString("Please enter username.", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your email address. We will send you a link to reset password.
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func pleaseEnterYourEmailAddressWeWillSendYouALinkToResetPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter your email address. We will send you a link to reset password.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter your email address. We will send you a link to reset password."
        }

        return NSLocalizedString("Please enter your email address. We will send you a link to reset password.", bundle: bundle, comment: "")
      }

      /// en translation: Please see my post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func pleaseSeeMyPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please see my post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please see my post"
        }

        return NSLocalizedString("Please see my post", bundle: bundle, comment: "")
      }

      /// en translation: Please select atleast one media.
      ///
      /// Locales: en, tr
      static func pleaseSelectAtleastOneMedia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select atleast one media.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select atleast one media."
        }

        return NSLocalizedString("Please select atleast one media.", bundle: bundle, comment: "")
      }

      /// en translation: Post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func post(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Post"
        }

        return NSLocalizedString("Post", bundle: bundle, comment: "")
      }

      /// en translation: Posts
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func posts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Posts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Posts"
        }

        return NSLocalizedString("Posts", bundle: bundle, comment: "")
      }

      /// en translation: Price
      ///
      /// Locales: en, tr
      static func price(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Price", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Price"
        }

        return NSLocalizedString("Price", bundle: bundle, comment: "")
      }

      /// en translation: Price Max
      ///
      /// Locales: en, tr
      static func priceMax(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Price Max", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Price Max"
        }

        return NSLocalizedString("Price Max", bundle: bundle, comment: "")
      }

      /// en translation: Price Min
      ///
      /// Locales: en, tr
      static func priceMin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Price Min", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Price Min"
        }

        return NSLocalizedString("Price Min", bundle: bundle, comment: "")
      }

      /// en translation: Privacy
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func privacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Privacy"
        }

        return NSLocalizedString("Privacy", bundle: bundle, comment: "")
      }

      /// en translation: Profile
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func profile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile"
        }

        return NSLocalizedString("Profile", bundle: bundle, comment: "")
      }

      /// en translation: Promoted
      ///
      /// Locales: en, tr
      static func promoted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Promoted", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Promoted"
        }

        return NSLocalizedString("Promoted", bundle: bundle, comment: "")
      }

      /// en translation: REQUEST WITHDRAWAL
      ///
      /// Locales: en, tr
      static func requestwithdrawaL(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("REQUEST WITHDRAWAL", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "REQUEST WITHDRAWAL"
        }

        return NSLocalizedString("REQUEST WITHDRAWAL", bundle: bundle, comment: "")
      }

      /// en translation: Received Notification when some one
      ///
      /// Locales: en, tr
      static func receivedNotificationWhenSomeOne(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Received Notification when some one", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Received Notification when some one"
        }

        return NSLocalizedString("Received Notification when some one", bundle: bundle, comment: "")
      }

      /// en translation: Refresh
      ///
      /// Locales: en, tr
      static func refresh(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Refresh", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Refresh"
        }

        return NSLocalizedString("Refresh", bundle: bundle, comment: "")
      }

      /// en translation: Register
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func register(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Register"
        }

        return NSLocalizedString("Register", bundle: bundle, comment: "")
      }

      /// en translation: Remove Account
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func removeAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Remove Account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Remove Account"
        }

        return NSLocalizedString("Remove Account", bundle: bundle, comment: "")
      }

      /// en translation: Repeat Password
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func repeatPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repeat Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repeat Password"
        }

        return NSLocalizedString("Repeat Password", bundle: bundle, comment: "")
      }

      /// en translation: Report
      ///
      /// Locales: en, tr
      static func report(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Report", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Report"
        }

        return NSLocalizedString("Report", bundle: bundle, comment: "")
      }

      /// en translation: Report a Problem
      ///
      /// Locales: en, tr
      static func reportAProblem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Report a Problem", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Report a Problem"
        }

        return NSLocalizedString("Report a Problem", bundle: bundle, comment: "")
      }

      /// en translation: Report this Post
      ///
      /// Locales: en, tr
      static func reportThisPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Report this Post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Report this Post"
        }

        return NSLocalizedString("Report this Post", bundle: bundle, comment: "")
      }

      /// en translation: Request Submit
      ///
      /// Locales: en, tr
      static func requestSubmit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Request Submit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Request Submit"
        }

        return NSLocalizedString("Request Submit", bundle: bundle, comment: "")
      }

      /// en translation: Requested
      ///
      /// Locales: en, tr
      static func requested(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Requested", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Requested"
        }

        return NSLocalizedString("Requested", bundle: bundle, comment: "")
      }

      /// en translation: Reset filter
      ///
      /// Locales: en, tr
      static func resetFilter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Reset filter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Reset filter"
        }

        return NSLocalizedString("Reset filter", bundle: bundle, comment: "")
      }

      /// en translation: SAVE
      ///
      /// Locales: en, tr
      static func savE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SAVE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SAVE"
        }

        return NSLocalizedString("SAVE", bundle: bundle, comment: "")
      }

      /// en translation: SEND
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func senD(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SEND", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SEND"
        }

        return NSLocalizedString("SEND", bundle: bundle, comment: "")
      }

      /// en translation: SIGN IN
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func signiN(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SIGN IN", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SIGN IN"
        }

        return NSLocalizedString("SIGN IN", bundle: bundle, comment: "")
      }

      /// en translation: Sad no result!
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func sadNoResult(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sad no result!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sad no result!"
        }

        return NSLocalizedString("Sad no result!", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it
      static func save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Save"
        }

        return NSLocalizedString("Save", bundle: bundle, comment: "")
      }

      /// en translation: Save & Continue
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func saveContinue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Save & Continue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Save & Continue"
        }

        return NSLocalizedString("Save & Continue", bundle: bundle, comment: "")
      }

      /// en translation: Save & Favorite
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func title3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Title3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Title3"
        }

        return NSLocalizedString("Title3", bundle: bundle, comment: "")
      }

      /// en translation: Search
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search"
        }

        return NSLocalizedString("Search", bundle: bundle, comment: "")
      }

      /// en translation: Search Random
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func searchRandom(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search Random", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search Random"
        }

        return NSLocalizedString("Search Random", bundle: bundle, comment: "")
      }

      /// en translation: Security
      ///
      /// Locales: en, tr
      static func security(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Security", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Security"
        }

        return NSLocalizedString("Security", bundle: bundle, comment: "")
      }

      /// en translation: Select GIF
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func selectGIF(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select GIF", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select GIF"
        }

        return NSLocalizedString("Select GIF", bundle: bundle, comment: "")
      }

      /// en translation: Select Image
      ///
      /// Locales: en, tr
      static func selectImage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select Image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select Image"
        }

        return NSLocalizedString("Select Image", bundle: bundle, comment: "")
      }

      /// en translation: Select from your contact list
      ///
      /// Locales: en, tr
      static func selectFromYourContactList(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select from your contact list", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select from your contact list"
        }

        return NSLocalizedString("Select from your contact list", bundle: bundle, comment: "")
      }

      /// en translation: Select what you want
      ///
      /// Locales: en, tr
      static func selectWhatYouWant(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select what you want", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select what you want"
        }

        return NSLocalizedString("Select what you want", bundle: bundle, comment: "")
      }

      /// en translation: Share
      ///
      /// Locales: en, tr
      static func share(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Share", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Share"
        }

        return NSLocalizedString("Share", bundle: bundle, comment: "")
      }

      /// en translation: Share To
      ///
      /// Locales: en, tr
      static func shareTo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Share To", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Share To"
        }

        return NSLocalizedString("Share To", bundle: bundle, comment: "")
      }

      /// en translation: Share images, video, link, Gifs and Stories with who you love and create popular hashtag
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func desc1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Desc1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Desc1"
        }

        return NSLocalizedString("Desc1", bundle: bundle, comment: "")
      }

      /// en translation: Show all comments
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func showAllComments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Show all comments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Show all comments"
        }

        return NSLocalizedString("Show all comments", bundle: bundle, comment: "")
      }

      /// en translation: Show online users
      ///
      /// Locales: en, tr
      static func showOnlineUsers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Show online users", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Show online users"
        }

        return NSLocalizedString("Show online users", bundle: bundle, comment: "")
      }

      /// en translation: Show when user are online
      ///
      /// Locales: en, tr
      static func showWhenUserAreOnline(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Show when user are online", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Show when user are online"
        }

        return NSLocalizedString("Show when user are online", bundle: bundle, comment: "")
      }

      /// en translation: Show your profile in search engines
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func showYourProfileInSearchEngines(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Show your profile in search engines", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Show your profile in search engines"
        }

        return NSLocalizedString("Show your profile in search engines", bundle: bundle, comment: "")
      }

      /// en translation: Sign Up
      ///
      /// Locales: en, tr
      static func signUp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sign Up", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sign Up"
        }

        return NSLocalizedString("Sign Up", bundle: bundle, comment: "")
      }

      /// en translation: Social Link
      ///
      /// Locales: en, tr
      static func socialLink(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Social Link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Social Link"
        }

        return NSLocalizedString("Social Link", bundle: bundle, comment: "")
      }

      /// en translation: Start to follow you
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func followedYou(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("followed you", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "followed you"
        }

        return NSLocalizedString("followed you", bundle: bundle, comment: "")
      }

      /// en translation: Started Messages
      ///
      /// Locales: en, tr
      static func startedMessages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Started Messages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Started Messages"
        }

        return NSLocalizedString("Started Messages", bundle: bundle, comment: "")
      }

      /// en translation: Store
      ///
      /// Locales: en, tr
      static func store(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Store", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Store"
        }

        return NSLocalizedString("Store", bundle: bundle, comment: "")
      }

      /// en translation: Submit
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func submit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Submit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Submit"
        }

        return NSLocalizedString("Submit", bundle: bundle, comment: "")
      }

      /// en translation: Submit Request
      ///
      /// Locales: en, tr
      static func submitRequest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Submit Request", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Submit Request"
        }

        return NSLocalizedString("Submit Request", bundle: bundle, comment: "")
      }

      /// en translation: Suggested User
      ///
      /// Locales: en, tr
      static func suggestedUser(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Suggested User", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Suggested User"
        }

        return NSLocalizedString("Suggested User", bundle: bundle, comment: "")
      }

      /// en translation: Suggestion for you
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func suggestionForYou(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Suggestion for you", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Suggestion for you"
        }

        return NSLocalizedString("Suggestion for you", bundle: bundle, comment: "")
      }

      /// en translation: Support
      ///
      /// Locales: en, tr
      static func support(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Support", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Support"
        }

        return NSLocalizedString("Support", bundle: bundle, comment: "")
      }

      /// en translation: Switch Camera
      ///
      /// Locales: en, tr
      static func switchCamera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Switch Camera", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Switch Camera"
        }

        return NSLocalizedString("Switch Camera", bundle: bundle, comment: "")
      }

      /// en translation: TERMS AND SERVICES
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func termsandserviceS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TERMS AND SERVICES", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TERMS AND SERVICES"
        }

        return NSLocalizedString("TERMS AND SERVICES", bundle: bundle, comment: "")
      }

      /// en translation: TERMS OF SERVICE
      ///
      /// Locales: en, tr
      static func termsofservicE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TERMS OF SERVICE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TERMS OF SERVICE"
        }

        return NSLocalizedString("TERMS OF SERVICE", bundle: bundle, comment: "")
      }

      /// en translation: Tags
      ///
      /// Locales: en, tr
      static func tags(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tags", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tags"
        }

        return NSLocalizedString("Tags", bundle: bundle, comment: "")
      }

      /// en translation: Text
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Text"
        }

        return NSLocalizedString("Text", bundle: bundle, comment: "")
      }

      /// en translation: Theme
      ///
      /// Locales: en, tr
      static func theme(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Theme", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Theme"
        }

        return NSLocalizedString("Theme", bundle: bundle, comment: "")
      }

      /// en translation: There are no call Logs to clear
      ///
      /// Locales: en, tr
      static func thereAreNoCallLogsToClear(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("There are no call Logs to clear", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "There are no call Logs to clear"
        }

        return NSLocalizedString("There are no call Logs to clear", bundle: bundle, comment: "")
      }

      /// en translation: There are no likes
      ///
      /// Locales: en, tr
      static func thereAreNoLikes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("There are no likes ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "There are no likes "
        }

        return NSLocalizedString("There are no likes ", bundle: bundle, comment: "")
      }

      /// en translation: There is no Group request
      ///
      /// Locales: en, tr
      static func thereIsNoGroupRequest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("There is no Group request", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "There is no Group request"
        }

        return NSLocalizedString("There is no Group request", bundle: bundle, comment: "")
      }

      /// en translation: There is no notification
      ///
      /// Locales: en, tr
      static func thereIsNoNotification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("There is no notification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "There is no notification"
        }

        return NSLocalizedString("There is no notification", bundle: bundle, comment: "")
      }

      /// en translation: Title
      ///
      /// Locales: en, tr
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Title"
        }

        return NSLocalizedString("Title", bundle: bundle, comment: "")
      }

      /// en translation: Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.
      ///
      /// Locales: en, tr
      static func turnOn2StepLoginToLevelUpYourAccountSecurityOnceTurnedOnYouLlUseBothYourPasswordAndA6DigitSecurityCodeSendToYourPhoneOrEmailToLogIn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in."
        }

        return NSLocalizedString("Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.", bundle: bundle, comment: "")
      }

      /// en translation: Two-factor Authentication
      ///
      /// Locales: en, tr
      static func twoFactorAuthentication(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Two-factor Authentication", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Two-factor Authentication"
        }

        return NSLocalizedString("Two-factor Authentication", bundle: bundle, comment: "")
      }

      /// en translation: Type Something
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func typeSomething(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Type Something", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Type Something"
        }

        return NSLocalizedString("Type Something", bundle: bundle, comment: "")
      }

      /// en translation: Type Something
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func typeSometing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Type Someting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Type Someting"
        }

        return NSLocalizedString("Type Someting", bundle: bundle, comment: "")
      }

      /// en translation: USERS
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func userS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("USERS", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "USERS"
        }

        return NSLocalizedString("USERS", bundle: bundle, comment: "")
      }

      /// en translation: Unblocked
      ///
      /// Locales: en, tr
      static func unblocked(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unblocked", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Unblocked"
        }

        return NSLocalizedString("Unblocked", bundle: bundle, comment: "")
      }

      /// en translation: Update Funding
      ///
      /// Locales: en, tr
      static func updateFunding(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Update Funding", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Update Funding"
        }

        return NSLocalizedString("Update Funding", bundle: bundle, comment: "")
      }

      /// en translation: Update Group
      ///
      /// Locales: en, tr
      static func updateGroup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Update Group", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Update Group"
        }

        return NSLocalizedString("Update Group", bundle: bundle, comment: "")
      }

      /// en translation: User Info
      ///
      /// Locales: en, tr
      static func userInfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User Info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User Info"
        }

        return NSLocalizedString("User Info", bundle: bundle, comment: "")
      }

      /// en translation: User Profile
      ///
      /// Locales: en, tr
      static func userProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User Profile"
        }

        return NSLocalizedString("User Profile", bundle: bundle, comment: "")
      }

      /// en translation: User Suggestion
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func userSuggestion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User Suggestion", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User Suggestion"
        }

        return NSLocalizedString("User Suggestion", bundle: bundle, comment: "")
      }

      /// en translation: User has been blocked!
      ///
      /// Locales: en, tr
      static func userHasBeenBlocked(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User has been blocked!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User has been blocked!"
        }

        return NSLocalizedString("User has been blocked!", bundle: bundle, comment: "")
      }

      /// en translation: UserName
      ///
      /// Locales: en, tr
      static func userName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UserName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "UserName"
        }

        return NSLocalizedString("UserName", bundle: bundle, comment: "")
      }

      /// en translation: Verification
      ///
      /// Locales: en, tr
      static func verification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Verification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Verification"
        }

        return NSLocalizedString("Verification", bundle: bundle, comment: "")
      }

      /// en translation: Verification of the Profile!
      ///
      /// Locales: en, tr
      static func verificationOfTheProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Verification of the Profile!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Verification of the Profile!"
        }

        return NSLocalizedString("Verification of the Profile!", bundle: bundle, comment: "")
      }

      /// en translation: Video
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func video(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Video", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Video"
        }

        return NSLocalizedString("Video", bundle: bundle, comment: "")
      }

      /// en translation: Video Gallery
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func videoGallery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Video Gallery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Video Gallery"
        }

        return NSLocalizedString("Video Gallery", bundle: bundle, comment: "")
      }

      /// en translation: Video Mute
      ///
      /// Locales: en, tr
      static func videoMute(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Video Mute", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Video Mute"
        }

        return NSLocalizedString("Video Mute", bundle: bundle, comment: "")
      }

      /// en translation: View
      ///
      /// Locales: en, tr
      static func view(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("View", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "View"
        }

        return NSLocalizedString("View", bundle: bundle, comment: "")
      }

      /// en translation: View Profile
      ///
      /// Locales: en, tr
      static func viewProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("View Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "View Profile"
        }

        return NSLocalizedString("View Profile", bundle: bundle, comment: "")
      }

      /// en translation: View all Follow Request
      ///
      /// Locales: en, tr
      static func viewAllFollowRequest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("View all Follow Request", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "View all Follow Request"
        }

        return NSLocalizedString("View all Follow Request", bundle: bundle, comment: "")
      }

      /// en translation: ViewMore
      ///
      /// Locales: en, tr
      static func viewMore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ViewMore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ViewMore"
        }

        return NSLocalizedString("ViewMore", bundle: bundle, comment: "")
      }

      /// en translation: Views
      ///
      /// Locales: en, tr
      static func views(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Views", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Views"
        }

        return NSLocalizedString("Views", bundle: bundle, comment: "")
      }

      /// en translation: Warning !
      ///
      /// Locales: en, tr
      static func warning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Warning !", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Warning !"
        }

        return NSLocalizedString("Warning !", bundle: bundle, comment: "")
      }

      /// en translation: We cannot find the keyword you are searching form maybe a little spelling mistake?
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func weCannotFindTheKeywordYouAreSearchingFormMaybeALittleSpellingMistake(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("We cannot find the keyword you are searching form maybe a little spelling mistake?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "We cannot find the keyword you are searching form maybe a little spelling mistake?"
        }

        return NSLocalizedString("We cannot find the keyword you are searching form maybe a little spelling mistake?", bundle: bundle, comment: "")
      }

      /// en translation: Website
      ///
      /// Locales: en, tr
      static func website(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Website", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Website"
        }

        return NSLocalizedString("Website", bundle: bundle, comment: "")
      }

      /// en translation: Welcome to Bohragram
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func welcomeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WelcomeText", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WelcomeText"
        }

        return NSLocalizedString("WelcomeText", bundle: bundle, comment: "")
      }

      /// en translation: Where do you want to share it?
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func whereDoYouWantToShareIt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Where do you want to share it?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Where do you want to share it?"
        }

        return NSLocalizedString("Where do you want to share it?", bundle: bundle, comment: "")
      }

      /// en translation: Who can direct message you?
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func whoCanDirectMessageYou(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Who can direct message you?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Who can direct message you?"
        }

        return NSLocalizedString("Who can direct message you?", bundle: bundle, comment: "")
      }

      /// en translation: Who can follow me?
      ///
      /// Locales: en, tr
      static func whoCanFollowMe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Who can follow me?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Who can follow me?"
        }

        return NSLocalizedString("Who can follow me?", bundle: bundle, comment: "")
      }

      /// en translation: Who can message me?
      ///
      /// Locales: en, tr
      static func whoCanMessageMe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Who can message me?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Who can message me?"
        }

        return NSLocalizedString("Who can message me?", bundle: bundle, comment: "")
      }

      /// en translation: Who can see my birthday?
      ///
      /// Locales: en, tr
      static func whoCanSeeMyBirthday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Who can see my birthday?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Who can see my birthday?"
        }

        return NSLocalizedString("Who can see my birthday?", bundle: bundle, comment: "")
      }

      /// en translation: Who can view your profile?
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func whoCanViewYourProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Who can view your profile?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Who can view your profile?"
        }

        return NSLocalizedString("Who can view your profile?", bundle: bundle, comment: "")
      }

      /// en translation: Widthdrawals
      ///
      /// Locales: en, tr
      static func widthdrawals(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Widthdrawals", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Widthdrawals"
        }

        return NSLocalizedString("Widthdrawals", bundle: bundle, comment: "")
      }

      /// en translation: Workspace
      ///
      /// Locales: en, tr
      static func workspace(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Workspace", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Workspace"
        }

        return NSLocalizedString("Workspace", bundle: bundle, comment: "")
      }

      /// en translation: YES
      ///
      /// Locales: en, tr
      static func yeS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YES", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "YES"
        }

        return NSLocalizedString("YES", bundle: bundle, comment: "")
      }

      /// en translation: Yes, I wan to delete permanently from PixelPhoto Account.
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func yesIWanToDeletePermanentlyFromPixelPhotoAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yes, I wan to delete permanently from PixelPhoto Account.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Yes, I wan to delete permanently from PixelPhoto Account."
        }

        return NSLocalizedString("Yes, I wan to delete permanently from PixelPhoto Account.", bundle: bundle, comment: "")
      }

      /// en translation: Yes, I want to delete permanently from PixelPhoto Account.
      ///
      /// Locales: en, tr
      static func yesIWantToDeletePermanentlyFromPixelPhotoAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yes, I want to delete permanently from PixelPhoto Account.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Yes, I want to delete permanently from PixelPhoto Account."
        }

        return NSLocalizedString("Yes, I want to delete permanently from PixelPhoto Account.", bundle: bundle, comment: "")
      }

      /// en translation: You
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func you(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You"
        }

        return NSLocalizedString("You", bundle: bundle, comment: "")
      }

      /// en translation: You cannot block this user because it is administrator
      ///
      /// Locales: en, tr
      static func youCannotBlockThisUserBecauseItIsAdministrator(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You cannot block this user because it is administrator", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You cannot block this user because it is administrator"
        }

        return NSLocalizedString("You cannot block this user because it is administrator", bundle: bundle, comment: "")
      }

      /// en translation: Your Message here...
      ///
      /// Locales: en, tr
      static func yourMessageHere(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your Message here...", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your Message here..."
        }

        return NSLocalizedString("Your Message here...", bundle: bundle, comment: "")
      }

      /// en translation: Your Photo
      ///
      /// Locales: en, tr
      static func yourPhoto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your Photo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your Photo"
        }

        return NSLocalizedString("Your Photo", bundle: bundle, comment: "")
      }

      /// en translation: Your Story
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func yourStory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your Story", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your Story"
        }

        return NSLocalizedString("Your Story", bundle: bundle, comment: "")
      }

      /// en translation: Your balance is $0, minimum withdrawal request is $50
      ///
      /// Locales: en, tr
      static func yourBalanceIs0MinimumWithdrawalRequestIs50(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your balance is $0, minimum withdrawal request is $50", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your balance is $0, minimum withdrawal request is $50"
        }

        return NSLocalizedString("Your balance is $0, minimum withdrawal request is $50", bundle: bundle, comment: "")
      }

      /// en translation: Your facebook profile url
      ///
      /// Locales: en, tr
      static func yourFacebookProfileUrl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your facebook profile url", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your facebook profile url"
        }

        return NSLocalizedString("Your facebook profile url", bundle: bundle, comment: "")
      }

      /// en translation: Your google-plus profile url
      ///
      /// Locales: en, tr
      static func yourGooglePlusProfileUrl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your google-plus profile url", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your google-plus profile url"
        }

        return NSLocalizedString("Your google-plus profile url", bundle: bundle, comment: "")
      }

      /// en translation: Your report has been sent
      ///
      /// Locales: en, tr
      static func yourReportHasBeenSent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your report has been sent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your report has been sent"
        }

        return NSLocalizedString("Your report has been sent", bundle: bundle, comment: "")
      }

      /// en translation: Your twitter profile url
      ///
      /// Locales: en, tr
      static func yourTwitterProfileUrl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your twitter profile url", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your twitter profile url"
        }

        return NSLocalizedString("Your twitter profile url", bundle: bundle, comment: "")
      }

      /// en translation: birthday Privacy
      ///
      /// Locales: en, tr
      static func birthdayPrivacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("birthday Privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "birthday Privacy"
        }

        return NSLocalizedString("birthday Privacy", bundle: bundle, comment: "")
      }

      /// en translation: count
      ///
      /// Locales: en, tr
      static func count(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("count", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "count"
        }

        return NSLocalizedString("count", bundle: bundle, comment: "")
      }

      /// en translation: get Notification when you receive messages
      ///
      /// Locales: en, tr
      static func getNotificationWhenYouReceiveMessages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("get Notification when you receive messages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "get Notification when you receive messages"
        }

        return NSLocalizedString("get Notification when you receive messages", bundle: bundle, comment: "")
      }

      /// en translation: liked your comment
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func likedYourPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("liked your post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "liked your post"
        }

        return NSLocalizedString("liked your post", bundle: bundle, comment: "")
      }

      /// en translation: mentioned you in a comment
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func mentionedYouInAComment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mentioned you in a comment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mentioned you in a comment"
        }

        return NSLocalizedString("mentioned you in a comment", bundle: bundle, comment: "")
      }

      /// en translation: mentioned you in a post
      ///
      /// Locales: en, zh-Hans, zh-Hant, es, de, fr, it, tr
      static func mentionedYouInAPost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mentioned you in a post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mentioned you in a post"
        }

        return NSLocalizedString("mentioned you in a post", bundle: bundle, comment: "")
      }

      /// en translation: no likes yet
      ///
      /// Locales: en, tr
      static func noLikesYet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no likes yet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no likes yet"
        }

        return NSLocalizedString("no likes yet", bundle: bundle, comment: "")
      }

      /// en translation: sells
      ///
      /// Locales: en, tr
      static func sells(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sells", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sells"
        }

        return NSLocalizedString("sells", bundle: bundle, comment: "")
      }

      /// en translation: someone is calling you
      ///
      /// Locales: en, tr
      static func someoneIsCallingYou(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("someone is calling you", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "someone is calling you"
        }

        return NSLocalizedString("someone is calling you", bundle: bundle, comment: "")
      }

      /// en translation: something to show
      ///
      /// Locales: en, tr
      static func somethingToShow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("something to show", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "something to show"
        }

        return NSLocalizedString("something to show", bundle: bundle, comment: "")
      }

      /// en translation: this
      ///
      /// Locales: en, tr
      static func this(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("this", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "this"
        }

        return NSLocalizedString("this", bundle: bundle, comment: "")
      }

      /// zh-Hans translation: Everyone
      ///
      /// Locales: zh-Hans, zh-Hant, es, de, fr, it
      static func everyone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Everyone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Everyone"
        }

        return NSLocalizedString("Everyone", bundle: bundle, comment: "")
      }

      /// zh-Hans translation: Follow
      ///
      /// Locales: zh-Hans, zh-Hant, es, de, fr, it
      static func follow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Follow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Follow"
        }

        return NSLocalizedString("Follow", bundle: bundle, comment: "")
      }

      /// zh-Hans translation: Following
      ///
      /// Locales: zh-Hans, zh-Hant, es, de, fr, it
      static func following(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Following", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Following"
        }

        return NSLocalizedString("Following", bundle: bundle, comment: "")
      }

      /// zh-Hans translation: People I follow
      ///
      /// Locales: zh-Hans, zh-Hant, es, de, fr, it
      static func peopleIFollow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("People I follow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "People I follow"
        }

        return NSLocalizedString("People I follow", bundle: bundle, comment: "")
      }

      /// zh-Hans translation: Sign In
      ///
      /// Locales: zh-Hans, zh-Hant, es, de, fr, it
      static func signIn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sign In", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sign In"
        }

        return NSLocalizedString("Sign In", bundle: bundle, comment: "")
      }

      /// zh-Hans translation: Username
      ///
      /// Locales: zh-Hans, zh-Hant, es, de, fr, it
      static func username(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Username", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Username"
        }

        return NSLocalizedString("Username", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.main` struct is generated, and contains static references to 31 localization keys.
    struct main {
      /// tr translation:  
      ///
      /// Locales: tr
      static let uqu5z2CITitle = Rswift.StringResource(key: "uqu-5z-2CI.title", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation:  Please enter your email address.  We will send you a link to reset password.
      ///
      /// Locales: tr
      static let b0PKErKText = Rswift.StringResource(key: "4b0-PK-erK.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: ALREADY HAVE AN ACCOUNT?
      ///
      /// Locales: tr
      static let yKeEvMd5Text = Rswift.StringResource(key: "yKe-ev-Md5.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: BY REGISTERING YOU AGREE TO OUR 
      ///
      /// Locales: tr
      static let ax5LrSWZText = Rswift.StringResource(key: "ax5-Lr-sWZ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Business Name
      ///
      /// Locales: tr
      static let agk4j24dPlaceholder = Rswift.StringResource(key: "agk-4j-24d.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: CREATE AN ACCOUNT
      ///
      /// Locales: tr
      static let kkc3IUhhText = Rswift.StringResource(key: "KKC-3I-Uhh.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Confirm Password
      ///
      /// Locales: tr
      static let f9wEZJfWPlaceholder = Rswift.StringResource(key: "f9w-eZ-JfW.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: DON'T HAVE AN ACCOUNT?
      ///
      /// Locales: tr
      static let foiPxJ8pText = Rswift.StringResource(key: "Foi-Px-J8p.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Email
      ///
      /// Locales: tr
      static let igrIDL6uPlaceholder = Rswift.StringResource(key: "igr-iD-L6u.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Email
      ///
      /// Locales: tr
      static let p1VG8RtPPlaceholder = Rswift.StringResource(key: "p1V-g8-RtP.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Email
      ///
      /// Locales: tr
      static let pHsQdPsCPlaceholder = Rswift.StringResource(key: "pHs-Qd-psC.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Email
      ///
      /// Locales: tr
      static let xl3AoRU0Placeholder = Rswift.StringResource(key: "Xl3-Ao-RU0.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Enter Your Information!
      ///
      /// Locales: tr
      static let dnDS9P4qText = Rswift.StringResource(key: "dnD-s9-P4q.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Forgot your password?
      ///
      /// Locales: tr
      static let vogDQ5xMNormalTitle = Rswift.StringResource(key: "Vog-dQ-5xM.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Loading Profile...
      ///
      /// Locales: tr
      static let j8iUsIDGText = Rswift.StringResource(key: "J8i-Us-IDG.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Login
      ///
      /// Locales: tr
      static let feI7HP1Text = Rswift.StringResource(key: "6Fe-I7-HP1.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Login with Facebook
      ///
      /// Locales: tr
      static let lf2VJFIJNormalTitle = Rswift.StringResource(key: "Lf2-vJ-FIJ.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: OR
      ///
      /// Locales: tr
      static let pbu7HHWIText = Rswift.StringResource(key: "pbu-7H-HWI.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Password
      ///
      /// Locales: tr
      static let a2HOA7V3Placeholder = Rswift.StringResource(key: "A2H-OA-7V3.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Password
      ///
      /// Locales: tr
      static let jRRK8XPlaceholder = Rswift.StringResource(key: "75j-rR-k8X.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Phone Number
      ///
      /// Locales: tr
      static let oYzC0CfSPlaceholder = Rswift.StringResource(key: "OYz-C0-cfS.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Register
      ///
      /// Locales: tr
      static let r1GDKUK3NormalTitle = Rswift.StringResource(key: "r1G-dK-UK3.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: SEND
      ///
      /// Locales: tr
      static let bGMWSgENormalTitle = Rswift.StringResource(key: "7bG-mW-sgE.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: SIGN IN
      ///
      /// Locales: tr
      static let b1vTkVkcNormalTitle = Rswift.StringResource(key: "b1v-Tk-Vkc.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Sign Up
      ///
      /// Locales: tr
      static let uyZNExBText = Rswift.StringResource(key: "0uy-ZN-ExB.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Sign in
      ///
      /// Locales: tr
      static let koUJJ8y1Text = Rswift.StringResource(key: "koU-jJ-8y1.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Submit Request
      ///
      /// Locales: tr
      static let em4JqBoYNormalTitle = Rswift.StringResource(key: "EM4-jq-BoY.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: TERMS AND SERVICES
      ///
      /// Locales: tr
      static let dv8BdVpKNormalTitle = Rswift.StringResource(key: "DV8-Bd-VpK.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Username
      ///
      /// Locales: tr
      static let vurfFwOPlaceholder = Rswift.StringResource(key: "5VU-RF-FwO.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Website
      ///
      /// Locales: tr
      static let y6iOw4YPPlaceholder = Rswift.StringResource(key: "Y6i-ow-4YP.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)
      /// tr translation: Welcome to Bohragram
      ///
      /// Locales: tr
      static let bZeCtMhuText = Rswift.StringResource(key: "bZe-Ct-mhu.text", tableName: "Main", bundle: R.hostingBundle, locales: ["tr"], comment: nil)

      /// tr translation:  
      ///
      /// Locales: tr
      static func uqu5z2CITitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uqu-5z-2CI.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "uqu-5z-2CI.title"
        }

        return NSLocalizedString("uqu-5z-2CI.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation:  Please enter your email address.  We will send you a link to reset password.
      ///
      /// Locales: tr
      static func b0PKErKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4b0-PK-erK.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "4b0-PK-erK.text"
        }

        return NSLocalizedString("4b0-PK-erK.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: ALREADY HAVE AN ACCOUNT?
      ///
      /// Locales: tr
      static func yKeEvMd5Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yKe-ev-Md5.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "yKe-ev-Md5.text"
        }

        return NSLocalizedString("yKe-ev-Md5.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: BY REGISTERING YOU AGREE TO OUR 
      ///
      /// Locales: tr
      static func ax5LrSWZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ax5-Lr-sWZ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ax5-Lr-sWZ.text"
        }

        return NSLocalizedString("ax5-Lr-sWZ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Business Name
      ///
      /// Locales: tr
      static func agk4j24dPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agk-4j-24d.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "agk-4j-24d.placeholder"
        }

        return NSLocalizedString("agk-4j-24d.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: CREATE AN ACCOUNT
      ///
      /// Locales: tr
      static func kkc3IUhhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KKC-3I-Uhh.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "KKC-3I-Uhh.text"
        }

        return NSLocalizedString("KKC-3I-Uhh.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Confirm Password
      ///
      /// Locales: tr
      static func f9wEZJfWPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("f9w-eZ-JfW.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "f9w-eZ-JfW.placeholder"
        }

        return NSLocalizedString("f9w-eZ-JfW.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: DON'T HAVE AN ACCOUNT?
      ///
      /// Locales: tr
      static func foiPxJ8pText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Foi-Px-J8p.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Foi-Px-J8p.text"
        }

        return NSLocalizedString("Foi-Px-J8p.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Email
      ///
      /// Locales: tr
      static func igrIDL6uPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("igr-iD-L6u.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "igr-iD-L6u.placeholder"
        }

        return NSLocalizedString("igr-iD-L6u.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Email
      ///
      /// Locales: tr
      static func p1VG8RtPPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("p1V-g8-RtP.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "p1V-g8-RtP.placeholder"
        }

        return NSLocalizedString("p1V-g8-RtP.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Email
      ///
      /// Locales: tr
      static func pHsQdPsCPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pHs-Qd-psC.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "pHs-Qd-psC.placeholder"
        }

        return NSLocalizedString("pHs-Qd-psC.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Email
      ///
      /// Locales: tr
      static func xl3AoRU0Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Xl3-Ao-RU0.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Xl3-Ao-RU0.placeholder"
        }

        return NSLocalizedString("Xl3-Ao-RU0.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Enter Your Information!
      ///
      /// Locales: tr
      static func dnDS9P4qText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dnD-s9-P4q.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "dnD-s9-P4q.text"
        }

        return NSLocalizedString("dnD-s9-P4q.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Forgot your password?
      ///
      /// Locales: tr
      static func vogDQ5xMNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Vog-dQ-5xM.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Vog-dQ-5xM.normalTitle"
        }

        return NSLocalizedString("Vog-dQ-5xM.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Loading Profile...
      ///
      /// Locales: tr
      static func j8iUsIDGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("J8i-Us-IDG.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "J8i-Us-IDG.text"
        }

        return NSLocalizedString("J8i-Us-IDG.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Login
      ///
      /// Locales: tr
      static func feI7HP1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6Fe-I7-HP1.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "6Fe-I7-HP1.text"
        }

        return NSLocalizedString("6Fe-I7-HP1.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Login with Facebook
      ///
      /// Locales: tr
      static func lf2VJFIJNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Lf2-vJ-FIJ.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Lf2-vJ-FIJ.normalTitle"
        }

        return NSLocalizedString("Lf2-vJ-FIJ.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: OR
      ///
      /// Locales: tr
      static func pbu7HHWIText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pbu-7H-HWI.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "pbu-7H-HWI.text"
        }

        return NSLocalizedString("pbu-7H-HWI.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Password
      ///
      /// Locales: tr
      static func a2HOA7V3Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("A2H-OA-7V3.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "A2H-OA-7V3.placeholder"
        }

        return NSLocalizedString("A2H-OA-7V3.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Password
      ///
      /// Locales: tr
      static func jRRK8XPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("75j-rR-k8X.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "75j-rR-k8X.placeholder"
        }

        return NSLocalizedString("75j-rR-k8X.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Phone Number
      ///
      /// Locales: tr
      static func oYzC0CfSPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OYz-C0-cfS.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "OYz-C0-cfS.placeholder"
        }

        return NSLocalizedString("OYz-C0-cfS.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Register
      ///
      /// Locales: tr
      static func r1GDKUK3NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("r1G-dK-UK3.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "r1G-dK-UK3.normalTitle"
        }

        return NSLocalizedString("r1G-dK-UK3.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: SEND
      ///
      /// Locales: tr
      static func bGMWSgENormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7bG-mW-sgE.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "7bG-mW-sgE.normalTitle"
        }

        return NSLocalizedString("7bG-mW-sgE.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: SIGN IN
      ///
      /// Locales: tr
      static func b1vTkVkcNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("b1v-Tk-Vkc.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "b1v-Tk-Vkc.normalTitle"
        }

        return NSLocalizedString("b1v-Tk-Vkc.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Sign Up
      ///
      /// Locales: tr
      static func uyZNExBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0uy-ZN-ExB.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "0uy-ZN-ExB.text"
        }

        return NSLocalizedString("0uy-ZN-ExB.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Sign in
      ///
      /// Locales: tr
      static func koUJJ8y1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("koU-jJ-8y1.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "koU-jJ-8y1.text"
        }

        return NSLocalizedString("koU-jJ-8y1.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Submit Request
      ///
      /// Locales: tr
      static func em4JqBoYNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EM4-jq-BoY.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "EM4-jq-BoY.normalTitle"
        }

        return NSLocalizedString("EM4-jq-BoY.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: TERMS AND SERVICES
      ///
      /// Locales: tr
      static func dv8BdVpKNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DV8-Bd-VpK.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "DV8-Bd-VpK.normalTitle"
        }

        return NSLocalizedString("DV8-Bd-VpK.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Username
      ///
      /// Locales: tr
      static func vurfFwOPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5VU-RF-FwO.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "5VU-RF-FwO.placeholder"
        }

        return NSLocalizedString("5VU-RF-FwO.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Website
      ///
      /// Locales: tr
      static func y6iOw4YPPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Y6i-ow-4YP.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Y6i-ow-4YP.placeholder"
        }

        return NSLocalizedString("Y6i-ow-4YP.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// tr translation: Welcome to Bohragram
      ///
      /// Locales: tr
      static func bZeCtMhuText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bZe-Ct-mhu.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "bZe-Ct-mhu.text"
        }

        return NSLocalizedString("bZe-Ct-mhu.text", tableName: "Main", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ActivitiesTableItem.validate()
      try _AllStoreCells.validate()
      try _ChatReceiverImageTableCell.validate()
      try _ChatSenderImageTableCell.validate()
      try _ContactsTableCell.validate()
      try _CoverView.validate()
      try _ExploreCollectionCell.validate()
      try _ExploreTableViewCell.validate()
      try _FeaturedPostCell.validate()
      try _ManageSessionCell.validate()
      try _NoPostCell.validate()
      try _NoStoreCell.validate()
      try _PPBlockedUserItemTableViewCell.validate()
      try _PPCommentItemTableViewCell.validate()
      try _PPGIFItemTableViewCell.validate()
      try _PPHashTagItemTableViewCell.validate()
      try _PPHorizontalCollectionviewItemTableViewCell.validate()
      try _PPImageItemTableViewCell.validate()
      try _PPMosaicGIFItemCollectionViewCell.validate()
      try _PPMosaicImageItemCollectionViewCell.validate()
      try _PPMosaicVideoItemCollectionViewCell.validate()
      try _PPMultiImageItemTableViewCell.validate()
      try _PPMyProfileCaptureProfileTableViewCell.validate()
      try _PPMyProfileITemTableViewCell.validate()
      try _PPNoResultTableViewCell.validate()
      try _PPNotificationItemTableViewCell.validate()
      try _PPPostItemCollectionViewCell.validate()
      try _PPProfileCheckBoxItemTableViewCell.validate()
      try _PPProfileItemTableViewCell.validate()
      try _PPSettingsItemTableViewCell.validate()
      try _PPStoryItemCollectionViewCell.validate()
      try _PPUserProfileThumbnailItemCollectionViewCell.validate()
      try _PPVideoItemTableViewCell.validate()
      try _PPYourStoryItemCollectionViewCell.validate()
      try _PPYoutubeItemTableViewCell.validate()
      try _PostWithFourImage.validate()
      try _PostWithFourImageCollectionCell.validate()
      try _PostWithImageCell.validate()
      try _PostWithOneImageCell.validate()
      try _PostWithOneImageCollectionCell.validate()
      try _PostWithThreeImage.validate()
      try _PostWithThreeImageCollectionCell.validate()
      try _PostWithTwoImage.validate()
      try _PostWithTwoImageCollectionCell.validate()
      try _StoreCollectionCell.validate()
      try _StoreTableViewCell.validate()
      try _UserDetailCell.validate()
      try _UserImgesCell.validate()
      try _UserSuggestionCollectionCell.validate()
      try _VideoCollectionCell.validate()
      try _YoutubeCollectionCell.validate()
    }

    struct _ActivitiesTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ActivitiesTableItem

      let bundle = R.hostingBundle
      let identifier = "ActivitiesTableItem"
      let name = "ActivitiesTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ActivitiesTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ActivitiesTableItem
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_likeBig", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_likeBig' is used in nib 'ActivitiesTableItem', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _AllStoreCells: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AllStoreCells

      let bundle = R.hostingBundle
      let identifier = "AllStorecells"
      let name = "AllStoreCells"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AllStoreCells? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AllStoreCells
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Science", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Science' is used in nib 'AllStoreCells', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color-3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-3' is used in nib 'AllStoreCells', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ChatReceiverImageTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ChatReceiverImage_TableCell

      let bundle = R.hostingBundle
      let identifier = "ChatReceiverImage_TableCell"
      let name = "ChatReceiverImage-TableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatReceiverImage_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatReceiverImage_TableCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_playBtn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_playBtn' is used in nib 'ChatReceiverImage-TableCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star' is used in nib 'ChatReceiverImage-TableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ChatSenderImageTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ChatSenderImage_TableCell

      let bundle = R.hostingBundle
      let identifier = "ChatSenderImage_TableCell"
      let name = "ChatSenderImage-TableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatSenderImage_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatSenderImage_TableCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_playBtn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_playBtn' is used in nib 'ChatSenderImage-TableCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star' is used in nib 'ChatSenderImage-TableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ContactsTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ContactsTableCell

      let bundle = R.hostingBundle
      let identifier = "ContactsTableCell"
      let name = "ContactsTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ContactsTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContactsTableCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'ContactsTableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CoverView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CoverView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CoverView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CoverView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_play' is used in nib 'CoverView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ExploreCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ExploreCollectionCell

      let bundle = R.hostingBundle
      let identifier = "ExploreCell"
      let name = "ExploreCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExploreCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExploreCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Science", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Science' is used in nib 'ExploreCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color' is used in nib 'ExploreCollectionCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ExploreTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ExploreTableViewCell

      let bundle = R.hostingBundle
      let identifier = "ExploreTableCell"
      let name = "ExploreTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExploreTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExploreTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "rights", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rights' is used in nib 'ExploreTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color' is used in nib 'ExploreTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _FeaturePostItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = FeaturePostItem

      let bundle = R.hostingBundle
      let identifier = "FeaturePostTableCell"
      let name = "FeaturePostItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FeaturePostItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FeaturePostItem
      }

      fileprivate init() {}
    }

    struct _FeaturedPostCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FeaturedPostCell

      let bundle = R.hostingBundle
      let identifier = "FeaturedPostcell"
      let name = "FeaturedPostCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FeaturedPostCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FeaturedPostCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Science", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Science' is used in nib 'FeaturedPostCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "films", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'films' is used in nib 'FeaturedPostCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "playes", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'playes' is used in nib 'FeaturedPostCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in nib 'FeaturedPostCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _FundingCollectionItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = FundingCollectionItem

      let bundle = R.hostingBundle
      let identifier = "FundingCollectionItem"
      let name = "FundingCollectionItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FundingCollectionItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FundingCollectionItem
      }

      fileprivate init() {}
    }

    struct _FundingTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = FundingTableItem

      let bundle = R.hostingBundle
      let identifier = "FundingTableItem"
      let name = "FundingTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FundingTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FundingTableItem
      }

      fileprivate init() {}
    }

    struct _IconWithCellItem: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "IconWithCellItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IconWithCellItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IconWithCellItem
      }

      fileprivate init() {}
    }

    struct _IntroItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = IntroItem

      let bundle = R.hostingBundle
      let identifier = "IntroItem"
      let name = "IntroItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IntroItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IntroItem
      }

      fileprivate init() {}
    }

    struct _ManageSessionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ManageSessionCell

      let bundle = R.hostingBundle
      let identifier = "SessionCell"
      let name = "ManageSessionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ManageSessionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ManageSessionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "close2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close2' is used in nib 'ManageSessionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color' is used in nib 'ManageSessionCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in nib 'ManageSessionCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _NightModeTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NightModeTableItem

      let bundle = R.hostingBundle
      let identifier = "NightModeTableItem"
      let name = "NightModeTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NightModeTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NightModeTableItem
      }

      fileprivate init() {}
    }

    struct _NoPostCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NoPostCell

      let bundle = R.hostingBundle
      let identifier = "NoPostcell"
      let name = "NoPostCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NoPostCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NoPostCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "sadEmo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sadEmo' is used in nib 'NoPostCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color' is used in nib 'NoPostCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _NoStoreCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NoStoreCell

      let bundle = R.hostingBundle
      let identifier = "NoStoreCells"
      let name = "NoStoreCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NoStoreCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NoStoreCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "shop", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shop' is used in nib 'NoStoreCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color-3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-3' is used in nib 'NoStoreCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PPAddPostCaptionTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PPAddPostCaptionTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPAddPostCaptionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPAddPostCaptionTableViewCell
      }

      fileprivate init() {}
    }

    struct _PPBlockedUserItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPBlockedUserItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPBlockedUserItemTableViewCellID"
      let name = "PPBlockedUserItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPBlockedUserItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPBlockedUserItemTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Science", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Science' is used in nib 'PPBlockedUserItemTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in nib 'PPBlockedUserItemTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PPChatUserItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PPChatUserItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPChatUserItemTableViewCellID"
      let name = "PPChatUserItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPChatUserItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPChatUserItemTableViewCell
      }

      fileprivate init() {}
    }

    struct _PPCollectionViewItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PPCollectionViewItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPCollectionViewItemTableViewCellID"
      let name = "PPCollectionViewItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPCollectionViewItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPCollectionViewItemTableViewCell
      }

      fileprivate init() {}
    }

    struct _PPColorItemCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PPColorItemCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "PPColorItemCollectionViewCellID"
      let name = "PPColorItemCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPColorItemCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPColorItemCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _PPCommentItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPCommentItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPCommentItemTableViewCellID"
      let name = "PPCommentItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPCommentItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPCommentItemTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_like_inactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_like_inactive' is used in nib 'PPCommentItemTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PPFontItemCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PPFontItemCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "PPFontItemCollectionViewCellID"
      let name = "PPFontItemCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPFontItemCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPFontItemCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _PPGIFItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPGIFItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPGIFItemTableViewCellID"
      let name = "PPGIFItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPGIFItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPGIFItemTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Heart1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Heart1' is used in nib 'PPGIFItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Science", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Science' is used in nib 'PPGIFItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Star1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Star1' is used in nib 'PPGIFItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backs", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backs' is used in nib 'PPGIFItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'PPGIFItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mors", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mors' is used in nib 'PPGIFItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "talk", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'talk' is used in nib 'PPGIFItemTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in nib 'PPGIFItemTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-2' is used in nib 'PPGIFItemTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PPHashTagItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPHashTagItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPHashTagItemTableViewCellID"
      let name = "PPHashTagItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPHashTagItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPHashTagItemTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "backGr1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backGr1' is used in nib 'PPHashTagItemTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PPHorizontalCollectionviewItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPHorizontalCollectionviewItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPHorizontalCollectionviewItemTableViewCellID"
      let name = "PPHorizontalCollectionviewItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPHorizontalCollectionviewItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPHorizontalCollectionviewItemTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "rights", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rights' is used in nib 'PPHorizontalCollectionviewItemTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color' is used in nib 'PPHorizontalCollectionviewItemTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PPImageItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPImageItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPImageItemTableViewCellID"
      let name = "PPImageItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPImageItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPImageItemTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Heart1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Heart1' is used in nib 'PPImageItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Star1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Star1' is used in nib 'PPImageItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backs", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backs' is used in nib 'PPImageItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'PPImageItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mors", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mors' is used in nib 'PPImageItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "talk", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'talk' is used in nib 'PPImageItemTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in nib 'PPImageItemTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-2' is used in nib 'PPImageItemTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PPInputTextFieldItemTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PPInputTextFieldItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPInputTextFieldItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPInputTextFieldItemTableViewCell
      }

      fileprivate init() {}
    }

    struct _PPMosaicGIFItemCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPMosaicGIFItemCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "PPMosaicGIFItemCollectionViewCellID"
      let name = "PPMosaicGIFItemCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPMosaicGIFItemCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPMosaicGIFItemCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "imageView:Slk-eW-eRQ:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageView:Slk-eW-eRQ:image' is used in nib 'PPMosaicGIFItemCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PPMosaicImageItemCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPMosaicImageItemCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "PPMosaicImageItemCollectionViewCellID"
      let name = "PPMosaicImageItemCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPMosaicImageItemCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPMosaicImageItemCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Science", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Science' is used in nib 'PPMosaicImageItemCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in nib 'PPMosaicImageItemCollectionViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PPMosaicVideoItemCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPMosaicVideoItemCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "PPMosaicVideoItemCollectionViewCellID"
      let name = "PPMosaicVideoItemCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPMosaicVideoItemCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPMosaicVideoItemCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_play' is used in nib 'PPMosaicVideoItemCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_item_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_item_placeholder' is used in nib 'PPMosaicVideoItemCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in nib 'PPMosaicVideoItemCollectionViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PPMultiImageItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPMultiImageItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPMultiImageItemTableViewCellID"
      let name = "PPMultiImageItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPMultiImageItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPMultiImageItemTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Heart1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Heart1' is used in nib 'PPMultiImageItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Science", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Science' is used in nib 'PPMultiImageItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Star1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Star1' is used in nib 'PPMultiImageItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backs", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backs' is used in nib 'PPMultiImageItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mors", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mors' is used in nib 'PPMultiImageItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "talk", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'talk' is used in nib 'PPMultiImageItemTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in nib 'PPMultiImageItemTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-2' is used in nib 'PPMultiImageItemTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PPMyProfileCaptureProfileTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PPMyProfileCaptureProfileTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPMyProfileCaptureProfileTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPMyProfileCaptureProfileTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_capture_camera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_capture_camera' is used in nib 'PPMyProfileCaptureProfileTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'PPMyProfileCaptureProfileTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PPMyProfileITemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPMyProfileITemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPMyProfileITemTableViewCellID"
      let name = "PPMyProfileITemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPMyProfileITemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPMyProfileITemTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_capture_camera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_capture_camera' is used in nib 'PPMyProfileITemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'PPMyProfileITemTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PPNoResultTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPNoResultTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPNoResultTableViewCellID"
      let name = "PPNoResultTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPNoResultTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPNoResultTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "img_search_big", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_search_big' is used in nib 'PPNoResultTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PPNormalVerticalCollectionViewItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PPNormalVerticalCollectionViewItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPNormalVerticalCollectionViewItemTableViewCellID"
      let name = "PPNormalVerticalCollectionViewItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPNormalVerticalCollectionViewItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPNormalVerticalCollectionViewItemTableViewCell
      }

      fileprivate init() {}
    }

    struct _PPNotificationItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPNotificationItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPNotificationItemTableViewCellID"
      let name = "PPNotificationItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPNotificationItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPNotificationItemTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'PPNotificationItemTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PPPostItemCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPPostItemCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "PPPostItemCollectionViewCellID"
      let name = "PPPostItemCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPPostItemCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPPostItemCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_remove_item", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_remove_item' is used in nib 'PPPostItemCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_item_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_item_placeholder' is used in nib 'PPPostItemCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PPProfileCheckBoxItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPProfileCheckBoxItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPProfileCheckBoxItemTableViewCellID"
      let name = "PPProfileCheckBoxItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPProfileCheckBoxItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPProfileCheckBoxItemTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Science", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Science' is used in nib 'PPProfileCheckBoxItemTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color' is used in nib 'PPProfileCheckBoxItemTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in nib 'PPProfileCheckBoxItemTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PPProfileItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPProfileItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPProfileItemTableViewCellID"
      let name = "PPProfileItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPProfileItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPProfileItemTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'PPProfileItemTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PPReceiverChatItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PPReceiverChatItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPReceiverChatItemTableViewCellID"
      let name = "PPReceiverChatItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPReceiverChatItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPReceiverChatItemTableViewCell
      }

      fileprivate init() {}
    }

    struct _PPSelectPostItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PPSelectPostItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPSelectPostItemTableViewCellID"
      let name = "PPSelectPostItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPSelectPostItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPSelectPostItemTableViewCell
      }

      fileprivate init() {}
    }

    struct _PPSenderChatItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PPSenderChatItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPSenderChatItemTableViewCellID"
      let name = "PPSenderChatItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPSenderChatItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPSenderChatItemTableViewCell
      }

      fileprivate init() {}
    }

    struct _PPSettingsItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPSettingsItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPSettingsItemTableViewCellID"
      let name = "PPSettingsItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPSettingsItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPSettingsItemTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "key", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'key' is used in nib 'PPSettingsItemTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PPStoryItemCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPStoryItemCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "PPStoryItemCollectionViewCellID"
      let name = "PPStoryItemCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPStoryItemCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPStoryItemCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Science", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Science' is used in nib 'PPStoryItemCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in nib 'PPStoryItemCollectionViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PPSubmitButtonItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PPSubmitButtonItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPSubmitButtonItemTableViewCellID"
      let name = "PPSubmitButtonItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPSubmitButtonItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPSubmitButtonItemTableViewCell
      }

      fileprivate init() {}
    }

    struct _PPUserProfileThumbnailItemCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPUserProfileThumbnailItemCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "PPUserProfileThumbnailItemCollectionViewCellID"
      let name = "PPUserProfileThumbnailItemCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPUserProfileThumbnailItemCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPUserProfileThumbnailItemCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'PPUserProfileThumbnailItemCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PPUserSuggestionCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PPUserSuggestionCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "PPUserSuggestionCollectionViewCellID"
      let name = "PPUserSuggestionCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPUserSuggestionCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPUserSuggestionCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _PPVideoItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPVideoItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPVideoItemTableViewCellID"
      let name = "PPVideoItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPVideoItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPVideoItemTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Heart1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Heart1' is used in nib 'PPVideoItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Star1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Star1' is used in nib 'PPVideoItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backs", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backs' is used in nib 'PPVideoItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'PPVideoItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mors", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mors' is used in nib 'PPVideoItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pause", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pause' is used in nib 'PPVideoItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'play' is used in nib 'PPVideoItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "skipBackward", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'skipBackward' is used in nib 'PPVideoItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "skipForward", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'skipForward' is used in nib 'PPVideoItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "talk", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'talk' is used in nib 'PPVideoItemTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in nib 'PPVideoItemTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-2' is used in nib 'PPVideoItemTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PPYourStoryItemCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPYourStoryItemCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "PPYourStoryItemCollectionViewCellID"
      let name = "PPYourStoryItemCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPYourStoryItemCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPYourStoryItemCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Science", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Science' is used in nib 'PPYourStoryItemCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plus_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plus_white' is used in nib 'PPYourStoryItemCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in nib 'PPYourStoryItemCollectionViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PPYoutubeItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PPYoutubeItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PPYoutubeItemTableViewCellID"
      let name = "PPYoutubeItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PPYoutubeItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PPYoutubeItemTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Heart1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Heart1' is used in nib 'PPYoutubeItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Star1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Star1' is used in nib 'PPYoutubeItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backs", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backs' is used in nib 'PPYoutubeItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'PPYoutubeItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mors", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mors' is used in nib 'PPYoutubeItemTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "talk", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'talk' is used in nib 'PPYoutubeItemTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in nib 'PPYoutubeItemTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-2' is used in nib 'PPYoutubeItemTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PostWithFourImage: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PostWithFourImage

      let bundle = R.hostingBundle
      let identifier = "FourImageCell"
      let name = "PostWithFourImage"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostWithFourImage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostWithFourImage
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Heart1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Heart1' is used in nib 'PostWithFourImage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Star1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Star1' is used in nib 'PostWithFourImage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backs", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backs' is used in nib 'PostWithFourImage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'PostWithFourImage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mors", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mors' is used in nib 'PostWithFourImage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "talk", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'talk' is used in nib 'PostWithFourImage', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in nib 'PostWithFourImage', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-2' is used in nib 'PostWithFourImage', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PostWithFourImageCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PostWithFourImageCollectionCell

      let bundle = R.hostingBundle
      let identifier = "FourImageCollectionCell"
      let name = "PostWithFourImageCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostWithFourImageCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostWithFourImageCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Heart1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Heart1' is used in nib 'PostWithFourImageCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Star1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Star1' is used in nib 'PostWithFourImageCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backs", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backs' is used in nib 'PostWithFourImageCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'PostWithFourImageCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mors", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mors' is used in nib 'PostWithFourImageCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "talk", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'talk' is used in nib 'PostWithFourImageCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in nib 'PostWithFourImageCollectionCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-2' is used in nib 'PostWithFourImageCollectionCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PostWithImageCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PostWithImageCell

      let bundle = R.hostingBundle
      let identifier = "postImageCell"
      let name = "PostWithImageCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostWithImageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostWithImageCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Heart1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Heart1' is used in nib 'PostWithImageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Science", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Science' is used in nib 'PostWithImageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Star1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Star1' is used in nib 'PostWithImageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backs", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backs' is used in nib 'PostWithImageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_action_more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_action_more' is used in nib 'PostWithImageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "talk", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'talk' is used in nib 'PostWithImageCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color' is used in nib 'PostWithImageCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in nib 'PostWithImageCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-2' is used in nib 'PostWithImageCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PostWithOneImageCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PostWithOneImageCell

      let bundle = R.hostingBundle
      let identifier = "OneImageCell"
      let name = "PostWithOneImageCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostWithOneImageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostWithOneImageCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Heart1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Heart1' is used in nib 'PostWithOneImageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Science", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Science' is used in nib 'PostWithOneImageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Star1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Star1' is used in nib 'PostWithOneImageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backs", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backs' is used in nib 'PostWithOneImageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'PostWithOneImageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mors", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mors' is used in nib 'PostWithOneImageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "talk", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'talk' is used in nib 'PostWithOneImageCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in nib 'PostWithOneImageCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-2' is used in nib 'PostWithOneImageCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PostWithOneImageCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PostWithOneImageCollectionCell

      let bundle = R.hostingBundle
      let identifier = "postOneImageCollectionCell"
      let name = "PostWithOneImageCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostWithOneImageCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostWithOneImageCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Heart1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Heart1' is used in nib 'PostWithOneImageCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Science", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Science' is used in nib 'PostWithOneImageCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Star1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Star1' is used in nib 'PostWithOneImageCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backs", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backs' is used in nib 'PostWithOneImageCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'PostWithOneImageCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mors", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mors' is used in nib 'PostWithOneImageCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "talk", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'talk' is used in nib 'PostWithOneImageCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in nib 'PostWithOneImageCollectionCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-2' is used in nib 'PostWithOneImageCollectionCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PostWithThreeImage: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PostWithThreeImage

      let bundle = R.hostingBundle
      let identifier = "ThreeImageCell"
      let name = "PostWithThreeImage"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostWithThreeImage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostWithThreeImage
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Heart1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Heart1' is used in nib 'PostWithThreeImage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Science", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Science' is used in nib 'PostWithThreeImage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Star1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Star1' is used in nib 'PostWithThreeImage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backs", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backs' is used in nib 'PostWithThreeImage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'PostWithThreeImage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mors", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mors' is used in nib 'PostWithThreeImage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "talk", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'talk' is used in nib 'PostWithThreeImage', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in nib 'PostWithThreeImage', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-2' is used in nib 'PostWithThreeImage', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PostWithThreeImageCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PostWithThreeImageCollectionCell

      let bundle = R.hostingBundle
      let identifier = "ThreeImageCollectionCell"
      let name = "PostWithThreeImageCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostWithThreeImageCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostWithThreeImageCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Heart1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Heart1' is used in nib 'PostWithThreeImageCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Science", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Science' is used in nib 'PostWithThreeImageCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Star1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Star1' is used in nib 'PostWithThreeImageCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backs", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backs' is used in nib 'PostWithThreeImageCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'PostWithThreeImageCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mors", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mors' is used in nib 'PostWithThreeImageCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "talk", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'talk' is used in nib 'PostWithThreeImageCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in nib 'PostWithThreeImageCollectionCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-2' is used in nib 'PostWithThreeImageCollectionCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PostWithTwoImage: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PostWithTwoImage

      let bundle = R.hostingBundle
      let identifier = "TwoImageCell"
      let name = "PostWithTwoImage"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostWithTwoImage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostWithTwoImage
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Heart1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Heart1' is used in nib 'PostWithTwoImage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Science", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Science' is used in nib 'PostWithTwoImage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Star1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Star1' is used in nib 'PostWithTwoImage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backs", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backs' is used in nib 'PostWithTwoImage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'PostWithTwoImage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mors", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mors' is used in nib 'PostWithTwoImage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "talk", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'talk' is used in nib 'PostWithTwoImage', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in nib 'PostWithTwoImage', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-2' is used in nib 'PostWithTwoImage', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PostWithTwoImageCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PostWithTwoImageCollectionCell

      let bundle = R.hostingBundle
      let identifier = "TwoImageCollectionCell"
      let name = "PostWithTwoImageCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostWithTwoImageCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostWithTwoImageCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Heart1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Heart1' is used in nib 'PostWithTwoImageCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Science", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Science' is used in nib 'PostWithTwoImageCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Star1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Star1' is used in nib 'PostWithTwoImageCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backs", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backs' is used in nib 'PostWithTwoImageCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'PostWithTwoImageCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mors", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mors' is used in nib 'PostWithTwoImageCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "talk", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'talk' is used in nib 'PostWithTwoImageCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in nib 'PostWithTwoImageCollectionCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-2' is used in nib 'PostWithTwoImageCollectionCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SectionThreeShowFundingDetailsTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SectionThreeShowFundingDetailsTableItem

      let bundle = R.hostingBundle
      let identifier = "SectionThreeShowFundingDetailsTableItem"
      let name = "SectionThreeShowFundingDetailsTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SectionThreeShowFundingDetailsTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SectionThreeShowFundingDetailsTableItem
      }

      fileprivate init() {}
    }

    struct _SectionTwoTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SectionTwoTableItem

      let bundle = R.hostingBundle
      let identifier = "SectionTwoTableItem"
      let name = "SectionTwoTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SectionTwoTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SectionTwoTableItem
      }

      fileprivate init() {}
    }

    struct _ShowDetailsSectionOneTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ShowDetailsSectionOneTableItem

      let bundle = R.hostingBundle
      let identifier = "ShowDetailsSectionOneTableItem"
      let name = "ShowDetailsSectionOneTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ShowDetailsSectionOneTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShowDetailsSectionOneTableItem
      }

      fileprivate init() {}
    }

    struct _ShowFundingTableItem: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ShowFundingTableItem

      let bundle = R.hostingBundle
      let identifier = "ShowFundingTableItem"
      let name = "ShowFundingTableItem"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ShowFundingTableItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShowFundingTableItem
      }

      fileprivate init() {}
    }

    struct _StoreCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = StoreCollectionCell

      let bundle = R.hostingBundle
      let identifier = "StoreCollectionCell"
      let name = "StoreCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StoreCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StoreCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "downloadarraow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'downloadarraow' is used in nib 'StoreCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "eyes", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'eyes' is used in nib 'StoreCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-2' is used in nib 'StoreCollectionCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-3' is used in nib 'StoreCollectionCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _StoreTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = StoreTableViewCell

      let bundle = R.hostingBundle
      let identifier = "StoreTableCell"
      let name = "StoreTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StoreTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StoreTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "rights", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rights' is used in nib 'StoreTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color' is used in nib 'StoreTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _UserDetailCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UserDetailCell

      let bundle = R.hostingBundle
      let identifier = "UserdetailCell"
      let name = "UserDetailCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserDetailCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserDetailCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Science", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Science' is used in nib 'UserDetailCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "correct", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'correct' is used in nib 'UserDetailCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color' is used in nib 'UserDetailCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in nib 'UserDetailCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _UserImgesCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UserImgesCell

      let bundle = R.hostingBundle
      let identifier = "UserImagescell"
      let name = "UserImgesCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserImgesCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserImgesCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Grid", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Grid' is used in nib 'UserImgesCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "List", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'List' is used in nib 'UserImgesCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Plus' is used in nib 'UserImgesCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color' is used in nib 'UserImgesCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _UserSuggestionCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UserSuggestionCollectionCell

      let bundle = R.hostingBundle
      let identifier = "UserSuggestionCollectionCell"
      let name = "UserSuggestionCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserSuggestionCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserSuggestionCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'UserSuggestionCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color' is used in nib 'UserSuggestionCollectionCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in nib 'UserSuggestionCollectionCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _VerticalCollectionviewItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = VerticalCollectionviewItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "VerticalCollectionviewItemTableViewCellID"
      let name = "VerticalCollectionviewItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VerticalCollectionviewItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VerticalCollectionviewItemTableViewCell
      }

      fileprivate init() {}
    }

    struct _VideoCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = VideoCollectionCell

      let bundle = R.hostingBundle
      let identifier = "VideoCollectionCells"
      let name = "VideoCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VideoCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VideoCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Heart1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Heart1' is used in nib 'VideoCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Star1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Star1' is used in nib 'VideoCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backs", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backs' is used in nib 'VideoCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'VideoCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mors", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mors' is used in nib 'VideoCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pause", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pause' is used in nib 'VideoCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'play' is used in nib 'VideoCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "skipBackward", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'skipBackward' is used in nib 'VideoCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "skipForward", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'skipForward' is used in nib 'VideoCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "talk", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'talk' is used in nib 'VideoCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in nib 'VideoCollectionCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-2' is used in nib 'VideoCollectionCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _YoutubeCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = YoutubeCollectionCell

      let bundle = R.hostingBundle
      let identifier = "YouTubeCollectionCell"
      let name = "YoutubeCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> YoutubeCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? YoutubeCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Heart1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Heart1' is used in nib 'YoutubeCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Star1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Star1' is used in nib 'YoutubeCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backs", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backs' is used in nib 'YoutubeCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in nib 'YoutubeCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mors", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mors' is used in nib 'YoutubeCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "talk", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'talk' is used in nib 'YoutubeCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in nib 'YoutubeCollectionCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-2' is used in nib 'YoutubeCollectionCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try chat.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try dashboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try explore.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try funding.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try popup.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try post.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try profile.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try search.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try settings.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try store.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try story.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try suggestedUser.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct chat: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let chatListVC = StoryboardViewControllerResource<ChatListVC>(identifier: "ChatListVC")
      let chatVC = StoryboardViewControllerResource<ChatVC>(identifier: "ChatVC")
      let contactsVC = StoryboardViewControllerResource<ContactsVC>(identifier: "ContactsVC")
      let name = "Chat"

      func chatListVC(_: Void = ()) -> ChatListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chatListVC)
      }

      func chatVC(_: Void = ()) -> ChatVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chatVC)
      }

      func contactsVC(_: Void = ()) -> ContactsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contactsVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_action_more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_action_more' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_add_user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add_user' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chat_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_chat_bg' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_send", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_send' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_user' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "image-gallery", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image-gallery' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "left-arrows", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'left-arrows' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "talks", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'talks' is used in storyboard 'Chat', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-2' is used in storyboard 'Chat', but couldn't be loaded.") }
        }
        if _R.storyboard.chat().chatListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chatListVC' could not be loaded from storyboard 'Chat' as 'ChatListVC'.") }
        if _R.storyboard.chat().chatVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chatVC' could not be loaded from storyboard 'Chat' as 'ChatVC'.") }
        if _R.storyboard.chat().contactsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contactsVC' could not be loaded from storyboard 'Chat' as 'ContactsVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct dashboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TabbarController

      let addPostVC = StoryboardViewControllerResource<AddPostVC>(identifier: "AddPostVC")
      let bundle = R.hostingBundle
      let exploreVC = StoryboardViewControllerResource<ExploreVC>(identifier: "ExploreVC")
      let homeVC = StoryboardViewControllerResource<HomeVC>(identifier: "HomeVC")
      let name = "Dashboard"
      let notificationVC = StoryboardViewControllerResource<NotificationVC>(identifier: "NotificationVC")
      let profileVC = StoryboardViewControllerResource<ProfileVC>(identifier: "ProfileVC")
      let tabbarVC = StoryboardViewControllerResource<TabbarController>(identifier: "TabbarVC")
      let userActivitiesVC = StoryboardViewControllerResource<UserActivitiesVC>(identifier: "UserActivitiesVC")
      let userPostVC = StoryboardViewControllerResource<UserPostVC>(identifier: "UserPostVC")

      func addPostVC(_: Void = ()) -> AddPostVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addPostVC)
      }

      func exploreVC(_: Void = ()) -> ExploreVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: exploreVC)
      }

      func homeVC(_: Void = ()) -> HomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeVC)
      }

      func notificationVC(_: Void = ()) -> NotificationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationVC)
      }

      func profileVC(_: Void = ()) -> ProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileVC)
      }

      func tabbarVC(_: Void = ()) -> TabbarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabbarVC)
      }

      func userActivitiesVC(_: Void = ()) -> UserActivitiesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userActivitiesVC)
      }

      func userPostVC(_: Void = ()) -> UserPostVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userPostVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Message", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Message' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_add_post", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add_post' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_noUserData", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_noUserData' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_explore", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_explore' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_home' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_notification", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_notification' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_profile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_profile' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "notificationBell", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'notificationBell' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "settings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'settings' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color' is used in storyboard 'Dashboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in storyboard 'Dashboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-2' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        }
        if _R.storyboard.dashboard().addPostVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addPostVC' could not be loaded from storyboard 'Dashboard' as 'AddPostVC'.") }
        if _R.storyboard.dashboard().exploreVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'exploreVC' could not be loaded from storyboard 'Dashboard' as 'ExploreVC'.") }
        if _R.storyboard.dashboard().homeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeVC' could not be loaded from storyboard 'Dashboard' as 'HomeVC'.") }
        if _R.storyboard.dashboard().notificationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationVC' could not be loaded from storyboard 'Dashboard' as 'NotificationVC'.") }
        if _R.storyboard.dashboard().profileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileVC' could not be loaded from storyboard 'Dashboard' as 'ProfileVC'.") }
        if _R.storyboard.dashboard().tabbarVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabbarVC' could not be loaded from storyboard 'Dashboard' as 'TabbarController'.") }
        if _R.storyboard.dashboard().userActivitiesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userActivitiesVC' could not be loaded from storyboard 'Dashboard' as 'UserActivitiesVC'.") }
        if _R.storyboard.dashboard().userPostVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userPostVC' could not be loaded from storyboard 'Dashboard' as 'UserPostVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct explore: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let explorePostController = StoryboardViewControllerResource<ShowAllExplorePostsController>(identifier: "ExplorePostController")
      let name = "Explore"

      func explorePostController(_: Void = ()) -> ShowAllExplorePostsController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: explorePostController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color' is used in storyboard 'Explore', but couldn't be loaded.") }
        }
        if _R.storyboard.explore().explorePostController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'explorePostController' could not be loaded from storyboard 'Explore' as 'ShowAllExplorePostsController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct funding: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addFundingVC = StoryboardViewControllerResource<AddFundingVC>(identifier: "AddFundingVC")
      let bundle = R.hostingBundle
      let name = "Funding"
      let showFundingDetailsVC = StoryboardViewControllerResource<ShowFundingDetailsVC>(identifier: "ShowFundingDetailsVC")
      let showFundingVC = StoryboardViewControllerResource<ShowFundingVC>(identifier: "ShowFundingVC")

      func addFundingVC(_: Void = ()) -> AddFundingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addFundingVC)
      }

      func showFundingDetailsVC(_: Void = ()) -> ShowFundingDetailsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: showFundingDetailsVC)
      }

      func showFundingVC(_: Void = ()) -> ShowFundingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: showFundingVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_action_more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_action_more' is used in storyboard 'Funding', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plus_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plus_white' is used in storyboard 'Funding', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_item_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_item_placeholder' is used in storyboard 'Funding', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.funding().addFundingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addFundingVC' could not be loaded from storyboard 'Funding' as 'AddFundingVC'.") }
        if _R.storyboard.funding().showFundingDetailsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'showFundingDetailsVC' could not be loaded from storyboard 'Funding' as 'ShowFundingDetailsVC'.") }
        if _R.storyboard.funding().showFundingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'showFundingVC' could not be loaded from storyboard 'Funding' as 'ShowFundingVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "image_2021_11_24T17_06_33_536Z", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image_2021_11_24T17_06_33_536Z' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SplashVC

      let bundle = R.hostingBundle
      let businessAccountVC = StoryboardViewControllerResource<BusinessAccountController>(identifier: "BusinessAccountVC")
      let forgetPasswordVC = StoryboardViewControllerResource<ForgetPasswordVC>(identifier: "ForgetPasswordVC")
      let loginVC = StoryboardViewControllerResource<LoginVC>(identifier: "LoginVC")
      let name = "Main"
      let ppWebViewControllerID = StoryboardViewControllerResource<PPWebViewController>(identifier: "PPWebViewControllerID")
      let signUpVC = StoryboardViewControllerResource<SignUpVC>(identifier: "SignUpVC")
      let splashVC = StoryboardViewControllerResource<SplashVC>(identifier: "SplashVC")

      func businessAccountVC(_: Void = ()) -> BusinessAccountController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: businessAccountVC)
      }

      func forgetPasswordVC(_: Void = ()) -> ForgetPasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgetPasswordVC)
      }

      func loginVC(_: Void = ()) -> LoginVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginVC)
      }

      func ppWebViewControllerID(_: Void = ()) -> PPWebViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ppWebViewControllerID)
      }

      func signUpVC(_: Void = ()) -> SignUpVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpVC)
      }

      func splashVC(_: Void = ()) -> SplashVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: splashVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "backGr1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backGr1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "downArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'downArrow' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "gallery", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gallery' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "image_2021_11_24T17_06_33_536Z", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image_2021_11_24T17_06_33_536Z' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "login", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'login' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-3' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().businessAccountVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'businessAccountVC' could not be loaded from storyboard 'Main' as 'BusinessAccountController'.") }
        if _R.storyboard.main().forgetPasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgetPasswordVC' could not be loaded from storyboard 'Main' as 'ForgetPasswordVC'.") }
        if _R.storyboard.main().loginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Main' as 'LoginVC'.") }
        if _R.storyboard.main().ppWebViewControllerID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ppWebViewControllerID' could not be loaded from storyboard 'Main' as 'PPWebViewController'.") }
        if _R.storyboard.main().signUpVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpVC' could not be loaded from storyboard 'Main' as 'SignUpVC'.") }
        if _R.storyboard.main().splashVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'splashVC' could not be loaded from storyboard 'Main' as 'SplashVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct popup: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Popup"
      let paymentPopVC = StoryboardViewControllerResource<PaymentPopUpVC>(identifier: "paymentPopVC")
      let securityPopupVC = StoryboardViewControllerResource<SecurityPopupVC>(identifier: "SecurityPopupVC")

      func paymentPopVC(_: Void = ()) -> PaymentPopUpVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paymentPopVC)
      }

      func securityPopupVC(_: Void = ()) -> SecurityPopupVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: securityPopupVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.popup().securityPopupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'securityPopupVC' could not be loaded from storyboard 'Popup' as 'SecurityPopupVC'.") }
        if _R.storyboard.popup().paymentPopVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paymentPopVC' could not be loaded from storyboard 'Popup' as 'PaymentPopUpVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct post: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addPostPostVC = StoryboardViewControllerResource<AddPostPostVC>(identifier: "AddPostPostVC")
      let addToPostVC = StoryboardViewControllerResource<AddToPostVC>(identifier: "AddToPostVC")
      let bundle = R.hostingBundle
      let commentReplyVC = StoryboardViewControllerResource<CommentReplyVC>(identifier: "CommentReplyVC")
      let commentVC = StoryboardViewControllerResource<CommentVC>(identifier: "CommentVC")
      let editPostVC = StoryboardViewControllerResource<EditPostController>(identifier: "EditPostVC")
      let embbedVideoVC = StoryboardViewControllerResource<EmbbedVideoVC>(identifier: "EmbbedVideoVC")
      let gifvC = StoryboardViewControllerResource<GIFVC>(identifier: "GIFVC")
      let likeNav_VC = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "LikeNav_VC")
      let name = "Post"
      let showPostsVC = StoryboardViewControllerResource<ShowPostVC>(identifier: "ShowPostsVC")
      let showProfilePostDataVC = StoryboardViewControllerResource<ShowProfilePostDataVC>(identifier: "ShowProfilePostDataVC")
      let showUserProfileDetailsVC = StoryboardViewControllerResource<ShowUserProfileDetailsVC>(identifier: "ShowUserProfileDetailsVC")
      let showUserProfileVC = StoryboardViewControllerResource<ShowUserProfileVC>(identifier: "ShowUserProfileVC")

      func addPostPostVC(_: Void = ()) -> AddPostPostVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addPostPostVC)
      }

      func addToPostVC(_: Void = ()) -> AddToPostVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addToPostVC)
      }

      func commentReplyVC(_: Void = ()) -> CommentReplyVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: commentReplyVC)
      }

      func commentVC(_: Void = ()) -> CommentVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: commentVC)
      }

      func editPostVC(_: Void = ()) -> EditPostController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editPostVC)
      }

      func embbedVideoVC(_: Void = ()) -> EmbbedVideoVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: embbedVideoVC)
      }

      func gifvC(_: Void = ()) -> GIFVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: gifvC)
      }

      func likeNav_VC(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: likeNav_VC)
      }

      func showPostsVC(_: Void = ()) -> ShowPostVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: showPostsVC)
      }

      func showProfilePostDataVC(_: Void = ()) -> ShowProfilePostDataVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: showProfilePostDataVC)
      }

      func showUserProfileDetailsVC(_: Void = ()) -> ShowUserProfileDetailsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: showUserProfileDetailsVC)
      }

      func showUserProfileVC(_: Void = ()) -> ShowUserProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: showUserProfileVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Grid", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Grid' is used in storyboard 'Post', but couldn't be loaded.") }
        if UIKit.UIImage(named: "List", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'List' is used in storyboard 'Post', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Science", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Science' is used in storyboard 'Post', but couldn't be loaded.") }
        if UIKit.UIImage(named: "comment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'comment' is used in storyboard 'Post', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_aboutGender", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_aboutGender' is used in storyboard 'Post', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_aboutMail", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_aboutMail' is used in storyboard 'Post', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_about_Description", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_about_Description' is used in storyboard 'Post', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_action_more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_action_more' is used in storyboard 'Post', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_black' is used in storyboard 'Post', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_noChat", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_noChat' is used in storyboard 'Post', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_noUserData", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_noUserData' is used in storyboard 'Post', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profile_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profile_small' is used in storyboard 'Post', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_send", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_send' is used in storyboard 'Post', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_smiley", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_smiley' is used in storyboard 'Post', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_user' is used in storyboard 'Post', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tooltip_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tooltip_image' is used in storyboard 'Post', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in storyboard 'Post', but couldn't be loaded.") }
        if UIKit.UIImage(named: "left-arrows", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'left-arrows' is used in storyboard 'Post', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sadEmo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sadEmo' is used in storyboard 'Post', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color' is used in storyboard 'Post', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in storyboard 'Post', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-2' is used in storyboard 'Post', but couldn't be loaded.") }
        }
        if _R.storyboard.post().addPostPostVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addPostPostVC' could not be loaded from storyboard 'Post' as 'AddPostPostVC'.") }
        if _R.storyboard.post().addToPostVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addToPostVC' could not be loaded from storyboard 'Post' as 'AddToPostVC'.") }
        if _R.storyboard.post().commentReplyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'commentReplyVC' could not be loaded from storyboard 'Post' as 'CommentReplyVC'.") }
        if _R.storyboard.post().commentVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'commentVC' could not be loaded from storyboard 'Post' as 'CommentVC'.") }
        if _R.storyboard.post().editPostVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editPostVC' could not be loaded from storyboard 'Post' as 'EditPostController'.") }
        if _R.storyboard.post().embbedVideoVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'embbedVideoVC' could not be loaded from storyboard 'Post' as 'EmbbedVideoVC'.") }
        if _R.storyboard.post().gifvC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'gifvC' could not be loaded from storyboard 'Post' as 'GIFVC'.") }
        if _R.storyboard.post().likeNav_VC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'likeNav_VC' could not be loaded from storyboard 'Post' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.post().showPostsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'showPostsVC' could not be loaded from storyboard 'Post' as 'ShowPostVC'.") }
        if _R.storyboard.post().showProfilePostDataVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'showProfilePostDataVC' could not be loaded from storyboard 'Post' as 'ShowProfilePostDataVC'.") }
        if _R.storyboard.post().showUserProfileDetailsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'showUserProfileDetailsVC' could not be loaded from storyboard 'Post' as 'ShowUserProfileDetailsVC'.") }
        if _R.storyboard.post().showUserProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'showUserProfileVC' could not be loaded from storyboard 'Post' as 'ShowUserProfileVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct profile: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let editProfileVC = StoryboardViewControllerResource<EditProfileVC>(identifier: "EditProfileVC")
      let favoritesVC = StoryboardViewControllerResource<FavoritesVC>(identifier: "FavoritesVC")
      let followersVC = StoryboardViewControllerResource<FollowersVC>(identifier: "FollowersVC")
      let followingVC = StoryboardViewControllerResource<FollowingVC>(identifier: "FollowingVC")
      let name = "Profile"
      let userSuggestionVC = StoryboardViewControllerResource<UserSuggestionVC>(identifier: "UserSuggestionVC")

      func editProfileVC(_: Void = ()) -> EditProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editProfileVC)
      }

      func favoritesVC(_: Void = ()) -> FavoritesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: favoritesVC)
      }

      func followersVC(_: Void = ()) -> FollowersVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: followersVC)
      }

      func followingVC(_: Void = ()) -> FollowingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: followingVC)
      }

      func userSuggestionVC(_: Void = ()) -> UserSuggestionVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userSuggestionVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_capture_camera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_capture_camera' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_profile_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_profile_placeholder' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sadEmo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sadEmo' is used in storyboard 'Profile', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color' is used in storyboard 'Profile', but couldn't be loaded.") }
        }
        if _R.storyboard.profile().editProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editProfileVC' could not be loaded from storyboard 'Profile' as 'EditProfileVC'.") }
        if _R.storyboard.profile().favoritesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'favoritesVC' could not be loaded from storyboard 'Profile' as 'FavoritesVC'.") }
        if _R.storyboard.profile().followersVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'followersVC' could not be loaded from storyboard 'Profile' as 'FollowersVC'.") }
        if _R.storyboard.profile().followingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'followingVC' could not be loaded from storyboard 'Profile' as 'FollowingVC'.") }
        if _R.storyboard.profile().userSuggestionVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userSuggestionVC' could not be loaded from storyboard 'Profile' as 'UserSuggestionVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct search: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let fetchHashTagPostVC = StoryboardViewControllerResource<FetchHashTagPostVC>(identifier: "FetchHashTagPostVC")
      let name = "Search"
      let searchVC = StoryboardViewControllerResource<SearchVC>(identifier: "SearchVC")

      func fetchHashTagPostVC(_: Void = ()) -> FetchHashTagPostVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: fetchHashTagPostVC)
      }

      func searchVC(_: Void = ()) -> SearchVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.search().fetchHashTagPostVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'fetchHashTagPostVC' could not be loaded from storyboard 'Search' as 'FetchHashTagPostVC'.") }
        if _R.storyboard.search().searchVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchVC' could not be loaded from storyboard 'Search' as 'SearchVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct settings: Rswift.StoryboardResourceType, Rswift.Validatable {
      let accountPrivacyVC = StoryboardViewControllerResource<AccountPrivacyVC>(identifier: "AccountPrivacyVC")
      let blockUserVC = StoryboardViewControllerResource<BlockUserVC>(identifier: "BlockUserVC")
      let bundle = R.hostingBundle
      let changePasswordVC = StoryboardViewControllerResource<ChangePasswordVC>(identifier: "ChangePasswordVC")
      let cropImageVC = StoryboardViewControllerResource<CropImageController>(identifier: "CropImageVC")
      let deleteAccountVC = StoryboardViewControllerResource<DeleteAccountVC>(identifier: "DeleteAccountVC")
      let generalVC = StoryboardViewControllerResource<GeneralVC>(identifier: "GeneralVC")
      let manageSessionVC = StoryboardViewControllerResource<ManageSessions>(identifier: "ManageSessionVC")
      let myAffilitiesVC = StoryboardViewControllerResource<MyAffilitesController>(identifier: "MyAffilitiesVC")
      let name = "Settings"
      let notificationSettingsVC = StoryboardViewControllerResource<NotificationSettingsVC>(identifier: "NotificationSettingsVC")
      let settingVC = StoryboardViewControllerResource<SettingVC>(identifier: "SettingVC")
      let settingsProfileVC = StoryboardViewControllerResource<SettingsProfileVC>(identifier: "SettingsProfileVC")
      let verificationVC = StoryboardViewControllerResource<VerificationController>(identifier: "VerificationVC")
      let withdrawalVC = StoryboardViewControllerResource<WidthdrawalsController>(identifier: "WithdrawalVC")

      func accountPrivacyVC(_: Void = ()) -> AccountPrivacyVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: accountPrivacyVC)
      }

      func blockUserVC(_: Void = ()) -> BlockUserVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: blockUserVC)
      }

      func changePasswordVC(_: Void = ()) -> ChangePasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePasswordVC)
      }

      func cropImageVC(_: Void = ()) -> CropImageController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cropImageVC)
      }

      func deleteAccountVC(_: Void = ()) -> DeleteAccountVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: deleteAccountVC)
      }

      func generalVC(_: Void = ()) -> GeneralVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: generalVC)
      }

      func manageSessionVC(_: Void = ()) -> ManageSessions? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: manageSessionVC)
      }

      func myAffilitiesVC(_: Void = ()) -> MyAffilitesController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myAffilitiesVC)
      }

      func notificationSettingsVC(_: Void = ()) -> NotificationSettingsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationSettingsVC)
      }

      func settingVC(_: Void = ()) -> SettingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingVC)
      }

      func settingsProfileVC(_: Void = ()) -> SettingsProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsProfileVC)
      }

      func verificationVC(_: Void = ()) -> VerificationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: verificationVC)
      }

      func withdrawalVC(_: Void = ()) -> WidthdrawalsController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: withdrawalVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "backGr1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backGr1' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dollar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dollar' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_radioOff", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_radioOff' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_user' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_verified", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_verified' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paypal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paypal' is used in storyboard 'Settings', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color' is used in storyboard 'Settings', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in storyboard 'Settings', but couldn't be loaded.") }
        }
        if _R.storyboard.settings().accountPrivacyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'accountPrivacyVC' could not be loaded from storyboard 'Settings' as 'AccountPrivacyVC'.") }
        if _R.storyboard.settings().blockUserVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'blockUserVC' could not be loaded from storyboard 'Settings' as 'BlockUserVC'.") }
        if _R.storyboard.settings().changePasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePasswordVC' could not be loaded from storyboard 'Settings' as 'ChangePasswordVC'.") }
        if _R.storyboard.settings().cropImageVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cropImageVC' could not be loaded from storyboard 'Settings' as 'CropImageController'.") }
        if _R.storyboard.settings().deleteAccountVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'deleteAccountVC' could not be loaded from storyboard 'Settings' as 'DeleteAccountVC'.") }
        if _R.storyboard.settings().generalVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'generalVC' could not be loaded from storyboard 'Settings' as 'GeneralVC'.") }
        if _R.storyboard.settings().manageSessionVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'manageSessionVC' could not be loaded from storyboard 'Settings' as 'ManageSessions'.") }
        if _R.storyboard.settings().myAffilitiesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myAffilitiesVC' could not be loaded from storyboard 'Settings' as 'MyAffilitesController'.") }
        if _R.storyboard.settings().notificationSettingsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationSettingsVC' could not be loaded from storyboard 'Settings' as 'NotificationSettingsVC'.") }
        if _R.storyboard.settings().settingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingVC' could not be loaded from storyboard 'Settings' as 'SettingVC'.") }
        if _R.storyboard.settings().settingsProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsProfileVC' could not be loaded from storyboard 'Settings' as 'SettingsProfileVC'.") }
        if _R.storyboard.settings().verificationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'verificationVC' could not be loaded from storyboard 'Settings' as 'VerificationController'.") }
        if _R.storyboard.settings().withdrawalVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'withdrawalVC' could not be loaded from storyboard 'Settings' as 'WidthdrawalsController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct store: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let createStoreVC = StoryboardViewControllerResource<CreateStoreController>(identifier: "CreateStoreVC")
      let dashboard = StoryboardViewControllerResource<BarButtonDashBoardVC>(identifier: "dashboard")
      let myDownloadsVC = StoryboardViewControllerResource<MyDownloadsVC>(identifier: "MyDownloadsVC")
      let myStoreVC = StoryboardViewControllerResource<MyStoreVC>(identifier: "MyStoreVC")
      let name = "Store"
      let storeCategoryVC = StoryboardViewControllerResource<StoreCategoryController>(identifier: "StoreCategoryVC")
      let storeDetailVC = StoryboardViewControllerResource<StoreDetailsController>(identifier: "StoreDetailVC")
      let storeFilterVC = StoryboardViewControllerResource<StoreFilterController>(identifier: "StoreFilterVC")
      let storeLicenseVC = StoryboardViewControllerResource<StoreLicenseController>(identifier: "StoreLicenseVC")
      let storeVC = StoryboardViewControllerResource<StoreController>(identifier: "StoreVC")

      func createStoreVC(_: Void = ()) -> CreateStoreController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createStoreVC)
      }

      func dashboard(_: Void = ()) -> BarButtonDashBoardVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dashboard)
      }

      func myDownloadsVC(_: Void = ()) -> MyDownloadsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myDownloadsVC)
      }

      func myStoreVC(_: Void = ()) -> MyStoreVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myStoreVC)
      }

      func storeCategoryVC(_: Void = ()) -> StoreCategoryController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: storeCategoryVC)
      }

      func storeDetailVC(_: Void = ()) -> StoreDetailsController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: storeDetailVC)
      }

      func storeFilterVC(_: Void = ()) -> StoreFilterController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: storeFilterVC)
      }

      func storeLicenseVC(_: Void = ()) -> StoreLicenseController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: storeLicenseVC)
      }

      func storeVC(_: Void = ()) -> StoreController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: storeVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Science", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Science' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "left-arrows", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'left-arrows' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "photes", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'photes' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pluss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pluss' is used in storyboard 'Store', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color' is used in storyboard 'Store', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-1' is used in storyboard 'Store', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-3' is used in storyboard 'Store', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color-4", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color-4' is used in storyboard 'Store', but couldn't be loaded.") }
        }
        if _R.storyboard.store().createStoreVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createStoreVC' could not be loaded from storyboard 'Store' as 'CreateStoreController'.") }
        if _R.storyboard.store().myDownloadsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myDownloadsVC' could not be loaded from storyboard 'Store' as 'MyDownloadsVC'.") }
        if _R.storyboard.store().myStoreVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myStoreVC' could not be loaded from storyboard 'Store' as 'MyStoreVC'.") }
        if _R.storyboard.store().storeCategoryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'storeCategoryVC' could not be loaded from storyboard 'Store' as 'StoreCategoryController'.") }
        if _R.storyboard.store().storeDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'storeDetailVC' could not be loaded from storyboard 'Store' as 'StoreDetailsController'.") }
        if _R.storyboard.store().storeFilterVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'storeFilterVC' could not be loaded from storyboard 'Store' as 'StoreFilterController'.") }
        if _R.storyboard.store().storeLicenseVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'storeLicenseVC' could not be loaded from storyboard 'Store' as 'StoreLicenseController'.") }
        if _R.storyboard.store().storeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'storeVC' could not be loaded from storyboard 'Store' as 'StoreController'.") }
        if _R.storyboard.store().dashboard() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dashboard' could not be loaded from storyboard 'Store' as 'BarButtonDashBoardVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct story: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let createImageStoryVC = StoryboardViewControllerResource<CreateImageStoryVC>(identifier: "CreateImageStoryVC")
      let createStoryTextVC = StoryboardViewControllerResource<CreateStoryTextVC>(identifier: "CreateStoryTextVC")
      let createVideoStoryVC = StoryboardViewControllerResource<CreateVideoStoryVC>(identifier: "CreateVideoStoryVC")
      let name = "Story"
      let pageViewController = StoryboardViewControllerResource<UIKit.UIPageViewController>(identifier: "PageViewController")
      let ppStoryTextColorViewControllerID = StoryboardViewControllerResource<PPStoryTextColorViewController>(identifier: "PPStoryTextColorViewControllerID")
      let preStoriesItemVC = StoryboardViewControllerResource<PreStoriesItemVC>(identifier: "PreStoriesItemVC")
      let storiesItemVC = StoryboardViewControllerResource<StoriesItemVC>(identifier: "StoriesItemVC")

      func createImageStoryVC(_: Void = ()) -> CreateImageStoryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createImageStoryVC)
      }

      func createStoryTextVC(_: Void = ()) -> CreateStoryTextVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createStoryTextVC)
      }

      func createVideoStoryVC(_: Void = ()) -> CreateVideoStoryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createVideoStoryVC)
      }

      func pageViewController(_: Void = ()) -> UIKit.UIPageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pageViewController)
      }

      func ppStoryTextColorViewControllerID(_: Void = ()) -> PPStoryTextColorViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ppStoryTextColorViewControllerID)
      }

      func preStoriesItemVC(_: Void = ()) -> PreStoriesItemVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: preStoriesItemVC)
      }

      func storiesItemVC(_: Void = ()) -> StoriesItemVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: storiesItemVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close' is used in storyboard 'Story', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_paint", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_paint' is used in storyboard 'Story', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color' is used in storyboard 'Story', but couldn't be loaded.") }
        }
        if _R.storyboard.story().createImageStoryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createImageStoryVC' could not be loaded from storyboard 'Story' as 'CreateImageStoryVC'.") }
        if _R.storyboard.story().createStoryTextVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createStoryTextVC' could not be loaded from storyboard 'Story' as 'CreateStoryTextVC'.") }
        if _R.storyboard.story().createVideoStoryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createVideoStoryVC' could not be loaded from storyboard 'Story' as 'CreateVideoStoryVC'.") }
        if _R.storyboard.story().ppStoryTextColorViewControllerID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ppStoryTextColorViewControllerID' could not be loaded from storyboard 'Story' as 'PPStoryTextColorViewController'.") }
        if _R.storyboard.story().pageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pageViewController' could not be loaded from storyboard 'Story' as 'UIKit.UIPageViewController'.") }
        if _R.storyboard.story().preStoriesItemVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'preStoriesItemVC' could not be loaded from storyboard 'Story' as 'PreStoriesItemVC'.") }
        if _R.storyboard.story().storiesItemVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'storiesItemVC' could not be loaded from storyboard 'Story' as 'StoriesItemVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct suggestedUser: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SuggestedUser"
      let suggestedUserVC = StoryboardViewControllerResource<SuggestedUserController>(identifier: "SuggestedUserVC")

      func suggestedUserVC(_: Void = ()) -> SuggestedUserController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: suggestedUserVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color' is used in storyboard 'SuggestedUser', but couldn't be loaded.") }
        }
        if _R.storyboard.suggestedUser().suggestedUserVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'suggestedUserVC' could not be loaded from storyboard 'SuggestedUser' as 'SuggestedUserController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
